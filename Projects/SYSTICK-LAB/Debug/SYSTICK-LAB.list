
SYSTICK-LAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000818  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000948  08000950  00010950  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000948  08000948  00010950  2**0
                  CONTENTS
  4 .ARM          00000000  08000948  08000948  00010950  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000948  08000950  00010950  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000948  08000948  00010948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800094c  0800094c  0001094c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010950  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  08000950  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000950  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010950  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000103c  00000000  00000000  00010979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000048f  00000000  00000000  000119b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000160  00000000  00000000  00011e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000108  00000000  00000000  00011fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f56  00000000  00000000  000120b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000fa5  00000000  00000000  00013006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003fa0  00000000  00000000  00013fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00017f4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000408  00000000  00000000  00017fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000930 	.word	0x08000930

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000930 	.word	0x08000930

08000170 <HLED_enSetON>:

	return SUCCESS;
}

ErrorState_t HLED_enSetON(u8 copyu8_LedPort, u8 copyu8_LedPin)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	460a      	mov	r2, r1
 800017a:	71fb      	strb	r3, [r7, #7]
 800017c:	4613      	mov	r3, r2
 800017e:	71bb      	strb	r3, [r7, #6]
#if(HLED_DIR == HLED_DIR_FORWARD)
	MGPIO_enSetPinValue(copyu8_LedPort, copyu8_LedPin, HIGH);
 8000180:	79b9      	ldrb	r1, [r7, #6]
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	2201      	movs	r2, #1
 8000186:	4618      	mov	r0, r3
 8000188:	f000 f818 	bl	80001bc <MGPIO_enSetPinValue>
	MGPIO_enSetPinValue(copyu8_LedPort, copyu8_LedPin, LOW);
#else
#error ("WRONG LED DIRECTION")
#endif

	return SUCCESS;
 800018c:	2302      	movs	r3, #2
}
 800018e:	4618      	mov	r0, r3
 8000190:	3708      	adds	r7, #8
 8000192:	46bd      	mov	sp, r7
 8000194:	bd80      	pop	{r7, pc}

08000196 <HLED_enSetOFF>:

ErrorState_t HLED_enSetOFF(u8 copyu8_LedPort, u8 copyu8_LedPin)
{
 8000196:	b580      	push	{r7, lr}
 8000198:	b082      	sub	sp, #8
 800019a:	af00      	add	r7, sp, #0
 800019c:	4603      	mov	r3, r0
 800019e:	460a      	mov	r2, r1
 80001a0:	71fb      	strb	r3, [r7, #7]
 80001a2:	4613      	mov	r3, r2
 80001a4:	71bb      	strb	r3, [r7, #6]
#if(HLED_DIR == HLED_DIR_FORWARD)
	MGPIO_enSetPinValue(copyu8_LedPort, copyu8_LedPin, LOW);
 80001a6:	79b9      	ldrb	r1, [r7, #6]
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	2200      	movs	r2, #0
 80001ac:	4618      	mov	r0, r3
 80001ae:	f000 f805 	bl	80001bc <MGPIO_enSetPinValue>
	MGPIO_enSetPinValue(copyu8_LedPort, copyu8_LedPin, HIGH);
#else
#error ("WRONG LED DIRECTION")
#endif

	return SUCCESS;
 80001b2:	2302      	movs	r3, #2
}
 80001b4:	4618      	mov	r0, r3
 80001b6:	3708      	adds	r7, #8
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}

080001bc <MGPIO_enSetPinValue>:
	}
	return local_state;
}

ErrorState_t MGPIO_enSetPinValue(PORT_t copy_u8port, PIN_t copy_u8pin, VALUE_t copy_u8Value)
{
 80001bc:	b480      	push	{r7}
 80001be:	b085      	sub	sp, #20
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	4603      	mov	r3, r0
 80001c4:	71fb      	strb	r3, [r7, #7]
 80001c6:	460b      	mov	r3, r1
 80001c8:	71bb      	strb	r3, [r7, #6]
 80001ca:	4613      	mov	r3, r2
 80001cc:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 80001ce:	2302      	movs	r3, #2
 80001d0:	73fb      	strb	r3, [r7, #15]
	switch(copy_u8port)
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	2b03      	cmp	r3, #3
 80001d6:	d046      	beq.n	8000266 <MGPIO_enSetPinValue+0xaa>
 80001d8:	2b03      	cmp	r3, #3
 80001da:	dc64      	bgt.n	80002a6 <MGPIO_enSetPinValue+0xea>
 80001dc:	2b01      	cmp	r3, #1
 80001de:	d002      	beq.n	80001e6 <MGPIO_enSetPinValue+0x2a>
 80001e0:	2b02      	cmp	r3, #2
 80001e2:	d020      	beq.n	8000226 <MGPIO_enSetPinValue+0x6a>
 80001e4:	e05f      	b.n	80002a6 <MGPIO_enSetPinValue+0xea>
	{
	case PORTA:
		if (copy_u8Value == HIGH)
 80001e6:	797b      	ldrb	r3, [r7, #5]
 80001e8:	2b01      	cmp	r3, #1
 80001ea:	d10a      	bne.n	8000202 <MGPIO_enSetPinValue+0x46>
		{
			SET_BIT(GPIOA->GPIO_ODR, copy_u8pin);
 80001ec:	4b32      	ldr	r3, [pc, #200]	; (80002b8 <MGPIO_enSetPinValue+0xfc>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	79ba      	ldrb	r2, [r7, #6]
 80001f2:	2101      	movs	r1, #1
 80001f4:	fa01 f202 	lsl.w	r2, r1, r2
 80001f8:	4611      	mov	r1, r2
 80001fa:	4a2f      	ldr	r2, [pc, #188]	; (80002b8 <MGPIO_enSetPinValue+0xfc>)
 80001fc:	430b      	orrs	r3, r1
 80001fe:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000200:	e054      	b.n	80002ac <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 8000202:	797b      	ldrb	r3, [r7, #5]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d10b      	bne.n	8000220 <MGPIO_enSetPinValue+0x64>
			CLR_BIT(GPIOA->GPIO_ODR, copy_u8pin);
 8000208:	4b2b      	ldr	r3, [pc, #172]	; (80002b8 <MGPIO_enSetPinValue+0xfc>)
 800020a:	68db      	ldr	r3, [r3, #12]
 800020c:	79ba      	ldrb	r2, [r7, #6]
 800020e:	2101      	movs	r1, #1
 8000210:	fa01 f202 	lsl.w	r2, r1, r2
 8000214:	43d2      	mvns	r2, r2
 8000216:	4611      	mov	r1, r2
 8000218:	4a27      	ldr	r2, [pc, #156]	; (80002b8 <MGPIO_enSetPinValue+0xfc>)
 800021a:	400b      	ands	r3, r1
 800021c:	60d3      	str	r3, [r2, #12]
		break;
 800021e:	e045      	b.n	80002ac <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 8000220:	2300      	movs	r3, #0
 8000222:	73fb      	strb	r3, [r7, #15]
		break;
 8000224:	e042      	b.n	80002ac <MGPIO_enSetPinValue+0xf0>

	case PORTB:
		if (copy_u8Value == HIGH)
 8000226:	797b      	ldrb	r3, [r7, #5]
 8000228:	2b01      	cmp	r3, #1
 800022a:	d10a      	bne.n	8000242 <MGPIO_enSetPinValue+0x86>
		{
			SET_BIT(GPIOB->GPIO_ODR, copy_u8pin);
 800022c:	4b23      	ldr	r3, [pc, #140]	; (80002bc <MGPIO_enSetPinValue+0x100>)
 800022e:	68db      	ldr	r3, [r3, #12]
 8000230:	79ba      	ldrb	r2, [r7, #6]
 8000232:	2101      	movs	r1, #1
 8000234:	fa01 f202 	lsl.w	r2, r1, r2
 8000238:	4611      	mov	r1, r2
 800023a:	4a20      	ldr	r2, [pc, #128]	; (80002bc <MGPIO_enSetPinValue+0x100>)
 800023c:	430b      	orrs	r3, r1
 800023e:	60d3      	str	r3, [r2, #12]
		else
		{
			local_state = OUT_OF_RANG_ERR;

		}
		break;
 8000240:	e034      	b.n	80002ac <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 8000242:	797b      	ldrb	r3, [r7, #5]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d10b      	bne.n	8000260 <MGPIO_enSetPinValue+0xa4>
			CLR_BIT(GPIOB->GPIO_ODR, copy_u8pin);
 8000248:	4b1c      	ldr	r3, [pc, #112]	; (80002bc <MGPIO_enSetPinValue+0x100>)
 800024a:	68db      	ldr	r3, [r3, #12]
 800024c:	79ba      	ldrb	r2, [r7, #6]
 800024e:	2101      	movs	r1, #1
 8000250:	fa01 f202 	lsl.w	r2, r1, r2
 8000254:	43d2      	mvns	r2, r2
 8000256:	4611      	mov	r1, r2
 8000258:	4a18      	ldr	r2, [pc, #96]	; (80002bc <MGPIO_enSetPinValue+0x100>)
 800025a:	400b      	ands	r3, r1
 800025c:	60d3      	str	r3, [r2, #12]
		break;
 800025e:	e025      	b.n	80002ac <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 8000260:	2300      	movs	r3, #0
 8000262:	73fb      	strb	r3, [r7, #15]
		break;
 8000264:	e022      	b.n	80002ac <MGPIO_enSetPinValue+0xf0>

	case PORTC:
		if (copy_u8Value == HIGH)
 8000266:	797b      	ldrb	r3, [r7, #5]
 8000268:	2b01      	cmp	r3, #1
 800026a:	d10a      	bne.n	8000282 <MGPIO_enSetPinValue+0xc6>
		{
			SET_BIT(GPIOC->GPIO_ODR, copy_u8pin);
 800026c:	4b14      	ldr	r3, [pc, #80]	; (80002c0 <MGPIO_enSetPinValue+0x104>)
 800026e:	68db      	ldr	r3, [r3, #12]
 8000270:	79ba      	ldrb	r2, [r7, #6]
 8000272:	2101      	movs	r1, #1
 8000274:	fa01 f202 	lsl.w	r2, r1, r2
 8000278:	4611      	mov	r1, r2
 800027a:	4a11      	ldr	r2, [pc, #68]	; (80002c0 <MGPIO_enSetPinValue+0x104>)
 800027c:	430b      	orrs	r3, r1
 800027e:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000280:	e014      	b.n	80002ac <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 8000282:	797b      	ldrb	r3, [r7, #5]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d10b      	bne.n	80002a0 <MGPIO_enSetPinValue+0xe4>
			CLR_BIT(GPIOC->GPIO_ODR, copy_u8pin);
 8000288:	4b0d      	ldr	r3, [pc, #52]	; (80002c0 <MGPIO_enSetPinValue+0x104>)
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	79ba      	ldrb	r2, [r7, #6]
 800028e:	2101      	movs	r1, #1
 8000290:	fa01 f202 	lsl.w	r2, r1, r2
 8000294:	43d2      	mvns	r2, r2
 8000296:	4611      	mov	r1, r2
 8000298:	4a09      	ldr	r2, [pc, #36]	; (80002c0 <MGPIO_enSetPinValue+0x104>)
 800029a:	400b      	ands	r3, r1
 800029c:	60d3      	str	r3, [r2, #12]
		break;
 800029e:	e005      	b.n	80002ac <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 80002a0:	2300      	movs	r3, #0
 80002a2:	73fb      	strb	r3, [r7, #15]
		break;
 80002a4:	e002      	b.n	80002ac <MGPIO_enSetPinValue+0xf0>

	default:
		local_state = OUT_OF_RANG_ERR;
 80002a6:	2300      	movs	r3, #0
 80002a8:	73fb      	strb	r3, [r7, #15]
		break;
 80002aa:	bf00      	nop
	}
	return local_state;
 80002ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	3714      	adds	r7, #20
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr
 80002b8:	40010800 	.word	0x40010800
 80002bc:	40010c00 	.word	0x40010c00
 80002c0:	40011000 	.word	0x40011000

080002c4 <MGPIO_enSetPortDirection>:

	return local_state;
}

ErrorState_t MGPIO_enSetPortDirection(GPIO_ID_t copy_u8CRID,PORT_t copy_u8port,  MODE_t copy_u8Mode)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	4603      	mov	r3, r0
 80002cc:	71fb      	strb	r3, [r7, #7]
 80002ce:	460b      	mov	r3, r1
 80002d0:	71bb      	strb	r3, [r7, #6]
 80002d2:	4613      	mov	r3, r2
 80002d4:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 80002d6:	2302      	movs	r3, #2
 80002d8:	73fb      	strb	r3, [r7, #15]
	switch(copy_u8port)
 80002da:	79bb      	ldrb	r3, [r7, #6]
 80002dc:	2b03      	cmp	r3, #3
 80002de:	d038      	beq.n	8000352 <MGPIO_enSetPortDirection+0x8e>
 80002e0:	2b03      	cmp	r3, #3
 80002e2:	dc4f      	bgt.n	8000384 <MGPIO_enSetPortDirection+0xc0>
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d002      	beq.n	80002ee <MGPIO_enSetPortDirection+0x2a>
 80002e8:	2b02      	cmp	r3, #2
 80002ea:	d019      	beq.n	8000320 <MGPIO_enSetPortDirection+0x5c>
 80002ec:	e04a      	b.n	8000384 <MGPIO_enSetPortDirection+0xc0>
	{
	case PORTA:
		if(copy_u8CRID == GPIO_CRL_ID)
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d107      	bne.n	8000304 <MGPIO_enSetPortDirection+0x40>
		{
			GPIOA->GPIO_CRL = copy_u8Mode * PORT_OFFSET ;
 80002f4:	797b      	ldrb	r3, [r7, #5]
 80002f6:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 80002fa:	fb02 f203 	mul.w	r2, r2, r3
 80002fe:	4b25      	ldr	r3, [pc, #148]	; (8000394 <MGPIO_enSetPortDirection+0xd0>)
 8000300:	601a      	str	r2, [r3, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000302:	e041      	b.n	8000388 <MGPIO_enSetPortDirection+0xc4>
		else if(copy_u8CRID == GPIO_CRH_ID)
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	2b01      	cmp	r3, #1
 8000308:	d107      	bne.n	800031a <MGPIO_enSetPortDirection+0x56>
			GPIOA->GPIO_CRH = copy_u8Mode * PORT_OFFSET ;
 800030a:	797b      	ldrb	r3, [r7, #5]
 800030c:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8000310:	fb02 f203 	mul.w	r2, r2, r3
 8000314:	4b1f      	ldr	r3, [pc, #124]	; (8000394 <MGPIO_enSetPortDirection+0xd0>)
 8000316:	605a      	str	r2, [r3, #4]
		break;
 8000318:	e036      	b.n	8000388 <MGPIO_enSetPortDirection+0xc4>
			local_state = OUT_OF_RANG_ERR;
 800031a:	2300      	movs	r3, #0
 800031c:	73fb      	strb	r3, [r7, #15]
		break;
 800031e:	e033      	b.n	8000388 <MGPIO_enSetPortDirection+0xc4>


	case PORTB:
		if(copy_u8CRID == GPIO_CRL_ID)
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d107      	bne.n	8000336 <MGPIO_enSetPortDirection+0x72>
		{
			GPIOB->GPIO_CRL = copy_u8Mode * PORT_OFFSET ;
 8000326:	797b      	ldrb	r3, [r7, #5]
 8000328:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800032c:	fb02 f203 	mul.w	r2, r2, r3
 8000330:	4b19      	ldr	r3, [pc, #100]	; (8000398 <MGPIO_enSetPortDirection+0xd4>)
 8000332:	601a      	str	r2, [r3, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000334:	e028      	b.n	8000388 <MGPIO_enSetPortDirection+0xc4>
		else if(copy_u8CRID == GPIO_CRH_ID)
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	2b01      	cmp	r3, #1
 800033a:	d107      	bne.n	800034c <MGPIO_enSetPortDirection+0x88>
			GPIOB->GPIO_CRH = copy_u8Mode * PORT_OFFSET ;
 800033c:	797b      	ldrb	r3, [r7, #5]
 800033e:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8000342:	fb02 f203 	mul.w	r2, r2, r3
 8000346:	4b14      	ldr	r3, [pc, #80]	; (8000398 <MGPIO_enSetPortDirection+0xd4>)
 8000348:	605a      	str	r2, [r3, #4]
		break;
 800034a:	e01d      	b.n	8000388 <MGPIO_enSetPortDirection+0xc4>
			local_state = OUT_OF_RANG_ERR;
 800034c:	2300      	movs	r3, #0
 800034e:	73fb      	strb	r3, [r7, #15]
		break;
 8000350:	e01a      	b.n	8000388 <MGPIO_enSetPortDirection+0xc4>

	case PORTC:
		if(copy_u8CRID == GPIO_CRL_ID)
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d107      	bne.n	8000368 <MGPIO_enSetPortDirection+0xa4>
		{
			GPIOC->GPIO_CRL = copy_u8Mode * PORT_OFFSET ;
 8000358:	797b      	ldrb	r3, [r7, #5]
 800035a:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800035e:	fb02 f203 	mul.w	r2, r2, r3
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <MGPIO_enSetPortDirection+0xd8>)
 8000364:	601a      	str	r2, [r3, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000366:	e00f      	b.n	8000388 <MGPIO_enSetPortDirection+0xc4>
		else if(copy_u8CRID == GPIO_CRH_ID)
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	2b01      	cmp	r3, #1
 800036c:	d107      	bne.n	800037e <MGPIO_enSetPortDirection+0xba>
			GPIOC->GPIO_CRH = copy_u8Mode * PORT_OFFSET ;
 800036e:	797b      	ldrb	r3, [r7, #5]
 8000370:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8000374:	fb02 f203 	mul.w	r2, r2, r3
 8000378:	4b08      	ldr	r3, [pc, #32]	; (800039c <MGPIO_enSetPortDirection+0xd8>)
 800037a:	605a      	str	r2, [r3, #4]
		break;
 800037c:	e004      	b.n	8000388 <MGPIO_enSetPortDirection+0xc4>
			local_state = OUT_OF_RANG_ERR;
 800037e:	2300      	movs	r3, #0
 8000380:	73fb      	strb	r3, [r7, #15]
		break;
 8000382:	e001      	b.n	8000388 <MGPIO_enSetPortDirection+0xc4>

	default:
		local_state = OUT_OF_RANG_ERR;
 8000384:	2300      	movs	r3, #0
 8000386:	73fb      	strb	r3, [r7, #15]
	}

	return local_state;
 8000388:	7bfb      	ldrb	r3, [r7, #15]
}
 800038a:	4618      	mov	r0, r3
 800038c:	3714      	adds	r7, #20
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr
 8000394:	40010800 	.word	0x40010800
 8000398:	40010c00 	.word	0x40010c00
 800039c:	40011000 	.word	0x40011000

080003a0 <MGPIO_enSetPortValue>:

ErrorState_t MGPIO_enSetPortValue(GPIO_ID_t copy_u8CRID, PORT_t copy_u8port, VALUE_t copy_u8Value)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
 80003aa:	460b      	mov	r3, r1
 80003ac:	71bb      	strb	r3, [r7, #6]
 80003ae:	4613      	mov	r3, r2
 80003b0:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 80003b2:	2302      	movs	r3, #2
 80003b4:	73fb      	strb	r3, [r7, #15]

	switch(copy_u8port)
 80003b6:	79bb      	ldrb	r3, [r7, #6]
 80003b8:	2b03      	cmp	r3, #3
 80003ba:	f000 8088 	beq.w	80004ce <MGPIO_enSetPortValue+0x12e>
 80003be:	2b03      	cmp	r3, #3
 80003c0:	f300 80c5 	bgt.w	800054e <MGPIO_enSetPortValue+0x1ae>
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d002      	beq.n	80003ce <MGPIO_enSetPortValue+0x2e>
 80003c8:	2b02      	cmp	r3, #2
 80003ca:	d040      	beq.n	800044e <MGPIO_enSetPortValue+0xae>
 80003cc:	e0bf      	b.n	800054e <MGPIO_enSetPortValue+0x1ae>
	{
	case PORTA:
		if ((copy_u8Value == HIGH) && (copy_u8CRID == GPIO_CRL_ID))
 80003ce:	797b      	ldrb	r3, [r7, #5]
 80003d0:	2b01      	cmp	r3, #1
 80003d2:	d109      	bne.n	80003e8 <MGPIO_enSetPortValue+0x48>
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d106      	bne.n	80003e8 <MGPIO_enSetPortValue+0x48>
		{
			GPIOA->GPIO_ODR |= PORT_LVALUE;
 80003da:	4b61      	ldr	r3, [pc, #388]	; (8000560 <MGPIO_enSetPortValue+0x1c0>)
 80003dc:	68db      	ldr	r3, [r3, #12]
 80003de:	4a60      	ldr	r2, [pc, #384]	; (8000560 <MGPIO_enSetPortValue+0x1c0>)
 80003e0:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80003e4:	60d3      	str	r3, [r2, #12]
 80003e6:	e031      	b.n	800044c <MGPIO_enSetPortValue+0xac>
		}
		else if ((copy_u8Value == HIGH) && (copy_u8CRID == GPIO_CRH_ID))
 80003e8:	797b      	ldrb	r3, [r7, #5]
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d109      	bne.n	8000402 <MGPIO_enSetPortValue+0x62>
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d106      	bne.n	8000402 <MGPIO_enSetPortValue+0x62>
		{
			GPIOA->GPIO_ODR |= PORT_HVALUE;
 80003f4:	4b5a      	ldr	r3, [pc, #360]	; (8000560 <MGPIO_enSetPortValue+0x1c0>)
 80003f6:	68db      	ldr	r3, [r3, #12]
 80003f8:	4a59      	ldr	r2, [pc, #356]	; (8000560 <MGPIO_enSetPortValue+0x1c0>)
 80003fa:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80003fe:	60d3      	str	r3, [r2, #12]
 8000400:	e024      	b.n	800044c <MGPIO_enSetPortValue+0xac>
		}
		else if ((copy_u8Value == LOW) && (copy_u8CRID == GPIO_CRL_ID))
 8000402:	797b      	ldrb	r3, [r7, #5]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d10d      	bne.n	8000424 <MGPIO_enSetPortValue+0x84>
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d10a      	bne.n	8000424 <MGPIO_enSetPortValue+0x84>
		{
			GPIOA->GPIO_ODR &= ~(PORT_LVALUE);
 800040e:	4b54      	ldr	r3, [pc, #336]	; (8000560 <MGPIO_enSetPortValue+0x1c0>)
 8000410:	68db      	ldr	r3, [r3, #12]
 8000412:	4a53      	ldr	r2, [pc, #332]	; (8000560 <MGPIO_enSetPortValue+0x1c0>)
 8000414:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000418:	60d3      	str	r3, [r2, #12]
			GPIOA->GPIO_ODR |= PORT_RESET;
 800041a:	4b51      	ldr	r3, [pc, #324]	; (8000560 <MGPIO_enSetPortValue+0x1c0>)
 800041c:	4a50      	ldr	r2, [pc, #320]	; (8000560 <MGPIO_enSetPortValue+0x1c0>)
 800041e:	68db      	ldr	r3, [r3, #12]
 8000420:	60d3      	str	r3, [r2, #12]
 8000422:	e013      	b.n	800044c <MGPIO_enSetPortValue+0xac>
		}
		else if ((copy_u8Value == LOW) && (copy_u8CRID == GPIO_CRH_ID))
 8000424:	797b      	ldrb	r3, [r7, #5]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d10d      	bne.n	8000446 <MGPIO_enSetPortValue+0xa6>
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	2b01      	cmp	r3, #1
 800042e:	d10a      	bne.n	8000446 <MGPIO_enSetPortValue+0xa6>
		{
			GPIOA->GPIO_ODR &= ~(PORT_HVALUE);
 8000430:	4b4b      	ldr	r3, [pc, #300]	; (8000560 <MGPIO_enSetPortValue+0x1c0>)
 8000432:	68db      	ldr	r3, [r3, #12]
 8000434:	4a4a      	ldr	r2, [pc, #296]	; (8000560 <MGPIO_enSetPortValue+0x1c0>)
 8000436:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800043a:	60d3      	str	r3, [r2, #12]
			GPIOA->GPIO_ODR |= PORT_RESET;
 800043c:	4b48      	ldr	r3, [pc, #288]	; (8000560 <MGPIO_enSetPortValue+0x1c0>)
 800043e:	4a48      	ldr	r2, [pc, #288]	; (8000560 <MGPIO_enSetPortValue+0x1c0>)
 8000440:	68db      	ldr	r3, [r3, #12]
 8000442:	60d3      	str	r3, [r2, #12]
 8000444:	e002      	b.n	800044c <MGPIO_enSetPortValue+0xac>
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
 8000446:	2300      	movs	r3, #0
 8000448:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800044a:	e083      	b.n	8000554 <MGPIO_enSetPortValue+0x1b4>
 800044c:	e082      	b.n	8000554 <MGPIO_enSetPortValue+0x1b4>

	case PORTB:
		if ((copy_u8Value == HIGH) && (copy_u8CRID == GPIO_CRL_ID))
 800044e:	797b      	ldrb	r3, [r7, #5]
 8000450:	2b01      	cmp	r3, #1
 8000452:	d109      	bne.n	8000468 <MGPIO_enSetPortValue+0xc8>
 8000454:	79fb      	ldrb	r3, [r7, #7]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d106      	bne.n	8000468 <MGPIO_enSetPortValue+0xc8>
		{
			GPIOB->GPIO_ODR |= PORT_LVALUE;
 800045a:	4b42      	ldr	r3, [pc, #264]	; (8000564 <MGPIO_enSetPortValue+0x1c4>)
 800045c:	68db      	ldr	r3, [r3, #12]
 800045e:	4a41      	ldr	r2, [pc, #260]	; (8000564 <MGPIO_enSetPortValue+0x1c4>)
 8000460:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000464:	60d3      	str	r3, [r2, #12]
 8000466:	e031      	b.n	80004cc <MGPIO_enSetPortValue+0x12c>
		}
		else if ((copy_u8Value == HIGH) && (copy_u8CRID == GPIO_CRH_ID))
 8000468:	797b      	ldrb	r3, [r7, #5]
 800046a:	2b01      	cmp	r3, #1
 800046c:	d109      	bne.n	8000482 <MGPIO_enSetPortValue+0xe2>
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	2b01      	cmp	r3, #1
 8000472:	d106      	bne.n	8000482 <MGPIO_enSetPortValue+0xe2>
		{
			GPIOB->GPIO_ODR |= PORT_HVALUE;
 8000474:	4b3b      	ldr	r3, [pc, #236]	; (8000564 <MGPIO_enSetPortValue+0x1c4>)
 8000476:	68db      	ldr	r3, [r3, #12]
 8000478:	4a3a      	ldr	r2, [pc, #232]	; (8000564 <MGPIO_enSetPortValue+0x1c4>)
 800047a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 800047e:	60d3      	str	r3, [r2, #12]
 8000480:	e024      	b.n	80004cc <MGPIO_enSetPortValue+0x12c>
		}
		else if ((copy_u8Value == LOW) && (copy_u8CRID == GPIO_CRL_ID))
 8000482:	797b      	ldrb	r3, [r7, #5]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d10d      	bne.n	80004a4 <MGPIO_enSetPortValue+0x104>
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d10a      	bne.n	80004a4 <MGPIO_enSetPortValue+0x104>
		{
			GPIOB->GPIO_ODR &= ~(PORT_LVALUE);
 800048e:	4b35      	ldr	r3, [pc, #212]	; (8000564 <MGPIO_enSetPortValue+0x1c4>)
 8000490:	68db      	ldr	r3, [r3, #12]
 8000492:	4a34      	ldr	r2, [pc, #208]	; (8000564 <MGPIO_enSetPortValue+0x1c4>)
 8000494:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000498:	60d3      	str	r3, [r2, #12]
			GPIOB->GPIO_ODR |= PORT_RESET;
 800049a:	4b32      	ldr	r3, [pc, #200]	; (8000564 <MGPIO_enSetPortValue+0x1c4>)
 800049c:	4a31      	ldr	r2, [pc, #196]	; (8000564 <MGPIO_enSetPortValue+0x1c4>)
 800049e:	68db      	ldr	r3, [r3, #12]
 80004a0:	60d3      	str	r3, [r2, #12]
 80004a2:	e013      	b.n	80004cc <MGPIO_enSetPortValue+0x12c>
		}
		else if ((copy_u8Value == LOW) && (copy_u8CRID == GPIO_CRH_ID))
 80004a4:	797b      	ldrb	r3, [r7, #5]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d10d      	bne.n	80004c6 <MGPIO_enSetPortValue+0x126>
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d10a      	bne.n	80004c6 <MGPIO_enSetPortValue+0x126>
		{
			GPIOB->GPIO_ODR &= ~(PORT_HVALUE);
 80004b0:	4b2c      	ldr	r3, [pc, #176]	; (8000564 <MGPIO_enSetPortValue+0x1c4>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	4a2b      	ldr	r2, [pc, #172]	; (8000564 <MGPIO_enSetPortValue+0x1c4>)
 80004b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80004ba:	60d3      	str	r3, [r2, #12]
			GPIOB->GPIO_ODR |= PORT_RESET;
 80004bc:	4b29      	ldr	r3, [pc, #164]	; (8000564 <MGPIO_enSetPortValue+0x1c4>)
 80004be:	4a29      	ldr	r2, [pc, #164]	; (8000564 <MGPIO_enSetPortValue+0x1c4>)
 80004c0:	68db      	ldr	r3, [r3, #12]
 80004c2:	60d3      	str	r3, [r2, #12]
 80004c4:	e002      	b.n	80004cc <MGPIO_enSetPortValue+0x12c>
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
 80004c6:	2300      	movs	r3, #0
 80004c8:	73fb      	strb	r3, [r7, #15]
		}
		break;
 80004ca:	e043      	b.n	8000554 <MGPIO_enSetPortValue+0x1b4>
 80004cc:	e042      	b.n	8000554 <MGPIO_enSetPortValue+0x1b4>

	case PORTC:
		if ((copy_u8Value == HIGH) && (copy_u8CRID == GPIO_CRL_ID))
 80004ce:	797b      	ldrb	r3, [r7, #5]
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d109      	bne.n	80004e8 <MGPIO_enSetPortValue+0x148>
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d106      	bne.n	80004e8 <MGPIO_enSetPortValue+0x148>
		{
			GPIOC->GPIO_ODR |= PORT_LVALUE;
 80004da:	4b23      	ldr	r3, [pc, #140]	; (8000568 <MGPIO_enSetPortValue+0x1c8>)
 80004dc:	68db      	ldr	r3, [r3, #12]
 80004de:	4a22      	ldr	r2, [pc, #136]	; (8000568 <MGPIO_enSetPortValue+0x1c8>)
 80004e0:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80004e4:	60d3      	str	r3, [r2, #12]
 80004e6:	e031      	b.n	800054c <MGPIO_enSetPortValue+0x1ac>
		}
		else if ((copy_u8Value == HIGH) && (copy_u8CRID == GPIO_CRH_ID))
 80004e8:	797b      	ldrb	r3, [r7, #5]
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	d109      	bne.n	8000502 <MGPIO_enSetPortValue+0x162>
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d106      	bne.n	8000502 <MGPIO_enSetPortValue+0x162>
		{
			GPIOC->GPIO_ODR |= PORT_HVALUE;
 80004f4:	4b1c      	ldr	r3, [pc, #112]	; (8000568 <MGPIO_enSetPortValue+0x1c8>)
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	4a1b      	ldr	r2, [pc, #108]	; (8000568 <MGPIO_enSetPortValue+0x1c8>)
 80004fa:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80004fe:	60d3      	str	r3, [r2, #12]
 8000500:	e024      	b.n	800054c <MGPIO_enSetPortValue+0x1ac>
		}
		else if ((copy_u8Value == LOW) && (copy_u8CRID == GPIO_CRL_ID))
 8000502:	797b      	ldrb	r3, [r7, #5]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d10d      	bne.n	8000524 <MGPIO_enSetPortValue+0x184>
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d10a      	bne.n	8000524 <MGPIO_enSetPortValue+0x184>
		{
			GPIOC->GPIO_ODR &= ~(PORT_LVALUE);
 800050e:	4b16      	ldr	r3, [pc, #88]	; (8000568 <MGPIO_enSetPortValue+0x1c8>)
 8000510:	68db      	ldr	r3, [r3, #12]
 8000512:	4a15      	ldr	r2, [pc, #84]	; (8000568 <MGPIO_enSetPortValue+0x1c8>)
 8000514:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000518:	60d3      	str	r3, [r2, #12]
			GPIOC->GPIO_ODR |= PORT_RESET;
 800051a:	4b13      	ldr	r3, [pc, #76]	; (8000568 <MGPIO_enSetPortValue+0x1c8>)
 800051c:	4a12      	ldr	r2, [pc, #72]	; (8000568 <MGPIO_enSetPortValue+0x1c8>)
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	60d3      	str	r3, [r2, #12]
 8000522:	e013      	b.n	800054c <MGPIO_enSetPortValue+0x1ac>
		}
		else if ((copy_u8Value == LOW) && (copy_u8CRID == GPIO_CRH_ID))
 8000524:	797b      	ldrb	r3, [r7, #5]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d10d      	bne.n	8000546 <MGPIO_enSetPortValue+0x1a6>
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d10a      	bne.n	8000546 <MGPIO_enSetPortValue+0x1a6>
		{
			GPIOC->GPIO_ODR &= ~(PORT_HVALUE);
 8000530:	4b0d      	ldr	r3, [pc, #52]	; (8000568 <MGPIO_enSetPortValue+0x1c8>)
 8000532:	68db      	ldr	r3, [r3, #12]
 8000534:	4a0c      	ldr	r2, [pc, #48]	; (8000568 <MGPIO_enSetPortValue+0x1c8>)
 8000536:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800053a:	60d3      	str	r3, [r2, #12]
			GPIOC->GPIO_ODR |= PORT_RESET;
 800053c:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <MGPIO_enSetPortValue+0x1c8>)
 800053e:	4a0a      	ldr	r2, [pc, #40]	; (8000568 <MGPIO_enSetPortValue+0x1c8>)
 8000540:	68db      	ldr	r3, [r3, #12]
 8000542:	60d3      	str	r3, [r2, #12]
 8000544:	e002      	b.n	800054c <MGPIO_enSetPortValue+0x1ac>
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
 8000546:	2300      	movs	r3, #0
 8000548:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800054a:	e003      	b.n	8000554 <MGPIO_enSetPortValue+0x1b4>
 800054c:	e002      	b.n	8000554 <MGPIO_enSetPortValue+0x1b4>

	default:
		local_state = OUT_OF_RANG_ERR;
 800054e:	2300      	movs	r3, #0
 8000550:	73fb      	strb	r3, [r7, #15]
		break;
 8000552:	bf00      	nop

	}
	return local_state;
 8000554:	7bfb      	ldrb	r3, [r7, #15]
}
 8000556:	4618      	mov	r0, r3
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr
 8000560:	40010800 	.word	0x40010800
 8000564:	40010c00 	.word	0x40010c00
 8000568:	40011000 	.word	0x40011000

0800056c <MRCC_enSysClkINIT>:
#include "MRCC_int.h"
#include "MRCC_config.h"
#include "MRCC_priv.h"

ErrorState_t MRCC_enSysClkINIT(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0


	/** CLK source is HSI **/
#elif(RCC_CLK_TYPE == RCC_HSI)
	/* 1. ENABLE the HSI */
	SET_BIT(RCC->RCC_CR, HSION);
 8000570:	4b1b      	ldr	r3, [pc, #108]	; (80005e0 <MRCC_enSysClkINIT+0x74>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a1a      	ldr	r2, [pc, #104]	; (80005e0 <MRCC_enSysClkINIT+0x74>)
 8000576:	f043 0301 	orr.w	r3, r3, #1
 800057a:	6013      	str	r3, [r2, #0]

	/* 2. wait till HSE is READY 'settling time finished', stable */
	while (!(GET_BIT(RCC->RCC_CR, HSIRDY)));
 800057c:	bf00      	nop
 800057e:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <MRCC_enSysClkINIT+0x74>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	085b      	lsrs	r3, r3, #1
 8000584:	f003 0301 	and.w	r3, r3, #1
 8000588:	2b00      	cmp	r3, #0
 800058a:	d0f8      	beq.n	800057e <MRCC_enSysClkINIT+0x12>

	/* 3. Enable System switch clock with HSI */
	CLR_BIT(RCC->RCC_CFGR, SWC);
 800058c:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <MRCC_enSysClkINIT+0x74>)
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	4a13      	ldr	r2, [pc, #76]	; (80005e0 <MRCC_enSysClkINIT+0x74>)
 8000592:	f023 0301 	bic.w	r3, r3, #1
 8000596:	6053      	str	r3, [r2, #4]

#else
#error("WRONG CLK TYPE");
#endif
	/* MASK the AHB and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= RCC_AHB_MASK;
 8000598:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <MRCC_enSysClkINIT+0x74>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	4a10      	ldr	r2, [pc, #64]	; (80005e0 <MRCC_enSysClkINIT+0x74>)
 800059e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80005a2:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= RCC_AHB_PRESCALER;
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <MRCC_enSysClkINIT+0x74>)
 80005a6:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <MRCC_enSysClkINIT+0x74>)
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	6053      	str	r3, [r2, #4]

	/* MASK the APB1 and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= RCC_APB1_MASK;
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <MRCC_enSysClkINIT+0x74>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <MRCC_enSysClkINIT+0x74>)
 80005b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005b6:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= RCC_APB1_PRESCALER_MODE;
 80005b8:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <MRCC_enSysClkINIT+0x74>)
 80005ba:	4a09      	ldr	r2, [pc, #36]	; (80005e0 <MRCC_enSysClkINIT+0x74>)
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	6053      	str	r3, [r2, #4]

	/* MASK the APB2 and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= RCC_APB2_MASK;
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <MRCC_enSysClkINIT+0x74>)
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <MRCC_enSysClkINIT+0x74>)
 80005c6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80005ca:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= RCC_APB2_PRESCALER_MODE;
 80005cc:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <MRCC_enSysClkINIT+0x74>)
 80005ce:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <MRCC_enSysClkINIT+0x74>)
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	6053      	str	r3, [r2, #4]
		RCC->RCC_CFGR &= RCC_MCO_MASK;
		RCC->RCC_CFGR |= RCC_MCO_MODE ;
	}
#endif

	return SUCCESS;
 80005d4:	2302      	movs	r3, #2
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	40021000 	.word	0x40021000

080005e4 <MRCC_enEnablePeripheralCLK>:

ErrorState_t MRCC_enEnablePeripheralCLK(peripheral_ID copy_u8Peripheral)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
	ErrorState_t local_state = SUCCESS;
 80005ee:	2302      	movs	r3, #2
 80005f0:	73fb      	strb	r3, [r7, #15]

	/* based on predefined Peripheral, switch to corresponding Register, and Enabled it*/
	if (copy_u8Peripheral <= 31)
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	2b1f      	cmp	r3, #31
 80005f6:	d80a      	bhi.n	800060e <MRCC_enEnablePeripheralCLK+0x2a>
		SET_BIT(RCC->RCC_AHBENR, copy_u8Peripheral);
 80005f8:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <MRCC_enEnablePeripheralCLK+0x80>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	79fa      	ldrb	r2, [r7, #7]
 80005fe:	2101      	movs	r1, #1
 8000600:	fa01 f202 	lsl.w	r2, r1, r2
 8000604:	4611      	mov	r1, r2
 8000606:	4a17      	ldr	r2, [pc, #92]	; (8000664 <MRCC_enEnablePeripheralCLK+0x80>)
 8000608:	430b      	orrs	r3, r1
 800060a:	6153      	str	r3, [r2, #20]
 800060c:	e023      	b.n	8000656 <MRCC_enEnablePeripheralCLK+0x72>

	else if (copy_u8Peripheral <= 63)
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	2b3f      	cmp	r3, #63	; 0x3f
 8000612:	d80d      	bhi.n	8000630 <MRCC_enEnablePeripheralCLK+0x4c>
	{
		copy_u8Peripheral -= 32;
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	3b20      	subs	r3, #32
 8000618:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->RCC_APB1ENR, copy_u8Peripheral);
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <MRCC_enEnablePeripheralCLK+0x80>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	79fa      	ldrb	r2, [r7, #7]
 8000620:	2101      	movs	r1, #1
 8000622:	fa01 f202 	lsl.w	r2, r1, r2
 8000626:	4611      	mov	r1, r2
 8000628:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <MRCC_enEnablePeripheralCLK+0x80>)
 800062a:	430b      	orrs	r3, r1
 800062c:	61d3      	str	r3, [r2, #28]
 800062e:	e012      	b.n	8000656 <MRCC_enEnablePeripheralCLK+0x72>
	}

	else if (copy_u8Peripheral <= 95)
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	2b5f      	cmp	r3, #95	; 0x5f
 8000634:	d80d      	bhi.n	8000652 <MRCC_enEnablePeripheralCLK+0x6e>
	{
		copy_u8Peripheral -= 64;
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	3b40      	subs	r3, #64	; 0x40
 800063a:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->RCC_APB2ENR, copy_u8Peripheral);
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MRCC_enEnablePeripheralCLK+0x80>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	79fa      	ldrb	r2, [r7, #7]
 8000642:	2101      	movs	r1, #1
 8000644:	fa01 f202 	lsl.w	r2, r1, r2
 8000648:	4611      	mov	r1, r2
 800064a:	4a06      	ldr	r2, [pc, #24]	; (8000664 <MRCC_enEnablePeripheralCLK+0x80>)
 800064c:	430b      	orrs	r3, r1
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	e001      	b.n	8000656 <MRCC_enEnablePeripheralCLK+0x72>
	}

	else
	{
		local_state = OUT_OF_RANG_ERR;
 8000652:	2300      	movs	r3, #0
 8000654:	73fb      	strb	r3, [r7, #15]
	}
	return local_state;
 8000656:	7bfb      	ldrb	r3, [r7, #15]
}
 8000658:	4618      	mov	r0, r3
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40021000 	.word	0x40021000

08000668 <MSTK_enInit>:

void (*STK_Callback)(void) = NULL;
static u8 flag = 0;

ErrorState_t MSTK_enInit(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0

#if (STK_PRESCALER == STK_AHB_PRESCALER)
	SET_BIT(STK->STK_CTRL, CLKSOURCE);

#elif(STK_PRESCALER == STK_AHB_DIV8_PRESCALER)
	CLR_BIT(STK->STK_CTRL, CLKSOURCE);
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <MSTK_enInit+0x1c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a04      	ldr	r2, [pc, #16]	; (8000684 <MSTK_enInit+0x1c>)
 8000672:	f023 0304 	bic.w	r3, r3, #4
 8000676:	6013      	str	r3, [r2, #0]

#else
#error ("YOU SELECTED THE WRONG PRESCALER");
#endif

	return SUCCESS;
 8000678:	2302      	movs	r3, #2
}
 800067a:	4618      	mov	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000e010 	.word	0xe000e010

08000688 <MSTK_enDelayMS>:

ErrorState_t MSTK_enDelayMS(u16 copy_u16delayMS)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	80fb      	strh	r3, [r7, #6]

	STK->STK_LOAD = copy_u16delayMS  * 1000;
 8000692:	88fb      	ldrh	r3, [r7, #6]
 8000694:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000698:	fb02 f203 	mul.w	r2, r2, r3
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MSTK_enDelayMS+0x54>)
 800069e:	605a      	str	r2, [r3, #4]
	SET_BIT(STK->STK_CTRL, ENABLE);
 80006a0:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MSTK_enDelayMS+0x54>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a0d      	ldr	r2, [pc, #52]	; (80006dc <MSTK_enDelayMS+0x54>)
 80006a6:	f043 0301 	orr.w	r3, r3, #1
 80006aa:	6013      	str	r3, [r2, #0]

	while (!(GET_BIT(STK->STK_CTRL, COUNTFLAG)));
 80006ac:	bf00      	nop
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MSTK_enDelayMS+0x54>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	0c1b      	lsrs	r3, r3, #16
 80006b4:	f003 0301 	and.w	r3, r3, #1
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d0f8      	beq.n	80006ae <MSTK_enDelayMS+0x26>

	CLR_BIT(STK->STK_CTRL, ENABLE);
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <MSTK_enDelayMS+0x54>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a06      	ldr	r2, [pc, #24]	; (80006dc <MSTK_enDelayMS+0x54>)
 80006c2:	f023 0301 	bic.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]
	STK->STK_VAL = 0;
 80006c8:	4b04      	ldr	r3, [pc, #16]	; (80006dc <MSTK_enDelayMS+0x54>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]

	return SUCCESS;
 80006ce:	2302      	movs	r3, #2

}
 80006d0:	4618      	mov	r0, r3
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000e010 	.word	0xe000e010

080006e0 <SysTick_Handler>:
}



void SysTick_Handler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
	volatile u8 local_temp = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	71fb      	strb	r3, [r7, #7]
	if (flag == 1)
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <SysTick_Handler+0x58>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d10e      	bne.n	8000710 <SysTick_Handler+0x30>
	{
		CLR_BIT(STK->STK_CTRL, TICKINT);
 80006f2:	4b12      	ldr	r3, [pc, #72]	; (800073c <SysTick_Handler+0x5c>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a11      	ldr	r2, [pc, #68]	; (800073c <SysTick_Handler+0x5c>)
 80006f8:	f023 0302 	bic.w	r3, r3, #2
 80006fc:	6013      	str	r3, [r2, #0]
		CLR_BIT(STK->STK_CTRL, ENABLE);
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <SysTick_Handler+0x5c>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a0e      	ldr	r2, [pc, #56]	; (800073c <SysTick_Handler+0x5c>)
 8000704:	f023 0301 	bic.w	r3, r3, #1
 8000708:	6013      	str	r3, [r2, #0]
		STK->STK_VAL = 0;
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <SysTick_Handler+0x5c>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
	}

	if (STK_Callback != NULL)
 8000710:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <SysTick_Handler+0x60>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d002      	beq.n	800071e <SysTick_Handler+0x3e>
	{
		STK_Callback();
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <SysTick_Handler+0x60>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4798      	blx	r3
	}

	local_temp = GET_BIT(STK->STK_CTRL,COUNTFLAG);
 800071e:	4b07      	ldr	r3, [pc, #28]	; (800073c <SysTick_Handler+0x5c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	0c1b      	lsrs	r3, r3, #16
 8000724:	b2db      	uxtb	r3, r3
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	b2db      	uxtb	r3, r3
 800072c:	71fb      	strb	r3, [r7, #7]
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000020 	.word	0x20000020
 800073c:	e000e010 	.word	0xe000e010
 8000740:	2000001c 	.word	0x2000001c

08000744 <main>:
#include "HLED_int.h"



int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
	MRCC_enSysClkINIT();
 800074a:	f7ff ff0f 	bl	800056c <MRCC_enSysClkINIT>
	MRCC_enEnablePeripheralCLK(IOPA);
 800074e:	2042      	movs	r0, #66	; 0x42
 8000750:	f7ff ff48 	bl	80005e4 <MRCC_enEnablePeripheralCLK>
	MGPIO_enSetPortDirection(GPIO_CRL_ID, PORTA, OUT_2MHZ_PP);
 8000754:	2202      	movs	r2, #2
 8000756:	2101      	movs	r1, #1
 8000758:	2000      	movs	r0, #0
 800075a:	f7ff fdb3 	bl	80002c4 <MGPIO_enSetPortDirection>
	MSTK_enInit();
 800075e:	f7ff ff83 	bl	8000668 <MSTK_enInit>


	while (1)
	{
		for (u8 i = 0; i < 4; i++)
 8000762:	2300      	movs	r3, #0
 8000764:	73fb      	strb	r3, [r7, #15]
 8000766:	e036      	b.n	80007d6 <main+0x92>
		{
			for (int j = 0; j < 8; j++)
 8000768:	2300      	movs	r3, #0
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	e02d      	b.n	80007ca <main+0x86>
			{
				HLED_enSetON(PORTA, j);
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	b2db      	uxtb	r3, r3
 8000772:	4619      	mov	r1, r3
 8000774:	2001      	movs	r0, #1
 8000776:	f7ff fcfb 	bl	8000170 <HLED_enSetON>
				MSTK_enDelayMS(200);
 800077a:	20c8      	movs	r0, #200	; 0xc8
 800077c:	f7ff ff84 	bl	8000688 <MSTK_enDelayMS>
				HLED_enSetOFF(PORTA, j);
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	4619      	mov	r1, r3
 8000786:	2001      	movs	r0, #1
 8000788:	f7ff fd05 	bl	8000196 <HLED_enSetOFF>
				if (j == 7)
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	2b07      	cmp	r3, #7
 8000790:	d118      	bne.n	80007c4 <main+0x80>
				{
					for (int k = j-1; k >= 0; k--)
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	3b01      	subs	r3, #1
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	e011      	b.n	80007be <main+0x7a>
					{
						HLED_enSetON(PORTA, k);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	b2db      	uxtb	r3, r3
 800079e:	4619      	mov	r1, r3
 80007a0:	2001      	movs	r0, #1
 80007a2:	f7ff fce5 	bl	8000170 <HLED_enSetON>
						MSTK_enDelayMS(200);
 80007a6:	20c8      	movs	r0, #200	; 0xc8
 80007a8:	f7ff ff6e 	bl	8000688 <MSTK_enDelayMS>
						HLED_enSetOFF(PORTA, k);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	4619      	mov	r1, r3
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff fcef 	bl	8000196 <HLED_enSetOFF>
					for (int k = j-1; k >= 0; k--)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3b01      	subs	r3, #1
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	daea      	bge.n	800079a <main+0x56>
			for (int j = 0; j < 8; j++)
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	3301      	adds	r3, #1
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	2b07      	cmp	r3, #7
 80007ce:	ddce      	ble.n	800076e <main+0x2a>
		for (u8 i = 0; i < 4; i++)
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	3301      	adds	r3, #1
 80007d4:	73fb      	strb	r3, [r7, #15]
 80007d6:	7bfb      	ldrb	r3, [r7, #15]
 80007d8:	2b03      	cmp	r3, #3
 80007da:	d9c5      	bls.n	8000768 <main+0x24>
				}

			}
		}

		for (u8 k = 0; k < 4; k++)
 80007dc:	2300      	movs	r3, #0
 80007de:	70fb      	strb	r3, [r7, #3]
 80007e0:	e039      	b.n	8000856 <main+0x112>
		{
			for (u8 i = 0; i < 4; i++)
 80007e2:	2300      	movs	r3, #0
 80007e4:	70bb      	strb	r3, [r7, #2]
 80007e6:	e030      	b.n	800084a <main+0x106>
			{
				HLED_enSetON(PORTA, PIN3 - i);
 80007e8:	78bb      	ldrb	r3, [r7, #2]
 80007ea:	f1c3 0303 	rsb	r3, r3, #3
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	4619      	mov	r1, r3
 80007f2:	2001      	movs	r0, #1
 80007f4:	f7ff fcbc 	bl	8000170 <HLED_enSetON>
				HLED_enSetON(PORTA, PIN4 + i);
 80007f8:	78bb      	ldrb	r3, [r7, #2]
 80007fa:	3304      	adds	r3, #4
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	4619      	mov	r1, r3
 8000800:	2001      	movs	r0, #1
 8000802:	f7ff fcb5 	bl	8000170 <HLED_enSetON>
				MSTK_enDelayMS(200);
 8000806:	20c8      	movs	r0, #200	; 0xc8
 8000808:	f7ff ff3e 	bl	8000688 <MSTK_enDelayMS>
				if(i == 3)
 800080c:	78bb      	ldrb	r3, [r7, #2]
 800080e:	2b03      	cmp	r3, #3
 8000810:	d118      	bne.n	8000844 <main+0x100>
				{
					for (u8 j = 0; j < 4; j++)
 8000812:	2300      	movs	r3, #0
 8000814:	707b      	strb	r3, [r7, #1]
 8000816:	e012      	b.n	800083e <main+0xfa>
					{
						HLED_enSetOFF(PORTA, PIN7 - j);
 8000818:	787b      	ldrb	r3, [r7, #1]
 800081a:	f1c3 0307 	rsb	r3, r3, #7
 800081e:	b2db      	uxtb	r3, r3
 8000820:	4619      	mov	r1, r3
 8000822:	2001      	movs	r0, #1
 8000824:	f7ff fcb7 	bl	8000196 <HLED_enSetOFF>
						HLED_enSetOFF(PORTA, PIN0 + j);
 8000828:	787b      	ldrb	r3, [r7, #1]
 800082a:	4619      	mov	r1, r3
 800082c:	2001      	movs	r0, #1
 800082e:	f7ff fcb2 	bl	8000196 <HLED_enSetOFF>
						MSTK_enDelayMS(200);
 8000832:	20c8      	movs	r0, #200	; 0xc8
 8000834:	f7ff ff28 	bl	8000688 <MSTK_enDelayMS>
					for (u8 j = 0; j < 4; j++)
 8000838:	787b      	ldrb	r3, [r7, #1]
 800083a:	3301      	adds	r3, #1
 800083c:	707b      	strb	r3, [r7, #1]
 800083e:	787b      	ldrb	r3, [r7, #1]
 8000840:	2b03      	cmp	r3, #3
 8000842:	d9e9      	bls.n	8000818 <main+0xd4>
			for (u8 i = 0; i < 4; i++)
 8000844:	78bb      	ldrb	r3, [r7, #2]
 8000846:	3301      	adds	r3, #1
 8000848:	70bb      	strb	r3, [r7, #2]
 800084a:	78bb      	ldrb	r3, [r7, #2]
 800084c:	2b03      	cmp	r3, #3
 800084e:	d9cb      	bls.n	80007e8 <main+0xa4>
		for (u8 k = 0; k < 4; k++)
 8000850:	78fb      	ldrb	r3, [r7, #3]
 8000852:	3301      	adds	r3, #1
 8000854:	70fb      	strb	r3, [r7, #3]
 8000856:	78fb      	ldrb	r3, [r7, #3]
 8000858:	2b03      	cmp	r3, #3
 800085a:	d9c2      	bls.n	80007e2 <main+0x9e>
					}
				}
			}
		}

		for (u8 i = 0; i<8; i++)
 800085c:	2300      	movs	r3, #0
 800085e:	703b      	strb	r3, [r7, #0]
 8000860:	e014      	b.n	800088c <main+0x148>
		{
			MGPIO_enSetPortValue(GPIO_CRL_ID, PORTA, HIGH);
 8000862:	2201      	movs	r2, #1
 8000864:	2101      	movs	r1, #1
 8000866:	2000      	movs	r0, #0
 8000868:	f7ff fd9a 	bl	80003a0 <MGPIO_enSetPortValue>
			MSTK_enDelayMS(500);
 800086c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000870:	f7ff ff0a 	bl	8000688 <MSTK_enDelayMS>
			MGPIO_enSetPortValue(GPIO_CRL_ID, PORTA, LOW);
 8000874:	2200      	movs	r2, #0
 8000876:	2101      	movs	r1, #1
 8000878:	2000      	movs	r0, #0
 800087a:	f7ff fd91 	bl	80003a0 <MGPIO_enSetPortValue>
			MSTK_enDelayMS(500);
 800087e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000882:	f7ff ff01 	bl	8000688 <MSTK_enDelayMS>
		for (u8 i = 0; i<8; i++)
 8000886:	783b      	ldrb	r3, [r7, #0]
 8000888:	3301      	adds	r3, #1
 800088a:	703b      	strb	r3, [r7, #0]
 800088c:	783b      	ldrb	r3, [r7, #0]
 800088e:	2b07      	cmp	r3, #7
 8000890:	d9e7      	bls.n	8000862 <main+0x11e>
		for (u8 i = 0; i < 4; i++)
 8000892:	e766      	b.n	8000762 <main+0x1e>

08000894 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000894:	480d      	ldr	r0, [pc, #52]	; (80008cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000896:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000898:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800089e:	490d      	ldr	r1, [pc, #52]	; (80008d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008a0:	4a0d      	ldr	r2, [pc, #52]	; (80008d8 <LoopForever+0xe>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a4:	e002      	b.n	80008ac <LoopCopyDataInit>

080008a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008aa:	3304      	adds	r3, #4

080008ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b0:	d3f9      	bcc.n	80008a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b2:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80008b4:	4c0a      	ldr	r4, [pc, #40]	; (80008e0 <LoopForever+0x16>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b8:	e001      	b.n	80008be <LoopFillZerobss>

080008ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008bc:	3204      	adds	r2, #4

080008be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c0:	d3fb      	bcc.n	80008ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008c2:	f000 f811 	bl	80008e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008c6:	f7ff ff3d 	bl	8000744 <main>

080008ca <LoopForever>:

LoopForever:
    b LoopForever
 80008ca:	e7fe      	b.n	80008ca <LoopForever>
  ldr   r0, =_estack
 80008cc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80008d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80008d8:	08000950 	.word	0x08000950
  ldr r2, =_sbss
 80008dc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80008e0:	20000024 	.word	0x20000024

080008e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008e4:	e7fe      	b.n	80008e4 <ADC1_2_IRQHandler>
	...

080008e8 <__libc_init_array>:
 80008e8:	b570      	push	{r4, r5, r6, lr}
 80008ea:	2600      	movs	r6, #0
 80008ec:	4d0c      	ldr	r5, [pc, #48]	; (8000920 <__libc_init_array+0x38>)
 80008ee:	4c0d      	ldr	r4, [pc, #52]	; (8000924 <__libc_init_array+0x3c>)
 80008f0:	1b64      	subs	r4, r4, r5
 80008f2:	10a4      	asrs	r4, r4, #2
 80008f4:	42a6      	cmp	r6, r4
 80008f6:	d109      	bne.n	800090c <__libc_init_array+0x24>
 80008f8:	f000 f81a 	bl	8000930 <_init>
 80008fc:	2600      	movs	r6, #0
 80008fe:	4d0a      	ldr	r5, [pc, #40]	; (8000928 <__libc_init_array+0x40>)
 8000900:	4c0a      	ldr	r4, [pc, #40]	; (800092c <__libc_init_array+0x44>)
 8000902:	1b64      	subs	r4, r4, r5
 8000904:	10a4      	asrs	r4, r4, #2
 8000906:	42a6      	cmp	r6, r4
 8000908:	d105      	bne.n	8000916 <__libc_init_array+0x2e>
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000910:	4798      	blx	r3
 8000912:	3601      	adds	r6, #1
 8000914:	e7ee      	b.n	80008f4 <__libc_init_array+0xc>
 8000916:	f855 3b04 	ldr.w	r3, [r5], #4
 800091a:	4798      	blx	r3
 800091c:	3601      	adds	r6, #1
 800091e:	e7f2      	b.n	8000906 <__libc_init_array+0x1e>
 8000920:	08000948 	.word	0x08000948
 8000924:	08000948 	.word	0x08000948
 8000928:	08000948 	.word	0x08000948
 800092c:	0800094c 	.word	0x0800094c

08000930 <_init>:
 8000930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000932:	bf00      	nop
 8000934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000936:	bc08      	pop	{r3}
 8000938:	469e      	mov	lr, r3
 800093a:	4770      	bx	lr

0800093c <_fini>:
 800093c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800093e:	bf00      	nop
 8000940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000942:	bc08      	pop	{r3}
 8000944:	469e      	mov	lr, r3
 8000946:	4770      	bx	lr
