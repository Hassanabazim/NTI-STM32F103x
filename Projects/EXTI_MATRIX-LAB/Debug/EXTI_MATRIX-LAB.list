
EXTI_MATRIX-LAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001078  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080011a8  080011a8  000111a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011b4  080011b4  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  080011b4  080011b4  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011b4  080011b4  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011b4  080011b4  000111b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011b8  080011b8  000111b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080011bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000030  080011ec  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080011ec  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   000020da  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000094b  00000000  00000000  00022133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002a8  00000000  00000000  00022a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000210  00000000  00000000  00022d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000011cd  00000000  00000000  00022f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ec6  00000000  00000000  00024105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004a4c  00000000  00000000  00025fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0002aa17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000082c  00000000  00000000  0002aa6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000030 	.word	0x20000030
 800014c:	00000000 	.word	0x00000000
 8000150:	08001190 	.word	0x08001190

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000034 	.word	0x20000034
 800016c:	08001190 	.word	0x08001190

08000170 <HLEDMRX_enInit>:
#include "HLEDMRX_config.h"
#include "HLEDMRX_priv.h"


ErrorState_t HLEDMRX_enInit(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	/* 1. set Row direction to Output 2MHz PushPull */
	MGPIO_enSetPortDirection(GPIO_CRL_ID, PORTA, OUT_2MHZ_PP);
 8000174:	2202      	movs	r2, #2
 8000176:	2101      	movs	r1, #1
 8000178:	2000      	movs	r0, #0
 800017a:	f000 fbb7 	bl	80008ec <MGPIO_enSetPortDirection>

	/* 2. set Col direction to Output 2MHz PushPull */
	MGPIO_enSetPortDirection(GPIO_CRH_ID, PORTB, OUT_2MHZ_PP);
 800017e:	2202      	movs	r2, #2
 8000180:	2102      	movs	r1, #2
 8000182:	2001      	movs	r0, #1
 8000184:	f000 fbb2 	bl	80008ec <MGPIO_enSetPortDirection>

	return SUCCESS;
 8000188:	2302      	movs	r3, #2
}
 800018a:	4618      	mov	r0, r3
 800018c:	bd80      	pop	{r7, pc}

0800018e <HLEDMRX_voidSetRowValue>:

	return SUCCESS;
}

static void HLEDMRX_voidSetRowValue(u8 copy_u8data)
{
 800018e:	b580      	push	{r7, lr}
 8000190:	b084      	sub	sp, #16
 8000192:	af00      	add	r7, sp, #0
 8000194:	4603      	mov	r3, r0
 8000196:	71fb      	strb	r3, [r7, #7]
	u8 local_temp ;
	for (u8 pinNum = 0; pinNum < 8; pinNum++)
 8000198:	2300      	movs	r3, #0
 800019a:	73fb      	strb	r3, [r7, #15]
 800019c:	e01a      	b.n	80001d4 <HLEDMRX_voidSetRowValue+0x46>
	{
		local_temp = GET_BIT(copy_u8data, pinNum);
 800019e:	79fa      	ldrb	r2, [r7, #7]
 80001a0:	7bfb      	ldrb	r3, [r7, #15]
 80001a2:	fa42 f303 	asr.w	r3, r2, r3
 80001a6:	b2db      	uxtb	r3, r3
 80001a8:	f003 0301 	and.w	r3, r3, #1
 80001ac:	73bb      	strb	r3, [r7, #14]
		if (local_temp == 0)
 80001ae:	7bbb      	ldrb	r3, [r7, #14]
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d106      	bne.n	80001c2 <HLEDMRX_voidSetRowValue+0x34>
			MGPIO_enSetPinValue(PORTA, pinNum, HIGH);
 80001b4:	7bfb      	ldrb	r3, [r7, #15]
 80001b6:	2201      	movs	r2, #1
 80001b8:	4619      	mov	r1, r3
 80001ba:	2001      	movs	r0, #1
 80001bc:	f000 fb12 	bl	80007e4 <MGPIO_enSetPinValue>
 80001c0:	e005      	b.n	80001ce <HLEDMRX_voidSetRowValue+0x40>
		else
			MGPIO_enSetPinValue(PORTA, pinNum, LOW);
 80001c2:	7bfb      	ldrb	r3, [r7, #15]
 80001c4:	2200      	movs	r2, #0
 80001c6:	4619      	mov	r1, r3
 80001c8:	2001      	movs	r0, #1
 80001ca:	f000 fb0b 	bl	80007e4 <MGPIO_enSetPinValue>
	for (u8 pinNum = 0; pinNum < 8; pinNum++)
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	3301      	adds	r3, #1
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	7bfb      	ldrb	r3, [r7, #15]
 80001d6:	2b07      	cmp	r3, #7
 80001d8:	d9e1      	bls.n	800019e <HLEDMRX_voidSetRowValue+0x10>
	}
}
 80001da:	bf00      	nop
 80001dc:	bf00      	nop
 80001de:	3710      	adds	r7, #16
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}

080001e4 <HLEDMRX_enDisplayMotion>:

ErrorState_t HLEDMRX_enDisplayMotion(u8 *Copy_u8DataLarge, u32 Copy_u32Speed)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	6039      	str	r1, [r7, #0]


	for (u32 i = 0 ; i < Copy_u32Speed; i++)
 80001ee:	2300      	movs	r3, #0
 80001f0:	60fb      	str	r3, [r7, #12]
 80001f2:	e03a      	b.n	800026a <HLEDMRX_enDisplayMotion+0x86>
	{
		for (u8 shift = 0; shift < 8; shift++)
 80001f4:	2300      	movs	r3, #0
 80001f6:	72fb      	strb	r3, [r7, #11]
 80001f8:	e031      	b.n	800025e <HLEDMRX_enDisplayMotion+0x7a>
		{
			for (u8 pinNum = 0; pinNum < 8; pinNum++)
 80001fa:	2300      	movs	r3, #0
 80001fc:	72bb      	strb	r3, [r7, #10]
 80001fe:	e01a      	b.n	8000236 <HLEDMRX_enDisplayMotion+0x52>
			{
				/* 1. Disable All col pins by writing High */
				MGPIO_enSetPortValue(GPIO_CRH_ID, PORTB, LOW);
 8000200:	2200      	movs	r2, #0
 8000202:	2102      	movs	r1, #2
 8000204:	2001      	movs	r0, #1
 8000206:	f000 fbdf 	bl	80009c8 <MGPIO_enSetPortValue>

				/* 2. Get data and stored in ROWS */
				HLEDMRX_voidSetRowValue(Copy_u8DataLarge[pinNum]);
 800020a:	7abb      	ldrb	r3, [r7, #10]
 800020c:	687a      	ldr	r2, [r7, #4]
 800020e:	4413      	add	r3, r2
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	4618      	mov	r0, r3
 8000214:	f7ff ffbb 	bl	800018e <HLEDMRX_voidSetRowValue>

				/* 3. Enable col0 by writing low */
				MGPIO_enSetPinValue(PORTB, (PIN8 + pinNum), HIGH);
 8000218:	7abb      	ldrb	r3, [r7, #10]
 800021a:	3308      	adds	r3, #8
 800021c:	b2db      	uxtb	r3, r3
 800021e:	2201      	movs	r2, #1
 8000220:	4619      	mov	r1, r3
 8000222:	2002      	movs	r0, #2
 8000224:	f000 fade 	bl	80007e4 <MGPIO_enSetPinValue>


				/* 4. delay of the opreation */
				MSTK_enDelayMS(2500);
 8000228:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800022c:	f000 fdf2 	bl	8000e14 <MSTK_enDelayMS>
			for (u8 pinNum = 0; pinNum < 8; pinNum++)
 8000230:	7abb      	ldrb	r3, [r7, #10]
 8000232:	3301      	adds	r3, #1
 8000234:	72bb      	strb	r3, [r7, #10]
 8000236:	7abb      	ldrb	r3, [r7, #10]
 8000238:	2b07      	cmp	r3, #7
 800023a:	d9e1      	bls.n	8000200 <HLEDMRX_enDisplayMotion+0x1c>

			}

			MSTK_enDelayMS(1000);
 800023c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000240:	f000 fde8 	bl	8000e14 <MSTK_enDelayMS>
			Copy_u8DataLarge[shift] >>= 1;
 8000244:	7afb      	ldrb	r3, [r7, #11]
 8000246:	687a      	ldr	r2, [r7, #4]
 8000248:	4413      	add	r3, r2
 800024a:	781a      	ldrb	r2, [r3, #0]
 800024c:	7afb      	ldrb	r3, [r7, #11]
 800024e:	6879      	ldr	r1, [r7, #4]
 8000250:	440b      	add	r3, r1
 8000252:	0852      	lsrs	r2, r2, #1
 8000254:	b2d2      	uxtb	r2, r2
 8000256:	701a      	strb	r2, [r3, #0]
		for (u8 shift = 0; shift < 8; shift++)
 8000258:	7afb      	ldrb	r3, [r7, #11]
 800025a:	3301      	adds	r3, #1
 800025c:	72fb      	strb	r3, [r7, #11]
 800025e:	7afb      	ldrb	r3, [r7, #11]
 8000260:	2b07      	cmp	r3, #7
 8000262:	d9ca      	bls.n	80001fa <HLEDMRX_enDisplayMotion+0x16>
	for (u32 i = 0 ; i < Copy_u32Speed; i++)
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	3301      	adds	r3, #1
 8000268:	60fb      	str	r3, [r7, #12]
 800026a:	68fa      	ldr	r2, [r7, #12]
 800026c:	683b      	ldr	r3, [r7, #0]
 800026e:	429a      	cmp	r2, r3
 8000270:	d3c0      	bcc.n	80001f4 <HLEDMRX_enDisplayMotion+0x10>

	}



	return SUCCESS;
 8000272:	2302      	movs	r3, #2
}
 8000274:	4618      	mov	r0, r3
 8000276:	3710      	adds	r7, #16
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}

0800027c <HPB_enInit>:
#include "HPB_priv.h"
#include "HPB_config.h"


ErrorState_t HPB_enInit(PB_ST *ptrPB)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	ErrorState_t Local_state = SUCCESS;
 8000284:	2302      	movs	r3, #2
 8000286:	73fb      	strb	r3, [r7, #15]

	if (ptrPB->PB_PORT >= PORTA && ptrPB->PB_PORT <= PORTC)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d018      	beq.n	80002c2 <HPB_enInit+0x46>
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b03      	cmp	r3, #3
 8000296:	d814      	bhi.n	80002c2 <HPB_enInit+0x46>
	{
		MGPIO_enSetPinDirection(ptrPB->PB_PORT, ptrPB->PB_PIN, IN_PU_PD);
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	7818      	ldrb	r0, [r3, #0]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	785b      	ldrb	r3, [r3, #1]
 80002a0:	2208      	movs	r2, #8
 80002a2:	4619      	mov	r1, r3
 80002a4:	f000 f9c4 	bl	8000630 <MGPIO_enSetPinDirection>

		/* Activiate Internal PULL-UPS Resistors */
		if(ptrPB->PB_MODE== PULL_UP)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	789b      	ldrb	r3, [r3, #2]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d10a      	bne.n	80002c6 <HPB_enInit+0x4a>
			MGPIO_enSetPinValue(ptrPB->PB_PORT, ptrPB->PB_PIN, HIGH);
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	7818      	ldrb	r0, [r3, #0]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	785b      	ldrb	r3, [r3, #1]
 80002b8:	2201      	movs	r2, #1
 80002ba:	4619      	mov	r1, r3
 80002bc:	f000 fa92 	bl	80007e4 <MGPIO_enSetPinValue>
		if(ptrPB->PB_MODE== PULL_UP)
 80002c0:	e001      	b.n	80002c6 <HPB_enInit+0x4a>
	}

	else
	{
		Local_state = OUT_OF_RANG_ERR;
 80002c2:	2300      	movs	r3, #0
 80002c4:	73fb      	strb	r3, [r7, #15]
	}

	return Local_state;
 80002c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	3710      	adds	r7, #16
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <MAFIO_enSetEXTIConfig>:
#include "MAFIO_int.h"
#include "MAFIO_config.h"
#include "MAFIO_priv.h"

ErrorState_t MAFIO_enSetEXTIConfig(u8 copy_u8EXTILineId, AFIOEXTI_t copy_u8PortMap)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	460a      	mov	r2, r1
 80002da:	71fb      	strb	r3, [r7, #7]
 80002dc:	4613      	mov	r3, r2
 80002de:	71bb      	strb	r3, [r7, #6]
	ErrorState_t local_state = SUCCESS ;
 80002e0:	2302      	movs	r3, #2
 80002e2:	73fb      	strb	r3, [r7, #15]

	u8 local_u8RegIndex = 0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	73bb      	strb	r3, [r7, #14]
	if (copy_u8EXTILineId <= 3)
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	2b03      	cmp	r3, #3
 80002ec:	d802      	bhi.n	80002f4 <MAFIO_enSetEXTIConfig+0x24>
	{
		local_u8RegIndex = 0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	73bb      	strb	r3, [r7, #14]
 80002f2:	e01c      	b.n	800032e <MAFIO_enSetEXTIConfig+0x5e>
	}
	else if (copy_u8EXTILineId <= 7)
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	2b07      	cmp	r3, #7
 80002f8:	d805      	bhi.n	8000306 <MAFIO_enSetEXTIConfig+0x36>
	{
		local_u8RegIndex = 1;
 80002fa:	2301      	movs	r3, #1
 80002fc:	73bb      	strb	r3, [r7, #14]
		copy_u8EXTILineId -= 4;
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	3b04      	subs	r3, #4
 8000302:	71fb      	strb	r3, [r7, #7]
 8000304:	e013      	b.n	800032e <MAFIO_enSetEXTIConfig+0x5e>
	}
	else if (copy_u8EXTILineId <= 11)
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	2b0b      	cmp	r3, #11
 800030a:	d805      	bhi.n	8000318 <MAFIO_enSetEXTIConfig+0x48>
	{
		local_u8RegIndex = 2;
 800030c:	2302      	movs	r3, #2
 800030e:	73bb      	strb	r3, [r7, #14]
		copy_u8EXTILineId -= 8;
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	3b08      	subs	r3, #8
 8000314:	71fb      	strb	r3, [r7, #7]
 8000316:	e00a      	b.n	800032e <MAFIO_enSetEXTIConfig+0x5e>
	}
	else if (copy_u8EXTILineId <= 15)
 8000318:	79fb      	ldrb	r3, [r7, #7]
 800031a:	2b0f      	cmp	r3, #15
 800031c:	d805      	bhi.n	800032a <MAFIO_enSetEXTIConfig+0x5a>
	{
		local_u8RegIndex = 3;
 800031e:	2303      	movs	r3, #3
 8000320:	73bb      	strb	r3, [r7, #14]
		copy_u8EXTILineId -= 12;
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	3b0c      	subs	r3, #12
 8000326:	71fb      	strb	r3, [r7, #7]
 8000328:	e001      	b.n	800032e <MAFIO_enSetEXTIConfig+0x5e>
	}
	else
	{
		local_state = OUT_OF_RANG_ERR;
 800032a:	2300      	movs	r3, #0
 800032c:	73fb      	strb	r3, [r7, #15]
	}

	AFIO->AFIO_EXTICR[local_u8RegIndex] &= ~((0b1111) <<(copy_u8EXTILineId*4));
 800032e:	4a14      	ldr	r2, [pc, #80]	; (8000380 <MAFIO_enSetEXTIConfig+0xb0>)
 8000330:	7bbb      	ldrb	r3, [r7, #14]
 8000332:	3302      	adds	r3, #2
 8000334:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	009b      	lsls	r3, r3, #2
 800033c:	210f      	movs	r1, #15
 800033e:	fa01 f303 	lsl.w	r3, r1, r3
 8000342:	43db      	mvns	r3, r3
 8000344:	4618      	mov	r0, r3
 8000346:	490e      	ldr	r1, [pc, #56]	; (8000380 <MAFIO_enSetEXTIConfig+0xb0>)
 8000348:	7bbb      	ldrb	r3, [r7, #14]
 800034a:	4002      	ands	r2, r0
 800034c:	3302      	adds	r3, #2
 800034e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->AFIO_EXTICR[local_u8RegIndex] |=  ((copy_u8PortMap) << (copy_u8EXTILineId * 4));
 8000352:	4a0b      	ldr	r2, [pc, #44]	; (8000380 <MAFIO_enSetEXTIConfig+0xb0>)
 8000354:	7bbb      	ldrb	r3, [r7, #14]
 8000356:	3302      	adds	r3, #2
 8000358:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800035c:	79b9      	ldrb	r1, [r7, #6]
 800035e:	79fb      	ldrb	r3, [r7, #7]
 8000360:	009b      	lsls	r3, r3, #2
 8000362:	fa01 f303 	lsl.w	r3, r1, r3
 8000366:	4618      	mov	r0, r3
 8000368:	4905      	ldr	r1, [pc, #20]	; (8000380 <MAFIO_enSetEXTIConfig+0xb0>)
 800036a:	7bbb      	ldrb	r3, [r7, #14]
 800036c:	4302      	orrs	r2, r0
 800036e:	3302      	adds	r3, #2
 8000370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	return local_state;
 8000374:	7bfb      	ldrb	r3, [r7, #15]
}
 8000376:	4618      	mov	r0, r3
 8000378:	3714      	adds	r7, #20
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr
 8000380:	40010000 	.word	0x40010000

08000384 <MEXTI_enInit>:

void (*EXTI_CALLBACK[16])(void) = {0};


ErrorState_t MEXTI_enInit(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
#if (EXTI_MODE == EXTI_RISING_TRIG)
	SET_BIT(EXTI->EXTI_RTSR,EXTI_LINE);

#elif(EXTI_MODE == EXTI_FAILING_TRIG)
	SET_BIT(EXTI->EXTI_FTSR,EXTI_LINE);
 8000388:	4b08      	ldr	r3, [pc, #32]	; (80003ac <MEXTI_enInit+0x28>)
 800038a:	68db      	ldr	r3, [r3, #12]
 800038c:	4a07      	ldr	r2, [pc, #28]	; (80003ac <MEXTI_enInit+0x28>)
 800038e:	f043 0301 	orr.w	r3, r3, #1
 8000392:	60d3      	str	r3, [r2, #12]

#else
#error("Wrong EXTI MODE!");
#endif

	SET_BIT(EXTI->EXTI_IMR, EXTI_LINE);
 8000394:	4b05      	ldr	r3, [pc, #20]	; (80003ac <MEXTI_enInit+0x28>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a04      	ldr	r2, [pc, #16]	; (80003ac <MEXTI_enInit+0x28>)
 800039a:	f043 0301 	orr.w	r3, r3, #1
 800039e:	6013      	str	r3, [r2, #0]

	return SUCCESS;
 80003a0:	2302      	movs	r3, #2
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40010400 	.word	0x40010400

080003b0 <MEXTI_enEnable>:

ErrorState_t MEXTI_enEnable(u8 Copy_u8LineId)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	71fb      	strb	r3, [r7, #7]
	ErrorState_t local_state = SUCCESS ;
 80003ba:	2302      	movs	r3, #2
 80003bc:	73fb      	strb	r3, [r7, #15]

	if (Copy_u8LineId <= 15)
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	2b0f      	cmp	r3, #15
 80003c2:	d80a      	bhi.n	80003da <MEXTI_enEnable+0x2a>
	{
		SET_BIT(EXTI->EXTI_IMR, Copy_u8LineId);
 80003c4:	4b09      	ldr	r3, [pc, #36]	; (80003ec <MEXTI_enEnable+0x3c>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	79fa      	ldrb	r2, [r7, #7]
 80003ca:	2101      	movs	r1, #1
 80003cc:	fa01 f202 	lsl.w	r2, r1, r2
 80003d0:	4611      	mov	r1, r2
 80003d2:	4a06      	ldr	r2, [pc, #24]	; (80003ec <MEXTI_enEnable+0x3c>)
 80003d4:	430b      	orrs	r3, r1
 80003d6:	6013      	str	r3, [r2, #0]
 80003d8:	e001      	b.n	80003de <MEXTI_enEnable+0x2e>
	}
	else
	{
		local_state = OUT_OF_RANG_ERR;
 80003da:	2300      	movs	r3, #0
 80003dc:	73fb      	strb	r3, [r7, #15]
	}

	return local_state;
 80003de:	7bfb      	ldrb	r3, [r7, #15]
}
 80003e0:	4618      	mov	r0, r3
 80003e2:	3714      	adds	r7, #20
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bc80      	pop	{r7}
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	40010400 	.word	0x40010400

080003f0 <MEXTI_enCallBack>:

	return local_state;
}

ErrorState_t MEXTI_enCallBack(u8 Copy_u8LineId, void (*ptr) (void))
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	6039      	str	r1, [r7, #0]
 80003fa:	71fb      	strb	r3, [r7, #7]
	ErrorState_t local_state = SUCCESS ;
 80003fc:	2302      	movs	r3, #2
 80003fe:	73fb      	strb	r3, [r7, #15]
	if (ptr == NULL)
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d102      	bne.n	800040c <MEXTI_enCallBack+0x1c>
	{
		local_state = NULL_PTR_ERR;
 8000406:	2301      	movs	r3, #1
 8000408:	73fb      	strb	r3, [r7, #15]
 800040a:	e004      	b.n	8000416 <MEXTI_enCallBack+0x26>
	}
	else
	{
		EXTI_CALLBACK[Copy_u8LineId] = ptr;
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	4905      	ldr	r1, [pc, #20]	; (8000424 <MEXTI_enCallBack+0x34>)
 8000410:	683a      	ldr	r2, [r7, #0]
 8000412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	return local_state ;
 8000416:	7bfb      	ldrb	r3, [r7, #15]
}
 8000418:	4618      	mov	r0, r3
 800041a:	3714      	adds	r7, #20
 800041c:	46bd      	mov	sp, r7
 800041e:	bc80      	pop	{r7}
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	2000004c 	.word	0x2000004c

08000428 <MEXTI_enSetLatch>:

	return local_state;
}

ErrorState_t MEXTI_enSetLatch(u8 Copy_u8LineId, u8 Copy_u8Mode)
{
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	460a      	mov	r2, r1
 8000432:	71fb      	strb	r3, [r7, #7]
 8000434:	4613      	mov	r3, r2
 8000436:	71bb      	strb	r3, [r7, #6]
	ErrorState_t local_state = SUCCESS ;
 8000438:	2302      	movs	r3, #2
 800043a:	73fb      	strb	r3, [r7, #15]

	if (Copy_u8LineId <= 15)
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	2b0f      	cmp	r3, #15
 8000440:	d842      	bhi.n	80004c8 <MEXTI_enSetLatch+0xa0>
	{
		CLR_BIT(EXTI->EXTI_IMR, Copy_u8LineId);
 8000442:	4b25      	ldr	r3, [pc, #148]	; (80004d8 <MEXTI_enSetLatch+0xb0>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	79fa      	ldrb	r2, [r7, #7]
 8000448:	2101      	movs	r1, #1
 800044a:	fa01 f202 	lsl.w	r2, r1, r2
 800044e:	43d2      	mvns	r2, r2
 8000450:	4611      	mov	r1, r2
 8000452:	4a21      	ldr	r2, [pc, #132]	; (80004d8 <MEXTI_enSetLatch+0xb0>)
 8000454:	400b      	ands	r3, r1
 8000456:	6013      	str	r3, [r2, #0]
		switch (Copy_u8Mode)
 8000458:	79bb      	ldrb	r3, [r7, #6]
 800045a:	2b03      	cmp	r3, #3
 800045c:	d01c      	beq.n	8000498 <MEXTI_enSetLatch+0x70>
 800045e:	2b03      	cmp	r3, #3
 8000460:	dc2f      	bgt.n	80004c2 <MEXTI_enSetLatch+0x9a>
 8000462:	2b01      	cmp	r3, #1
 8000464:	d002      	beq.n	800046c <MEXTI_enSetLatch+0x44>
 8000466:	2b02      	cmp	r3, #2
 8000468:	d00b      	beq.n	8000482 <MEXTI_enSetLatch+0x5a>
 800046a:	e02a      	b.n	80004c2 <MEXTI_enSetLatch+0x9a>
		{
		case EXTI_RISING_TRIG:
			SET_BIT(EXTI->EXTI_RTSR,Copy_u8LineId);
 800046c:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <MEXTI_enSetLatch+0xb0>)
 800046e:	689b      	ldr	r3, [r3, #8]
 8000470:	79fa      	ldrb	r2, [r7, #7]
 8000472:	2101      	movs	r1, #1
 8000474:	fa01 f202 	lsl.w	r2, r1, r2
 8000478:	4611      	mov	r1, r2
 800047a:	4a17      	ldr	r2, [pc, #92]	; (80004d8 <MEXTI_enSetLatch+0xb0>)
 800047c:	430b      	orrs	r3, r1
 800047e:	6093      	str	r3, [r2, #8]
			break;
 8000480:	e024      	b.n	80004cc <MEXTI_enSetLatch+0xa4>

		case EXTI_FAILING_TRIG:
			SET_BIT(EXTI->EXTI_FTSR,Copy_u8LineId);
 8000482:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <MEXTI_enSetLatch+0xb0>)
 8000484:	68db      	ldr	r3, [r3, #12]
 8000486:	79fa      	ldrb	r2, [r7, #7]
 8000488:	2101      	movs	r1, #1
 800048a:	fa01 f202 	lsl.w	r2, r1, r2
 800048e:	4611      	mov	r1, r2
 8000490:	4a11      	ldr	r2, [pc, #68]	; (80004d8 <MEXTI_enSetLatch+0xb0>)
 8000492:	430b      	orrs	r3, r1
 8000494:	60d3      	str	r3, [r2, #12]
			break;
 8000496:	e019      	b.n	80004cc <MEXTI_enSetLatch+0xa4>

		case EXTI_LOGIC_CHANGE:
			SET_BIT(EXTI->EXTI_RTSR,Copy_u8LineId);
 8000498:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <MEXTI_enSetLatch+0xb0>)
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	79fa      	ldrb	r2, [r7, #7]
 800049e:	2101      	movs	r1, #1
 80004a0:	fa01 f202 	lsl.w	r2, r1, r2
 80004a4:	4611      	mov	r1, r2
 80004a6:	4a0c      	ldr	r2, [pc, #48]	; (80004d8 <MEXTI_enSetLatch+0xb0>)
 80004a8:	430b      	orrs	r3, r1
 80004aa:	6093      	str	r3, [r2, #8]
			SET_BIT(EXTI->EXTI_FTSR,Copy_u8LineId);
 80004ac:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <MEXTI_enSetLatch+0xb0>)
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	79fa      	ldrb	r2, [r7, #7]
 80004b2:	2101      	movs	r1, #1
 80004b4:	fa01 f202 	lsl.w	r2, r1, r2
 80004b8:	4611      	mov	r1, r2
 80004ba:	4a07      	ldr	r2, [pc, #28]	; (80004d8 <MEXTI_enSetLatch+0xb0>)
 80004bc:	430b      	orrs	r3, r1
 80004be:	60d3      	str	r3, [r2, #12]
			break;
 80004c0:	e004      	b.n	80004cc <MEXTI_enSetLatch+0xa4>

		default:
			local_state = OUT_OF_RANG_ERR;
 80004c2:	2300      	movs	r3, #0
 80004c4:	73fb      	strb	r3, [r7, #15]
			break;
 80004c6:	e001      	b.n	80004cc <MEXTI_enSetLatch+0xa4>
		}
	}
	else
	{
		local_state = OUT_OF_RANG_ERR;
 80004c8:	2300      	movs	r3, #0
 80004ca:	73fb      	strb	r3, [r7, #15]
	}

	return local_state;
 80004cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3714      	adds	r7, #20
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	40010400 	.word	0x40010400

080004dc <EXTI0_IRQHandler>:



void EXTI0_IRQHandler(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	if (EXTI_CALLBACK[EXTI0_LINE] != NULL)
 80004e0:	4b04      	ldr	r3, [pc, #16]	; (80004f4 <EXTI0_IRQHandler+0x18>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d002      	beq.n	80004ee <EXTI0_IRQHandler+0x12>
	{
		EXTI_CALLBACK[EXTI0_LINE]();
 80004e8:	4b02      	ldr	r3, [pc, #8]	; (80004f4 <EXTI0_IRQHandler+0x18>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4798      	blx	r3
	}

}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	2000004c 	.word	0x2000004c

080004f8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	if (EXTI_CALLBACK[EXTI1_LINE] != NULL)
 80004fc:	4b04      	ldr	r3, [pc, #16]	; (8000510 <EXTI1_IRQHandler+0x18>)
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d002      	beq.n	800050a <EXTI1_IRQHandler+0x12>
	{
		EXTI_CALLBACK[EXTI1_LINE]();
 8000504:	4b02      	ldr	r3, [pc, #8]	; (8000510 <EXTI1_IRQHandler+0x18>)
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	4798      	blx	r3
	}

}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	2000004c 	.word	0x2000004c

08000514 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	if (EXTI_CALLBACK[EXTI2_LINE] != NULL)
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <EXTI2_IRQHandler+0x18>)
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d002      	beq.n	8000526 <EXTI2_IRQHandler+0x12>
	{
		EXTI_CALLBACK[EXTI2_LINE]();
 8000520:	4b02      	ldr	r3, [pc, #8]	; (800052c <EXTI2_IRQHandler+0x18>)
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	4798      	blx	r3
	}
}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	2000004c 	.word	0x2000004c

08000530 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	if (EXTI_CALLBACK[EXTI3_LINE] != NULL)
 8000534:	4b04      	ldr	r3, [pc, #16]	; (8000548 <EXTI3_IRQHandler+0x18>)
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d002      	beq.n	8000542 <EXTI3_IRQHandler+0x12>
	{
		EXTI_CALLBACK[EXTI3_LINE]();
 800053c:	4b02      	ldr	r3, [pc, #8]	; (8000548 <EXTI3_IRQHandler+0x18>)
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	4798      	blx	r3
	}
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	2000004c 	.word	0x2000004c

0800054c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	if (EXTI_CALLBACK[EXTI4_LINE] != NULL)
 8000550:	4b04      	ldr	r3, [pc, #16]	; (8000564 <EXTI4_IRQHandler+0x18>)
 8000552:	691b      	ldr	r3, [r3, #16]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d002      	beq.n	800055e <EXTI4_IRQHandler+0x12>
	{
		EXTI_CALLBACK[EXTI4_LINE]();
 8000558:	4b02      	ldr	r3, [pc, #8]	; (8000564 <EXTI4_IRQHandler+0x18>)
 800055a:	691b      	ldr	r3, [r3, #16]
 800055c:	4798      	blx	r3
	}
}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	2000004c 	.word	0x2000004c

08000568 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	if (EXTI_CALLBACK[EXTI5_LINE] != NULL)
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <EXTI9_5_IRQHandler+0x58>)
 800056e:	695b      	ldr	r3, [r3, #20]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d003      	beq.n	800057c <EXTI9_5_IRQHandler+0x14>
	{
		EXTI_CALLBACK[EXTI5_LINE]();
 8000574:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <EXTI9_5_IRQHandler+0x58>)
 8000576:	695b      	ldr	r3, [r3, #20]
 8000578:	4798      	blx	r3
	else if (EXTI_CALLBACK[EXTI9_LINE] != NULL)
	{
		EXTI_CALLBACK[EXTI9_LINE]();

	}
}
 800057a:	e01e      	b.n	80005ba <EXTI9_5_IRQHandler+0x52>
	else if (EXTI_CALLBACK[EXTI6_LINE] != NULL)
 800057c:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <EXTI9_5_IRQHandler+0x58>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d003      	beq.n	800058c <EXTI9_5_IRQHandler+0x24>
		EXTI_CALLBACK[EXTI6_LINE]();
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <EXTI9_5_IRQHandler+0x58>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4798      	blx	r3
}
 800058a:	e016      	b.n	80005ba <EXTI9_5_IRQHandler+0x52>
	else if (EXTI_CALLBACK[EXTI7_LINE] != NULL)
 800058c:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <EXTI9_5_IRQHandler+0x58>)
 800058e:	69db      	ldr	r3, [r3, #28]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d003      	beq.n	800059c <EXTI9_5_IRQHandler+0x34>
		EXTI_CALLBACK[EXTI7_LINE]();
 8000594:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <EXTI9_5_IRQHandler+0x58>)
 8000596:	69db      	ldr	r3, [r3, #28]
 8000598:	4798      	blx	r3
}
 800059a:	e00e      	b.n	80005ba <EXTI9_5_IRQHandler+0x52>
	else if (EXTI_CALLBACK[EXTI8_LINE] != NULL)
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <EXTI9_5_IRQHandler+0x58>)
 800059e:	6a1b      	ldr	r3, [r3, #32]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d003      	beq.n	80005ac <EXTI9_5_IRQHandler+0x44>
		EXTI_CALLBACK[EXTI8_LINE]();
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <EXTI9_5_IRQHandler+0x58>)
 80005a6:	6a1b      	ldr	r3, [r3, #32]
 80005a8:	4798      	blx	r3
}
 80005aa:	e006      	b.n	80005ba <EXTI9_5_IRQHandler+0x52>
	else if (EXTI_CALLBACK[EXTI9_LINE] != NULL)
 80005ac:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <EXTI9_5_IRQHandler+0x58>)
 80005ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d002      	beq.n	80005ba <EXTI9_5_IRQHandler+0x52>
		EXTI_CALLBACK[EXTI9_LINE]();
 80005b4:	4b02      	ldr	r3, [pc, #8]	; (80005c0 <EXTI9_5_IRQHandler+0x58>)
 80005b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005b8:	4798      	blx	r3
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	2000004c 	.word	0x2000004c

080005c4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	if (EXTI_CALLBACK[EXTI10_LINE] != NULL)
 80005c8:	4b18      	ldr	r3, [pc, #96]	; (800062c <EXTI15_10_IRQHandler+0x68>)
 80005ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d003      	beq.n	80005d8 <EXTI15_10_IRQHandler+0x14>
	{
		EXTI_CALLBACK[EXTI10_LINE]();
 80005d0:	4b16      	ldr	r3, [pc, #88]	; (800062c <EXTI15_10_IRQHandler+0x68>)
 80005d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005d4:	4798      	blx	r3
	else if (EXTI_CALLBACK[EXTI15_LINE] != NULL)
	{
		EXTI_CALLBACK[EXTI15_LINE]();

	}
}
 80005d6:	e026      	b.n	8000626 <EXTI15_10_IRQHandler+0x62>
	else if (EXTI_CALLBACK[EXTI11_LINE] != NULL)
 80005d8:	4b14      	ldr	r3, [pc, #80]	; (800062c <EXTI15_10_IRQHandler+0x68>)
 80005da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d003      	beq.n	80005e8 <EXTI15_10_IRQHandler+0x24>
		EXTI_CALLBACK[EXTI11_LINE]();
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <EXTI15_10_IRQHandler+0x68>)
 80005e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005e4:	4798      	blx	r3
}
 80005e6:	e01e      	b.n	8000626 <EXTI15_10_IRQHandler+0x62>
	else if (EXTI_CALLBACK[EXTI12_LINE] != NULL)
 80005e8:	4b10      	ldr	r3, [pc, #64]	; (800062c <EXTI15_10_IRQHandler+0x68>)
 80005ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d003      	beq.n	80005f8 <EXTI15_10_IRQHandler+0x34>
		EXTI_CALLBACK[EXTI12_LINE]();
 80005f0:	4b0e      	ldr	r3, [pc, #56]	; (800062c <EXTI15_10_IRQHandler+0x68>)
 80005f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f4:	4798      	blx	r3
}
 80005f6:	e016      	b.n	8000626 <EXTI15_10_IRQHandler+0x62>
	else if (EXTI_CALLBACK[EXTI13_LINE] != NULL)
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <EXTI15_10_IRQHandler+0x68>)
 80005fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d003      	beq.n	8000608 <EXTI15_10_IRQHandler+0x44>
		EXTI_CALLBACK[EXTI13_LINE]();
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <EXTI15_10_IRQHandler+0x68>)
 8000602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000604:	4798      	blx	r3
}
 8000606:	e00e      	b.n	8000626 <EXTI15_10_IRQHandler+0x62>
	else if (EXTI_CALLBACK[EXTI14_LINE] != NULL)
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <EXTI15_10_IRQHandler+0x68>)
 800060a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800060c:	2b00      	cmp	r3, #0
 800060e:	d003      	beq.n	8000618 <EXTI15_10_IRQHandler+0x54>
		EXTI_CALLBACK[EXTI14_LINE]();
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <EXTI15_10_IRQHandler+0x68>)
 8000612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000614:	4798      	blx	r3
}
 8000616:	e006      	b.n	8000626 <EXTI15_10_IRQHandler+0x62>
	else if (EXTI_CALLBACK[EXTI15_LINE] != NULL)
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <EXTI15_10_IRQHandler+0x68>)
 800061a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800061c:	2b00      	cmp	r3, #0
 800061e:	d002      	beq.n	8000626 <EXTI15_10_IRQHandler+0x62>
		EXTI_CALLBACK[EXTI15_LINE]();
 8000620:	4b02      	ldr	r3, [pc, #8]	; (800062c <EXTI15_10_IRQHandler+0x68>)
 8000622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000624:	4798      	blx	r3
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	2000004c 	.word	0x2000004c

08000630 <MGPIO_enSetPinDirection>:
#include "MGPIO_int.h"
#include "MGPIO_config.h"
#include "MGPIO_priv.h"

ErrorState_t MGPIO_enSetPinDirection(PORT_t copy_u8port, PIN_t copy_u8pin, MODE_t copy_u8Mode)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
 800063a:	460b      	mov	r3, r1
 800063c:	71bb      	strb	r3, [r7, #6]
 800063e:	4613      	mov	r3, r2
 8000640:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 8000642:	2302      	movs	r3, #2
 8000644:	73fb      	strb	r3, [r7, #15]
	switch(copy_u8port)
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	2b03      	cmp	r3, #3
 800064a:	d07f      	beq.n	800074c <MGPIO_enSetPinDirection+0x11c>
 800064c:	2b03      	cmp	r3, #3
 800064e:	f300 80b9 	bgt.w	80007c4 <MGPIO_enSetPinDirection+0x194>
 8000652:	2b01      	cmp	r3, #1
 8000654:	d002      	beq.n	800065c <MGPIO_enSetPinDirection+0x2c>
 8000656:	2b02      	cmp	r3, #2
 8000658:	d03c      	beq.n	80006d4 <MGPIO_enSetPinDirection+0xa4>
 800065a:	e0b3      	b.n	80007c4 <MGPIO_enSetPinDirection+0x194>
	{
	case PORTA:
		if (copy_u8pin < GPIO_CRL_MAX)
 800065c:	79bb      	ldrb	r3, [r7, #6]
 800065e:	2b07      	cmp	r3, #7
 8000660:	d817      	bhi.n	8000692 <MGPIO_enSetPinDirection+0x62>
		{
			GPIOA->GPIO_CRL &= ~(GPIO_MASK << (copy_u8pin * GPIO_OFFSET)) ;
 8000662:	4b5d      	ldr	r3, [pc, #372]	; (80007d8 <MGPIO_enSetPinDirection+0x1a8>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	79ba      	ldrb	r2, [r7, #6]
 8000668:	0092      	lsls	r2, r2, #2
 800066a:	210f      	movs	r1, #15
 800066c:	fa01 f202 	lsl.w	r2, r1, r2
 8000670:	43d2      	mvns	r2, r2
 8000672:	4611      	mov	r1, r2
 8000674:	4a58      	ldr	r2, [pc, #352]	; (80007d8 <MGPIO_enSetPinDirection+0x1a8>)
 8000676:	400b      	ands	r3, r1
 8000678:	6013      	str	r3, [r2, #0]
			GPIOA->GPIO_CRL |= copy_u8Mode << (copy_u8pin * GPIO_OFFSET) ;
 800067a:	4b57      	ldr	r3, [pc, #348]	; (80007d8 <MGPIO_enSetPinDirection+0x1a8>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	7979      	ldrb	r1, [r7, #5]
 8000680:	79ba      	ldrb	r2, [r7, #6]
 8000682:	0092      	lsls	r2, r2, #2
 8000684:	fa01 f202 	lsl.w	r2, r1, r2
 8000688:	4611      	mov	r1, r2
 800068a:	4a53      	ldr	r2, [pc, #332]	; (80007d8 <MGPIO_enSetPinDirection+0x1a8>)
 800068c:	430b      	orrs	r3, r1
 800068e:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000690:	e09b      	b.n	80007ca <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < GPIO_CRH_MAX)
 8000692:	79bb      	ldrb	r3, [r7, #6]
 8000694:	2b0f      	cmp	r3, #15
 8000696:	d81a      	bhi.n	80006ce <MGPIO_enSetPinDirection+0x9e>
			copy_u8pin -= GPIO_CRL_MAX  ;
 8000698:	79bb      	ldrb	r3, [r7, #6]
 800069a:	3b08      	subs	r3, #8
 800069c:	71bb      	strb	r3, [r7, #6]
			GPIOA->GPIO_CRH &= ~(GPIO_MASK << (copy_u8pin * GPIO_OFFSET));
 800069e:	4b4e      	ldr	r3, [pc, #312]	; (80007d8 <MGPIO_enSetPinDirection+0x1a8>)
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	79ba      	ldrb	r2, [r7, #6]
 80006a4:	0092      	lsls	r2, r2, #2
 80006a6:	210f      	movs	r1, #15
 80006a8:	fa01 f202 	lsl.w	r2, r1, r2
 80006ac:	43d2      	mvns	r2, r2
 80006ae:	4611      	mov	r1, r2
 80006b0:	4a49      	ldr	r2, [pc, #292]	; (80007d8 <MGPIO_enSetPinDirection+0x1a8>)
 80006b2:	400b      	ands	r3, r1
 80006b4:	6053      	str	r3, [r2, #4]
			GPIOA->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * GPIO_OFFSET));
 80006b6:	4b48      	ldr	r3, [pc, #288]	; (80007d8 <MGPIO_enSetPinDirection+0x1a8>)
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	7979      	ldrb	r1, [r7, #5]
 80006bc:	79ba      	ldrb	r2, [r7, #6]
 80006be:	0092      	lsls	r2, r2, #2
 80006c0:	fa01 f202 	lsl.w	r2, r1, r2
 80006c4:	4611      	mov	r1, r2
 80006c6:	4a44      	ldr	r2, [pc, #272]	; (80007d8 <MGPIO_enSetPinDirection+0x1a8>)
 80006c8:	430b      	orrs	r3, r1
 80006ca:	6053      	str	r3, [r2, #4]
		break;
 80006cc:	e07d      	b.n	80007ca <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 80006ce:	2300      	movs	r3, #0
 80006d0:	73fb      	strb	r3, [r7, #15]
		break;
 80006d2:	e07a      	b.n	80007ca <MGPIO_enSetPinDirection+0x19a>

	case PORTB:
		if (copy_u8pin < GPIO_CRL_MAX)
 80006d4:	79bb      	ldrb	r3, [r7, #6]
 80006d6:	2b07      	cmp	r3, #7
 80006d8:	d817      	bhi.n	800070a <MGPIO_enSetPinDirection+0xda>
		{
			GPIOB->GPIO_CRL &= ~(GPIO_MASK) << (copy_u8pin * GPIO_OFFSET) ;
 80006da:	4b40      	ldr	r3, [pc, #256]	; (80007dc <MGPIO_enSetPinDirection+0x1ac>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	79ba      	ldrb	r2, [r7, #6]
 80006e0:	0092      	lsls	r2, r2, #2
 80006e2:	f06f 010f 	mvn.w	r1, #15
 80006e6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ea:	4611      	mov	r1, r2
 80006ec:	4a3b      	ldr	r2, [pc, #236]	; (80007dc <MGPIO_enSetPinDirection+0x1ac>)
 80006ee:	400b      	ands	r3, r1
 80006f0:	6013      	str	r3, [r2, #0]
			GPIOB->GPIO_CRL |= (copy_u8Mode << (copy_u8pin * GPIO_OFFSET)) ;
 80006f2:	4b3a      	ldr	r3, [pc, #232]	; (80007dc <MGPIO_enSetPinDirection+0x1ac>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	7979      	ldrb	r1, [r7, #5]
 80006f8:	79ba      	ldrb	r2, [r7, #6]
 80006fa:	0092      	lsls	r2, r2, #2
 80006fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000700:	4611      	mov	r1, r2
 8000702:	4a36      	ldr	r2, [pc, #216]	; (80007dc <MGPIO_enSetPinDirection+0x1ac>)
 8000704:	430b      	orrs	r3, r1
 8000706:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000708:	e05f      	b.n	80007ca <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < GPIO_CRH_MAX)
 800070a:	79bb      	ldrb	r3, [r7, #6]
 800070c:	2b0f      	cmp	r3, #15
 800070e:	d81a      	bhi.n	8000746 <MGPIO_enSetPinDirection+0x116>
			copy_u8pin -= GPIO_CRL_MAX ;
 8000710:	79bb      	ldrb	r3, [r7, #6]
 8000712:	3b08      	subs	r3, #8
 8000714:	71bb      	strb	r3, [r7, #6]
			GPIOB->GPIO_CRH &= ~(GPIO_MASK) << (copy_u8pin * GPIO_OFFSET) ;
 8000716:	4b31      	ldr	r3, [pc, #196]	; (80007dc <MGPIO_enSetPinDirection+0x1ac>)
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	79ba      	ldrb	r2, [r7, #6]
 800071c:	0092      	lsls	r2, r2, #2
 800071e:	f06f 010f 	mvn.w	r1, #15
 8000722:	fa01 f202 	lsl.w	r2, r1, r2
 8000726:	4611      	mov	r1, r2
 8000728:	4a2c      	ldr	r2, [pc, #176]	; (80007dc <MGPIO_enSetPinDirection+0x1ac>)
 800072a:	400b      	ands	r3, r1
 800072c:	6053      	str	r3, [r2, #4]
			GPIOB->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * GPIO_OFFSET)) ;
 800072e:	4b2b      	ldr	r3, [pc, #172]	; (80007dc <MGPIO_enSetPinDirection+0x1ac>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	7979      	ldrb	r1, [r7, #5]
 8000734:	79ba      	ldrb	r2, [r7, #6]
 8000736:	0092      	lsls	r2, r2, #2
 8000738:	fa01 f202 	lsl.w	r2, r1, r2
 800073c:	4611      	mov	r1, r2
 800073e:	4a27      	ldr	r2, [pc, #156]	; (80007dc <MGPIO_enSetPinDirection+0x1ac>)
 8000740:	430b      	orrs	r3, r1
 8000742:	6053      	str	r3, [r2, #4]
		break;
 8000744:	e041      	b.n	80007ca <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 8000746:	2300      	movs	r3, #0
 8000748:	73fb      	strb	r3, [r7, #15]
		break;
 800074a:	e03e      	b.n	80007ca <MGPIO_enSetPinDirection+0x19a>

	case PORTC:
		if (copy_u8pin < GPIO_CRL_MAX)
 800074c:	79bb      	ldrb	r3, [r7, #6]
 800074e:	2b07      	cmp	r3, #7
 8000750:	d817      	bhi.n	8000782 <MGPIO_enSetPinDirection+0x152>
		{
			GPIOC->GPIO_CRL &= ~(GPIO_MASK << (copy_u8pin * GPIO_OFFSET)) ;
 8000752:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <MGPIO_enSetPinDirection+0x1b0>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	79ba      	ldrb	r2, [r7, #6]
 8000758:	0092      	lsls	r2, r2, #2
 800075a:	210f      	movs	r1, #15
 800075c:	fa01 f202 	lsl.w	r2, r1, r2
 8000760:	43d2      	mvns	r2, r2
 8000762:	4611      	mov	r1, r2
 8000764:	4a1e      	ldr	r2, [pc, #120]	; (80007e0 <MGPIO_enSetPinDirection+0x1b0>)
 8000766:	400b      	ands	r3, r1
 8000768:	6013      	str	r3, [r2, #0]
			GPIOC->GPIO_CRL |= (copy_u8Mode << (copy_u8pin * GPIO_OFFSET)) ;
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <MGPIO_enSetPinDirection+0x1b0>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	7979      	ldrb	r1, [r7, #5]
 8000770:	79ba      	ldrb	r2, [r7, #6]
 8000772:	0092      	lsls	r2, r2, #2
 8000774:	fa01 f202 	lsl.w	r2, r1, r2
 8000778:	4611      	mov	r1, r2
 800077a:	4a19      	ldr	r2, [pc, #100]	; (80007e0 <MGPIO_enSetPinDirection+0x1b0>)
 800077c:	430b      	orrs	r3, r1
 800077e:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000780:	e023      	b.n	80007ca <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < GPIO_CRH_MAX)
 8000782:	79bb      	ldrb	r3, [r7, #6]
 8000784:	2b0f      	cmp	r3, #15
 8000786:	d81a      	bhi.n	80007be <MGPIO_enSetPinDirection+0x18e>
			copy_u8pin -= GPIO_CRL_MAX ;
 8000788:	79bb      	ldrb	r3, [r7, #6]
 800078a:	3b08      	subs	r3, #8
 800078c:	71bb      	strb	r3, [r7, #6]
			GPIOC->GPIO_CRH &= ~(GPIO_MASK) << (copy_u8pin * GPIO_OFFSET) ;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MGPIO_enSetPinDirection+0x1b0>)
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	79ba      	ldrb	r2, [r7, #6]
 8000794:	0092      	lsls	r2, r2, #2
 8000796:	f06f 010f 	mvn.w	r1, #15
 800079a:	fa01 f202 	lsl.w	r2, r1, r2
 800079e:	4611      	mov	r1, r2
 80007a0:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <MGPIO_enSetPinDirection+0x1b0>)
 80007a2:	400b      	ands	r3, r1
 80007a4:	6053      	str	r3, [r2, #4]
			GPIOC->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * GPIO_OFFSET)) ;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MGPIO_enSetPinDirection+0x1b0>)
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	7979      	ldrb	r1, [r7, #5]
 80007ac:	79ba      	ldrb	r2, [r7, #6]
 80007ae:	0092      	lsls	r2, r2, #2
 80007b0:	fa01 f202 	lsl.w	r2, r1, r2
 80007b4:	4611      	mov	r1, r2
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <MGPIO_enSetPinDirection+0x1b0>)
 80007b8:	430b      	orrs	r3, r1
 80007ba:	6053      	str	r3, [r2, #4]
		break;
 80007bc:	e005      	b.n	80007ca <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 80007be:	2300      	movs	r3, #0
 80007c0:	73fb      	strb	r3, [r7, #15]
		break;
 80007c2:	e002      	b.n	80007ca <MGPIO_enSetPinDirection+0x19a>

	default:
		local_state = OUT_OF_RANG_ERR;
 80007c4:	2300      	movs	r3, #0
 80007c6:	73fb      	strb	r3, [r7, #15]
		break;
 80007c8:	bf00      	nop
	}
	return local_state;
 80007ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40010800 	.word	0x40010800
 80007dc:	40010c00 	.word	0x40010c00
 80007e0:	40011000 	.word	0x40011000

080007e4 <MGPIO_enSetPinValue>:

ErrorState_t MGPIO_enSetPinValue(PORT_t copy_u8port, PIN_t copy_u8pin, VALUE_t copy_u8Value)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
 80007ee:	460b      	mov	r3, r1
 80007f0:	71bb      	strb	r3, [r7, #6]
 80007f2:	4613      	mov	r3, r2
 80007f4:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 80007f6:	2302      	movs	r3, #2
 80007f8:	73fb      	strb	r3, [r7, #15]
	switch(copy_u8port)
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b03      	cmp	r3, #3
 80007fe:	d046      	beq.n	800088e <MGPIO_enSetPinValue+0xaa>
 8000800:	2b03      	cmp	r3, #3
 8000802:	dc64      	bgt.n	80008ce <MGPIO_enSetPinValue+0xea>
 8000804:	2b01      	cmp	r3, #1
 8000806:	d002      	beq.n	800080e <MGPIO_enSetPinValue+0x2a>
 8000808:	2b02      	cmp	r3, #2
 800080a:	d020      	beq.n	800084e <MGPIO_enSetPinValue+0x6a>
 800080c:	e05f      	b.n	80008ce <MGPIO_enSetPinValue+0xea>
	{
	case PORTA:
		if (copy_u8Value == HIGH)
 800080e:	797b      	ldrb	r3, [r7, #5]
 8000810:	2b01      	cmp	r3, #1
 8000812:	d10a      	bne.n	800082a <MGPIO_enSetPinValue+0x46>
		{
			SET_BIT(GPIOA->GPIO_ODR, copy_u8pin);
 8000814:	4b32      	ldr	r3, [pc, #200]	; (80008e0 <MGPIO_enSetPinValue+0xfc>)
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	79ba      	ldrb	r2, [r7, #6]
 800081a:	2101      	movs	r1, #1
 800081c:	fa01 f202 	lsl.w	r2, r1, r2
 8000820:	4611      	mov	r1, r2
 8000822:	4a2f      	ldr	r2, [pc, #188]	; (80008e0 <MGPIO_enSetPinValue+0xfc>)
 8000824:	430b      	orrs	r3, r1
 8000826:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000828:	e054      	b.n	80008d4 <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 800082a:	797b      	ldrb	r3, [r7, #5]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d10b      	bne.n	8000848 <MGPIO_enSetPinValue+0x64>
			CLR_BIT(GPIOA->GPIO_ODR, copy_u8pin);
 8000830:	4b2b      	ldr	r3, [pc, #172]	; (80008e0 <MGPIO_enSetPinValue+0xfc>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	79ba      	ldrb	r2, [r7, #6]
 8000836:	2101      	movs	r1, #1
 8000838:	fa01 f202 	lsl.w	r2, r1, r2
 800083c:	43d2      	mvns	r2, r2
 800083e:	4611      	mov	r1, r2
 8000840:	4a27      	ldr	r2, [pc, #156]	; (80008e0 <MGPIO_enSetPinValue+0xfc>)
 8000842:	400b      	ands	r3, r1
 8000844:	60d3      	str	r3, [r2, #12]
		break;
 8000846:	e045      	b.n	80008d4 <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 8000848:	2300      	movs	r3, #0
 800084a:	73fb      	strb	r3, [r7, #15]
		break;
 800084c:	e042      	b.n	80008d4 <MGPIO_enSetPinValue+0xf0>

	case PORTB:
		if (copy_u8Value == HIGH)
 800084e:	797b      	ldrb	r3, [r7, #5]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d10a      	bne.n	800086a <MGPIO_enSetPinValue+0x86>
		{
			SET_BIT(GPIOB->GPIO_ODR, copy_u8pin);
 8000854:	4b23      	ldr	r3, [pc, #140]	; (80008e4 <MGPIO_enSetPinValue+0x100>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	79ba      	ldrb	r2, [r7, #6]
 800085a:	2101      	movs	r1, #1
 800085c:	fa01 f202 	lsl.w	r2, r1, r2
 8000860:	4611      	mov	r1, r2
 8000862:	4a20      	ldr	r2, [pc, #128]	; (80008e4 <MGPIO_enSetPinValue+0x100>)
 8000864:	430b      	orrs	r3, r1
 8000866:	60d3      	str	r3, [r2, #12]
		else
		{
			local_state = OUT_OF_RANG_ERR;

		}
		break;
 8000868:	e034      	b.n	80008d4 <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 800086a:	797b      	ldrb	r3, [r7, #5]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d10b      	bne.n	8000888 <MGPIO_enSetPinValue+0xa4>
			CLR_BIT(GPIOB->GPIO_ODR, copy_u8pin);
 8000870:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <MGPIO_enSetPinValue+0x100>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	79ba      	ldrb	r2, [r7, #6]
 8000876:	2101      	movs	r1, #1
 8000878:	fa01 f202 	lsl.w	r2, r1, r2
 800087c:	43d2      	mvns	r2, r2
 800087e:	4611      	mov	r1, r2
 8000880:	4a18      	ldr	r2, [pc, #96]	; (80008e4 <MGPIO_enSetPinValue+0x100>)
 8000882:	400b      	ands	r3, r1
 8000884:	60d3      	str	r3, [r2, #12]
		break;
 8000886:	e025      	b.n	80008d4 <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 8000888:	2300      	movs	r3, #0
 800088a:	73fb      	strb	r3, [r7, #15]
		break;
 800088c:	e022      	b.n	80008d4 <MGPIO_enSetPinValue+0xf0>

	case PORTC:
		if (copy_u8Value == HIGH)
 800088e:	797b      	ldrb	r3, [r7, #5]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d10a      	bne.n	80008aa <MGPIO_enSetPinValue+0xc6>
		{
			SET_BIT(GPIOC->GPIO_ODR, copy_u8pin);
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MGPIO_enSetPinValue+0x104>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	79ba      	ldrb	r2, [r7, #6]
 800089a:	2101      	movs	r1, #1
 800089c:	fa01 f202 	lsl.w	r2, r1, r2
 80008a0:	4611      	mov	r1, r2
 80008a2:	4a11      	ldr	r2, [pc, #68]	; (80008e8 <MGPIO_enSetPinValue+0x104>)
 80008a4:	430b      	orrs	r3, r1
 80008a6:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 80008a8:	e014      	b.n	80008d4 <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 80008aa:	797b      	ldrb	r3, [r7, #5]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d10b      	bne.n	80008c8 <MGPIO_enSetPinValue+0xe4>
			CLR_BIT(GPIOC->GPIO_ODR, copy_u8pin);
 80008b0:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <MGPIO_enSetPinValue+0x104>)
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	79ba      	ldrb	r2, [r7, #6]
 80008b6:	2101      	movs	r1, #1
 80008b8:	fa01 f202 	lsl.w	r2, r1, r2
 80008bc:	43d2      	mvns	r2, r2
 80008be:	4611      	mov	r1, r2
 80008c0:	4a09      	ldr	r2, [pc, #36]	; (80008e8 <MGPIO_enSetPinValue+0x104>)
 80008c2:	400b      	ands	r3, r1
 80008c4:	60d3      	str	r3, [r2, #12]
		break;
 80008c6:	e005      	b.n	80008d4 <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 80008c8:	2300      	movs	r3, #0
 80008ca:	73fb      	strb	r3, [r7, #15]
		break;
 80008cc:	e002      	b.n	80008d4 <MGPIO_enSetPinValue+0xf0>

	default:
		local_state = OUT_OF_RANG_ERR;
 80008ce:	2300      	movs	r3, #0
 80008d0:	73fb      	strb	r3, [r7, #15]
		break;
 80008d2:	bf00      	nop
	}
	return local_state;
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3714      	adds	r7, #20
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	40010800 	.word	0x40010800
 80008e4:	40010c00 	.word	0x40010c00
 80008e8:	40011000 	.word	0x40011000

080008ec <MGPIO_enSetPortDirection>:

	return local_state;
}

ErrorState_t MGPIO_enSetPortDirection(GPIO_ID_t copy_u8CRID,PORT_t copy_u8port,  MODE_t copy_u8Mode)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
 80008f6:	460b      	mov	r3, r1
 80008f8:	71bb      	strb	r3, [r7, #6]
 80008fa:	4613      	mov	r3, r2
 80008fc:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 80008fe:	2302      	movs	r3, #2
 8000900:	73fb      	strb	r3, [r7, #15]
	switch(copy_u8port)
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	2b03      	cmp	r3, #3
 8000906:	d038      	beq.n	800097a <MGPIO_enSetPortDirection+0x8e>
 8000908:	2b03      	cmp	r3, #3
 800090a:	dc4f      	bgt.n	80009ac <MGPIO_enSetPortDirection+0xc0>
 800090c:	2b01      	cmp	r3, #1
 800090e:	d002      	beq.n	8000916 <MGPIO_enSetPortDirection+0x2a>
 8000910:	2b02      	cmp	r3, #2
 8000912:	d019      	beq.n	8000948 <MGPIO_enSetPortDirection+0x5c>
 8000914:	e04a      	b.n	80009ac <MGPIO_enSetPortDirection+0xc0>
	{
	case PORTA:
		if(copy_u8CRID == GPIO_CRL_ID)
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d107      	bne.n	800092c <MGPIO_enSetPortDirection+0x40>
		{
			GPIOA->GPIO_CRL = copy_u8Mode * PORT_OFFSET ;
 800091c:	797b      	ldrb	r3, [r7, #5]
 800091e:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8000922:	fb02 f203 	mul.w	r2, r2, r3
 8000926:	4b25      	ldr	r3, [pc, #148]	; (80009bc <MGPIO_enSetPortDirection+0xd0>)
 8000928:	601a      	str	r2, [r3, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 800092a:	e041      	b.n	80009b0 <MGPIO_enSetPortDirection+0xc4>
		else if(copy_u8CRID == GPIO_CRH_ID)
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d107      	bne.n	8000942 <MGPIO_enSetPortDirection+0x56>
			GPIOA->GPIO_CRH = copy_u8Mode * PORT_OFFSET ;
 8000932:	797b      	ldrb	r3, [r7, #5]
 8000934:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8000938:	fb02 f203 	mul.w	r2, r2, r3
 800093c:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <MGPIO_enSetPortDirection+0xd0>)
 800093e:	605a      	str	r2, [r3, #4]
		break;
 8000940:	e036      	b.n	80009b0 <MGPIO_enSetPortDirection+0xc4>
			local_state = OUT_OF_RANG_ERR;
 8000942:	2300      	movs	r3, #0
 8000944:	73fb      	strb	r3, [r7, #15]
		break;
 8000946:	e033      	b.n	80009b0 <MGPIO_enSetPortDirection+0xc4>


	case PORTB:
		if(copy_u8CRID == GPIO_CRL_ID)
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d107      	bne.n	800095e <MGPIO_enSetPortDirection+0x72>
		{
			GPIOB->GPIO_CRL = copy_u8Mode * PORT_OFFSET ;
 800094e:	797b      	ldrb	r3, [r7, #5]
 8000950:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8000954:	fb02 f203 	mul.w	r2, r2, r3
 8000958:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <MGPIO_enSetPortDirection+0xd4>)
 800095a:	601a      	str	r2, [r3, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 800095c:	e028      	b.n	80009b0 <MGPIO_enSetPortDirection+0xc4>
		else if(copy_u8CRID == GPIO_CRH_ID)
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d107      	bne.n	8000974 <MGPIO_enSetPortDirection+0x88>
			GPIOB->GPIO_CRH = copy_u8Mode * PORT_OFFSET ;
 8000964:	797b      	ldrb	r3, [r7, #5]
 8000966:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800096a:	fb02 f203 	mul.w	r2, r2, r3
 800096e:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MGPIO_enSetPortDirection+0xd4>)
 8000970:	605a      	str	r2, [r3, #4]
		break;
 8000972:	e01d      	b.n	80009b0 <MGPIO_enSetPortDirection+0xc4>
			local_state = OUT_OF_RANG_ERR;
 8000974:	2300      	movs	r3, #0
 8000976:	73fb      	strb	r3, [r7, #15]
		break;
 8000978:	e01a      	b.n	80009b0 <MGPIO_enSetPortDirection+0xc4>

	case PORTC:
		if(copy_u8CRID == GPIO_CRL_ID)
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d107      	bne.n	8000990 <MGPIO_enSetPortDirection+0xa4>
		{
			GPIOC->GPIO_CRL = copy_u8Mode * PORT_OFFSET ;
 8000980:	797b      	ldrb	r3, [r7, #5]
 8000982:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8000986:	fb02 f203 	mul.w	r2, r2, r3
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MGPIO_enSetPortDirection+0xd8>)
 800098c:	601a      	str	r2, [r3, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 800098e:	e00f      	b.n	80009b0 <MGPIO_enSetPortDirection+0xc4>
		else if(copy_u8CRID == GPIO_CRH_ID)
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d107      	bne.n	80009a6 <MGPIO_enSetPortDirection+0xba>
			GPIOC->GPIO_CRH = copy_u8Mode * PORT_OFFSET ;
 8000996:	797b      	ldrb	r3, [r7, #5]
 8000998:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800099c:	fb02 f203 	mul.w	r2, r2, r3
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MGPIO_enSetPortDirection+0xd8>)
 80009a2:	605a      	str	r2, [r3, #4]
		break;
 80009a4:	e004      	b.n	80009b0 <MGPIO_enSetPortDirection+0xc4>
			local_state = OUT_OF_RANG_ERR;
 80009a6:	2300      	movs	r3, #0
 80009a8:	73fb      	strb	r3, [r7, #15]
		break;
 80009aa:	e001      	b.n	80009b0 <MGPIO_enSetPortDirection+0xc4>

	default:
		local_state = OUT_OF_RANG_ERR;
 80009ac:	2300      	movs	r3, #0
 80009ae:	73fb      	strb	r3, [r7, #15]
	}

	return local_state;
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr
 80009bc:	40010800 	.word	0x40010800
 80009c0:	40010c00 	.word	0x40010c00
 80009c4:	40011000 	.word	0x40011000

080009c8 <MGPIO_enSetPortValue>:

ErrorState_t MGPIO_enSetPortValue(GPIO_ID_t copy_u8CRID, PORT_t copy_u8port, VALUE_t copy_u8Value)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
 80009d2:	460b      	mov	r3, r1
 80009d4:	71bb      	strb	r3, [r7, #6]
 80009d6:	4613      	mov	r3, r2
 80009d8:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 80009da:	2302      	movs	r3, #2
 80009dc:	73fb      	strb	r3, [r7, #15]

	switch(copy_u8port)
 80009de:	79bb      	ldrb	r3, [r7, #6]
 80009e0:	2b03      	cmp	r3, #3
 80009e2:	f000 8088 	beq.w	8000af6 <MGPIO_enSetPortValue+0x12e>
 80009e6:	2b03      	cmp	r3, #3
 80009e8:	f300 80c5 	bgt.w	8000b76 <MGPIO_enSetPortValue+0x1ae>
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d002      	beq.n	80009f6 <MGPIO_enSetPortValue+0x2e>
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d040      	beq.n	8000a76 <MGPIO_enSetPortValue+0xae>
 80009f4:	e0bf      	b.n	8000b76 <MGPIO_enSetPortValue+0x1ae>
	{
	case PORTA:
		if ((copy_u8Value == HIGH) && (copy_u8CRID == GPIO_CRL_ID))
 80009f6:	797b      	ldrb	r3, [r7, #5]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d109      	bne.n	8000a10 <MGPIO_enSetPortValue+0x48>
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d106      	bne.n	8000a10 <MGPIO_enSetPortValue+0x48>
		{
			GPIOA->GPIO_ODR |= PORT_LVALUE;
 8000a02:	4b61      	ldr	r3, [pc, #388]	; (8000b88 <MGPIO_enSetPortValue+0x1c0>)
 8000a04:	68db      	ldr	r3, [r3, #12]
 8000a06:	4a60      	ldr	r2, [pc, #384]	; (8000b88 <MGPIO_enSetPortValue+0x1c0>)
 8000a08:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000a0c:	60d3      	str	r3, [r2, #12]
 8000a0e:	e031      	b.n	8000a74 <MGPIO_enSetPortValue+0xac>
		}
		else if ((copy_u8Value == HIGH) && (copy_u8CRID == GPIO_CRH_ID))
 8000a10:	797b      	ldrb	r3, [r7, #5]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d109      	bne.n	8000a2a <MGPIO_enSetPortValue+0x62>
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d106      	bne.n	8000a2a <MGPIO_enSetPortValue+0x62>
		{
			GPIOA->GPIO_ODR |= PORT_HVALUE;
 8000a1c:	4b5a      	ldr	r3, [pc, #360]	; (8000b88 <MGPIO_enSetPortValue+0x1c0>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	4a59      	ldr	r2, [pc, #356]	; (8000b88 <MGPIO_enSetPortValue+0x1c0>)
 8000a22:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8000a26:	60d3      	str	r3, [r2, #12]
 8000a28:	e024      	b.n	8000a74 <MGPIO_enSetPortValue+0xac>
		}
		else if ((copy_u8Value == LOW) && (copy_u8CRID == GPIO_CRL_ID))
 8000a2a:	797b      	ldrb	r3, [r7, #5]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d10d      	bne.n	8000a4c <MGPIO_enSetPortValue+0x84>
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d10a      	bne.n	8000a4c <MGPIO_enSetPortValue+0x84>
		{
			GPIOA->GPIO_ODR &= ~(PORT_LVALUE);
 8000a36:	4b54      	ldr	r3, [pc, #336]	; (8000b88 <MGPIO_enSetPortValue+0x1c0>)
 8000a38:	68db      	ldr	r3, [r3, #12]
 8000a3a:	4a53      	ldr	r2, [pc, #332]	; (8000b88 <MGPIO_enSetPortValue+0x1c0>)
 8000a3c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000a40:	60d3      	str	r3, [r2, #12]
			GPIOA->GPIO_ODR |= PORT_RESET;
 8000a42:	4b51      	ldr	r3, [pc, #324]	; (8000b88 <MGPIO_enSetPortValue+0x1c0>)
 8000a44:	4a50      	ldr	r2, [pc, #320]	; (8000b88 <MGPIO_enSetPortValue+0x1c0>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	60d3      	str	r3, [r2, #12]
 8000a4a:	e013      	b.n	8000a74 <MGPIO_enSetPortValue+0xac>
		}
		else if ((copy_u8Value == LOW) && (copy_u8CRID == GPIO_CRH_ID))
 8000a4c:	797b      	ldrb	r3, [r7, #5]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d10d      	bne.n	8000a6e <MGPIO_enSetPortValue+0xa6>
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d10a      	bne.n	8000a6e <MGPIO_enSetPortValue+0xa6>
		{
			GPIOA->GPIO_ODR &= ~(PORT_HVALUE);
 8000a58:	4b4b      	ldr	r3, [pc, #300]	; (8000b88 <MGPIO_enSetPortValue+0x1c0>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	4a4a      	ldr	r2, [pc, #296]	; (8000b88 <MGPIO_enSetPortValue+0x1c0>)
 8000a5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000a62:	60d3      	str	r3, [r2, #12]
			GPIOA->GPIO_ODR |= PORT_RESET;
 8000a64:	4b48      	ldr	r3, [pc, #288]	; (8000b88 <MGPIO_enSetPortValue+0x1c0>)
 8000a66:	4a48      	ldr	r2, [pc, #288]	; (8000b88 <MGPIO_enSetPortValue+0x1c0>)
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	60d3      	str	r3, [r2, #12]
 8000a6c:	e002      	b.n	8000a74 <MGPIO_enSetPortValue+0xac>
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	73fb      	strb	r3, [r7, #15]
		}
		break;
 8000a72:	e083      	b.n	8000b7c <MGPIO_enSetPortValue+0x1b4>
 8000a74:	e082      	b.n	8000b7c <MGPIO_enSetPortValue+0x1b4>

	case PORTB:
		if ((copy_u8Value == HIGH) && (copy_u8CRID == GPIO_CRL_ID))
 8000a76:	797b      	ldrb	r3, [r7, #5]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d109      	bne.n	8000a90 <MGPIO_enSetPortValue+0xc8>
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d106      	bne.n	8000a90 <MGPIO_enSetPortValue+0xc8>
		{
			GPIOB->GPIO_ODR |= PORT_LVALUE;
 8000a82:	4b42      	ldr	r3, [pc, #264]	; (8000b8c <MGPIO_enSetPortValue+0x1c4>)
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	4a41      	ldr	r2, [pc, #260]	; (8000b8c <MGPIO_enSetPortValue+0x1c4>)
 8000a88:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000a8c:	60d3      	str	r3, [r2, #12]
 8000a8e:	e031      	b.n	8000af4 <MGPIO_enSetPortValue+0x12c>
		}
		else if ((copy_u8Value == HIGH) && (copy_u8CRID == GPIO_CRH_ID))
 8000a90:	797b      	ldrb	r3, [r7, #5]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d109      	bne.n	8000aaa <MGPIO_enSetPortValue+0xe2>
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d106      	bne.n	8000aaa <MGPIO_enSetPortValue+0xe2>
		{
			GPIOB->GPIO_ODR |= PORT_HVALUE;
 8000a9c:	4b3b      	ldr	r3, [pc, #236]	; (8000b8c <MGPIO_enSetPortValue+0x1c4>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	4a3a      	ldr	r2, [pc, #232]	; (8000b8c <MGPIO_enSetPortValue+0x1c4>)
 8000aa2:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8000aa6:	60d3      	str	r3, [r2, #12]
 8000aa8:	e024      	b.n	8000af4 <MGPIO_enSetPortValue+0x12c>
		}
		else if ((copy_u8Value == LOW) && (copy_u8CRID == GPIO_CRL_ID))
 8000aaa:	797b      	ldrb	r3, [r7, #5]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d10d      	bne.n	8000acc <MGPIO_enSetPortValue+0x104>
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d10a      	bne.n	8000acc <MGPIO_enSetPortValue+0x104>
		{
			GPIOB->GPIO_ODR &= ~(PORT_LVALUE);
 8000ab6:	4b35      	ldr	r3, [pc, #212]	; (8000b8c <MGPIO_enSetPortValue+0x1c4>)
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	4a34      	ldr	r2, [pc, #208]	; (8000b8c <MGPIO_enSetPortValue+0x1c4>)
 8000abc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000ac0:	60d3      	str	r3, [r2, #12]
			GPIOB->GPIO_ODR |= PORT_RESET;
 8000ac2:	4b32      	ldr	r3, [pc, #200]	; (8000b8c <MGPIO_enSetPortValue+0x1c4>)
 8000ac4:	4a31      	ldr	r2, [pc, #196]	; (8000b8c <MGPIO_enSetPortValue+0x1c4>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	60d3      	str	r3, [r2, #12]
 8000aca:	e013      	b.n	8000af4 <MGPIO_enSetPortValue+0x12c>
		}
		else if ((copy_u8Value == LOW) && (copy_u8CRID == GPIO_CRH_ID))
 8000acc:	797b      	ldrb	r3, [r7, #5]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d10d      	bne.n	8000aee <MGPIO_enSetPortValue+0x126>
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d10a      	bne.n	8000aee <MGPIO_enSetPortValue+0x126>
		{
			GPIOB->GPIO_ODR &= ~(PORT_HVALUE);
 8000ad8:	4b2c      	ldr	r3, [pc, #176]	; (8000b8c <MGPIO_enSetPortValue+0x1c4>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	4a2b      	ldr	r2, [pc, #172]	; (8000b8c <MGPIO_enSetPortValue+0x1c4>)
 8000ade:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000ae2:	60d3      	str	r3, [r2, #12]
			GPIOB->GPIO_ODR |= PORT_RESET;
 8000ae4:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <MGPIO_enSetPortValue+0x1c4>)
 8000ae6:	4a29      	ldr	r2, [pc, #164]	; (8000b8c <MGPIO_enSetPortValue+0x1c4>)
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	60d3      	str	r3, [r2, #12]
 8000aec:	e002      	b.n	8000af4 <MGPIO_enSetPortValue+0x12c>
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
 8000aee:	2300      	movs	r3, #0
 8000af0:	73fb      	strb	r3, [r7, #15]
		}
		break;
 8000af2:	e043      	b.n	8000b7c <MGPIO_enSetPortValue+0x1b4>
 8000af4:	e042      	b.n	8000b7c <MGPIO_enSetPortValue+0x1b4>

	case PORTC:
		if ((copy_u8Value == HIGH) && (copy_u8CRID == GPIO_CRL_ID))
 8000af6:	797b      	ldrb	r3, [r7, #5]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d109      	bne.n	8000b10 <MGPIO_enSetPortValue+0x148>
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d106      	bne.n	8000b10 <MGPIO_enSetPortValue+0x148>
		{
			GPIOC->GPIO_ODR |= PORT_LVALUE;
 8000b02:	4b23      	ldr	r3, [pc, #140]	; (8000b90 <MGPIO_enSetPortValue+0x1c8>)
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	4a22      	ldr	r2, [pc, #136]	; (8000b90 <MGPIO_enSetPortValue+0x1c8>)
 8000b08:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000b0c:	60d3      	str	r3, [r2, #12]
 8000b0e:	e031      	b.n	8000b74 <MGPIO_enSetPortValue+0x1ac>
		}
		else if ((copy_u8Value == HIGH) && (copy_u8CRID == GPIO_CRH_ID))
 8000b10:	797b      	ldrb	r3, [r7, #5]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d109      	bne.n	8000b2a <MGPIO_enSetPortValue+0x162>
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d106      	bne.n	8000b2a <MGPIO_enSetPortValue+0x162>
		{
			GPIOC->GPIO_ODR |= PORT_HVALUE;
 8000b1c:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <MGPIO_enSetPortValue+0x1c8>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	4a1b      	ldr	r2, [pc, #108]	; (8000b90 <MGPIO_enSetPortValue+0x1c8>)
 8000b22:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8000b26:	60d3      	str	r3, [r2, #12]
 8000b28:	e024      	b.n	8000b74 <MGPIO_enSetPortValue+0x1ac>
		}
		else if ((copy_u8Value == LOW) && (copy_u8CRID == GPIO_CRL_ID))
 8000b2a:	797b      	ldrb	r3, [r7, #5]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d10d      	bne.n	8000b4c <MGPIO_enSetPortValue+0x184>
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d10a      	bne.n	8000b4c <MGPIO_enSetPortValue+0x184>
		{
			GPIOC->GPIO_ODR &= ~(PORT_LVALUE);
 8000b36:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <MGPIO_enSetPortValue+0x1c8>)
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	4a15      	ldr	r2, [pc, #84]	; (8000b90 <MGPIO_enSetPortValue+0x1c8>)
 8000b3c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000b40:	60d3      	str	r3, [r2, #12]
			GPIOC->GPIO_ODR |= PORT_RESET;
 8000b42:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <MGPIO_enSetPortValue+0x1c8>)
 8000b44:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <MGPIO_enSetPortValue+0x1c8>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	60d3      	str	r3, [r2, #12]
 8000b4a:	e013      	b.n	8000b74 <MGPIO_enSetPortValue+0x1ac>
		}
		else if ((copy_u8Value == LOW) && (copy_u8CRID == GPIO_CRH_ID))
 8000b4c:	797b      	ldrb	r3, [r7, #5]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d10d      	bne.n	8000b6e <MGPIO_enSetPortValue+0x1a6>
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d10a      	bne.n	8000b6e <MGPIO_enSetPortValue+0x1a6>
		{
			GPIOC->GPIO_ODR &= ~(PORT_HVALUE);
 8000b58:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <MGPIO_enSetPortValue+0x1c8>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	4a0c      	ldr	r2, [pc, #48]	; (8000b90 <MGPIO_enSetPortValue+0x1c8>)
 8000b5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000b62:	60d3      	str	r3, [r2, #12]
			GPIOC->GPIO_ODR |= PORT_RESET;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <MGPIO_enSetPortValue+0x1c8>)
 8000b66:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <MGPIO_enSetPortValue+0x1c8>)
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	60d3      	str	r3, [r2, #12]
 8000b6c:	e002      	b.n	8000b74 <MGPIO_enSetPortValue+0x1ac>
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	73fb      	strb	r3, [r7, #15]
		}
		break;
 8000b72:	e003      	b.n	8000b7c <MGPIO_enSetPortValue+0x1b4>
 8000b74:	e002      	b.n	8000b7c <MGPIO_enSetPortValue+0x1b4>

	default:
		local_state = OUT_OF_RANG_ERR;
 8000b76:	2300      	movs	r3, #0
 8000b78:	73fb      	strb	r3, [r7, #15]
		break;
 8000b7a:	bf00      	nop

	}
	return local_state;
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	40010800 	.word	0x40010800
 8000b8c:	40010c00 	.word	0x40010c00
 8000b90:	40011000 	.word	0x40011000

08000b94 <MNVIC_enEnableNVIC>:
#include "MNVIC_int.h"
#include "MNVIC_config.h"
#include "MNVIC_priv.h"

ErrorState_t MNVIC_enEnableNVIC(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
	SCB_AIRCR = NVIC_GROUPSUB_PRI;
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <MNVIC_enEnableNVIC+0x14>)
 8000b9a:	4a04      	ldr	r2, [pc, #16]	; (8000bac <MNVIC_enEnableNVIC+0x18>)
 8000b9c:	601a      	str	r2, [r3, #0]

	return SUCCESS;
 8000b9e:	2302      	movs	r3, #2
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	e000ed0c 	.word	0xe000ed0c
 8000bac:	05fa0500 	.word	0x05fa0500

08000bb0 <MNVIC_enEnableInt>:


ErrorState_t MNVIC_enEnableInt(VectorTable_t copy_u8IRQnum)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
	ErrorState_t  local_state = SUCCESS;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	73fb      	strb	r3, [r7, #15]

	if (copy_u8IRQnum <= 31)
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2b1f      	cmp	r3, #31
 8000bc2:	d805      	bhi.n	8000bd0 <MNVIC_enEnableInt+0x20>
	{
		NVIC->NVIC_ISER[0] = (1<<copy_u8IRQnum);
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	409a      	lsls	r2, r3
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <MNVIC_enEnableInt+0x48>)
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	e00d      	b.n	8000bec <MNVIC_enEnableInt+0x3c>
	}
	else if (copy_u8IRQnum <= 63)
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	2b3f      	cmp	r3, #63	; 0x3f
 8000bd4:	d808      	bhi.n	8000be8 <MNVIC_enEnableInt+0x38>
	{
		copy_u8IRQnum -= 32;
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	3b20      	subs	r3, #32
 8000bda:	71fb      	strb	r3, [r7, #7]
		NVIC->NVIC_ISER[1] = (1<<copy_u8IRQnum);
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	2201      	movs	r2, #1
 8000be0:	409a      	lsls	r2, r3
 8000be2:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <MNVIC_enEnableInt+0x48>)
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	e001      	b.n	8000bec <MNVIC_enEnableInt+0x3c>
	}
	else
	{
		local_state = OUT_OF_RANG_ERR;
 8000be8:	2300      	movs	r3, #0
 8000bea:	73fb      	strb	r3, [r7, #15]
	}
	return local_state;
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	e000e100 	.word	0xe000e100

08000bfc <MNVIC_enClrPendingFlag>:
	}
	return local_state;
}

ErrorState_t MNVIC_enClrPendingFlag(VectorTable_t copy_u8IRQnum)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
	ErrorState_t  local_state = SUCCESS;
 8000c06:	2302      	movs	r3, #2
 8000c08:	73fb      	strb	r3, [r7, #15]

	if (copy_u8IRQnum <= 31)
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	2b1f      	cmp	r3, #31
 8000c0e:	d806      	bhi.n	8000c1e <MNVIC_enClrPendingFlag+0x22>
	{
		NVIC->NVIC_ICPR[0] = (1<<copy_u8IRQnum);
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	2201      	movs	r2, #1
 8000c14:	409a      	lsls	r2, r3
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MNVIC_enClrPendingFlag+0x4c>)
 8000c18:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8000c1c:	e00e      	b.n	8000c3c <MNVIC_enClrPendingFlag+0x40>
	}
	else if (copy_u8IRQnum <= 63)
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2b3f      	cmp	r3, #63	; 0x3f
 8000c22:	d809      	bhi.n	8000c38 <MNVIC_enClrPendingFlag+0x3c>
	{
		copy_u8IRQnum -= 32;
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	3b20      	subs	r3, #32
 8000c28:	71fb      	strb	r3, [r7, #7]
		NVIC->NVIC_ICPR[1] = (1<<copy_u8IRQnum);
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	409a      	lsls	r2, r3
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <MNVIC_enClrPendingFlag+0x4c>)
 8000c32:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 8000c36:	e001      	b.n	8000c3c <MNVIC_enClrPendingFlag+0x40>
	}
	else
	{
		local_state = OUT_OF_RANG_ERR;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	73fb      	strb	r3, [r7, #15]
	}
	return local_state;
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	e000e100 	.word	0xe000e100

08000c4c <MNVIC_enSetPriority>:
	}
	return local_state;
}

ErrorState_t MNVIC_enSetPriority(VectorTable_t copy_u8IRQnum, u8 copy_u8Group, u8 copy_u8Sub)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
 8000c56:	460b      	mov	r3, r1
 8000c58:	71bb      	strb	r3, [r7, #6]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	73fb      	strb	r3, [r7, #15]

	if (copy_u8IRQnum < 81)
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	2b50      	cmp	r3, #80	; 0x50
 8000c66:	d83d      	bhi.n	8000ce4 <MNVIC_enSetPriority+0x98>
	{
		NVIC->NVIC_IPR[copy_u8IRQnum] &= NVIC_SETPRI_MASK;
 8000c68:	4a22      	ldr	r2, [pc, #136]	; (8000cf4 <MNVIC_enSetPriority+0xa8>)
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	491f      	ldr	r1, [pc, #124]	; (8000cf4 <MNVIC_enSetPriority+0xa8>)
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	f002 020f 	and.w	r2, r2, #15
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	440b      	add	r3, r1
 8000c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
		if (copy_u8Group <= 3 && copy_u8Sub <= 3)
 8000c84:	79bb      	ldrb	r3, [r7, #6]
 8000c86:	2b03      	cmp	r3, #3
 8000c88:	d829      	bhi.n	8000cde <MNVIC_enSetPriority+0x92>
 8000c8a:	797b      	ldrb	r3, [r7, #5]
 8000c8c:	2b03      	cmp	r3, #3
 8000c8e:	d826      	bhi.n	8000cde <MNVIC_enSetPriority+0x92>
		{
			NVIC->NVIC_IPR[copy_u8IRQnum] |= (copy_u8Sub << 4);
 8000c90:	4a18      	ldr	r2, [pc, #96]	; (8000cf4 <MNVIC_enSetPriority+0xa8>)
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	4413      	add	r3, r2
 8000c96:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	b25a      	sxtb	r2, r3
 8000c9e:	797b      	ldrb	r3, [r7, #5]
 8000ca0:	011b      	lsls	r3, r3, #4
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	b259      	sxtb	r1, r3
 8000ca8:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <MNVIC_enSetPriority+0xa8>)
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	b2c9      	uxtb	r1, r1
 8000cae:	4413      	add	r3, r2
 8000cb0:	460a      	mov	r2, r1
 8000cb2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
			NVIC->NVIC_IPR[copy_u8IRQnum] |= (copy_u8Group << 6);
 8000cb6:	4a0f      	ldr	r2, [pc, #60]	; (8000cf4 <MNVIC_enSetPriority+0xa8>)
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	4413      	add	r3, r2
 8000cbc:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	b25a      	sxtb	r2, r3
 8000cc4:	79bb      	ldrb	r3, [r7, #6]
 8000cc6:	019b      	lsls	r3, r3, #6
 8000cc8:	b25b      	sxtb	r3, r3
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	b259      	sxtb	r1, r3
 8000cce:	4a09      	ldr	r2, [pc, #36]	; (8000cf4 <MNVIC_enSetPriority+0xa8>)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	b2c9      	uxtb	r1, r1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	460a      	mov	r2, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8000cdc:	e004      	b.n	8000ce8 <MNVIC_enSetPriority+0x9c>
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	73fb      	strb	r3, [r7, #15]
 8000ce2:	e001      	b.n	8000ce8 <MNVIC_enSetPriority+0x9c>
		}
	}
	else
	{
		local_state = OUT_OF_RANG_ERR;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]
	}
	return local_state;
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr
 8000cf4:	e000e100 	.word	0xe000e100

08000cf8 <MRCC_enSysClkINIT>:
#include "MRCC_int.h"
#include "MRCC_config.h"
#include "MRCC_priv.h"

ErrorState_t MRCC_enSysClkINIT(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0


	/** CLK source is HSI **/
#elif(RCC_CLK_TYPE == RCC_HSI)
	/* 1. ENABLE the HSI */
	SET_BIT(RCC->RCC_CR, HSION);
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <MRCC_enSysClkINIT+0x74>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a1a      	ldr	r2, [pc, #104]	; (8000d6c <MRCC_enSysClkINIT+0x74>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	6013      	str	r3, [r2, #0]

	/* 2. wait till HSE is READY 'settling time finished', stable */
	while (!(GET_BIT(RCC->RCC_CR, HSIRDY)));
 8000d08:	bf00      	nop
 8000d0a:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <MRCC_enSysClkINIT+0x74>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	085b      	lsrs	r3, r3, #1
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d0f8      	beq.n	8000d0a <MRCC_enSysClkINIT+0x12>

	/* 3. Enable System switch clock with HSI */
	CLR_BIT(RCC->RCC_CFGR, SWC);
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <MRCC_enSysClkINIT+0x74>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	4a13      	ldr	r2, [pc, #76]	; (8000d6c <MRCC_enSysClkINIT+0x74>)
 8000d1e:	f023 0301 	bic.w	r3, r3, #1
 8000d22:	6053      	str	r3, [r2, #4]

#else
#error("WRONG CLK TYPE");
#endif
	/* MASK the AHB and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= RCC_AHB_MASK;
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MRCC_enSysClkINIT+0x74>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	4a10      	ldr	r2, [pc, #64]	; (8000d6c <MRCC_enSysClkINIT+0x74>)
 8000d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d2e:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= RCC_AHB_PRESCALER;
 8000d30:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <MRCC_enSysClkINIT+0x74>)
 8000d32:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <MRCC_enSysClkINIT+0x74>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	6053      	str	r3, [r2, #4]

	/* MASK the APB1 and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= RCC_APB1_MASK;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <MRCC_enSysClkINIT+0x74>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	4a0b      	ldr	r2, [pc, #44]	; (8000d6c <MRCC_enSysClkINIT+0x74>)
 8000d3e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d42:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= RCC_APB1_PRESCALER_MODE;
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MRCC_enSysClkINIT+0x74>)
 8000d46:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <MRCC_enSysClkINIT+0x74>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	6053      	str	r3, [r2, #4]

	/* MASK the APB2 and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= RCC_APB2_MASK;
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <MRCC_enSysClkINIT+0x74>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <MRCC_enSysClkINIT+0x74>)
 8000d52:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000d56:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= RCC_APB2_PRESCALER_MODE;
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <MRCC_enSysClkINIT+0x74>)
 8000d5a:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <MRCC_enSysClkINIT+0x74>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	6053      	str	r3, [r2, #4]
		RCC->RCC_CFGR &= RCC_MCO_MASK;
		RCC->RCC_CFGR |= RCC_MCO_MODE ;
	}
#endif

	return SUCCESS;
 8000d60:	2302      	movs	r3, #2
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	40021000 	.word	0x40021000

08000d70 <MRCC_enEnablePeripheralCLK>:

ErrorState_t MRCC_enEnablePeripheralCLK(peripheral_ID copy_u8Peripheral)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
	ErrorState_t local_state = SUCCESS;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	73fb      	strb	r3, [r7, #15]

	/* based on predefined Peripheral, switch to corresponding Register, and Enabled it*/
	if (copy_u8Peripheral <= 31)
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	2b1f      	cmp	r3, #31
 8000d82:	d80a      	bhi.n	8000d9a <MRCC_enEnablePeripheralCLK+0x2a>
		SET_BIT(RCC->RCC_AHBENR, copy_u8Peripheral);
 8000d84:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <MRCC_enEnablePeripheralCLK+0x80>)
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	79fa      	ldrb	r2, [r7, #7]
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d90:	4611      	mov	r1, r2
 8000d92:	4a17      	ldr	r2, [pc, #92]	; (8000df0 <MRCC_enEnablePeripheralCLK+0x80>)
 8000d94:	430b      	orrs	r3, r1
 8000d96:	6153      	str	r3, [r2, #20]
 8000d98:	e023      	b.n	8000de2 <MRCC_enEnablePeripheralCLK+0x72>

	else if (copy_u8Peripheral <= 63)
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	2b3f      	cmp	r3, #63	; 0x3f
 8000d9e:	d80d      	bhi.n	8000dbc <MRCC_enEnablePeripheralCLK+0x4c>
	{
		copy_u8Peripheral -= 32;
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	3b20      	subs	r3, #32
 8000da4:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->RCC_APB1ENR, copy_u8Peripheral);
 8000da6:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <MRCC_enEnablePeripheralCLK+0x80>)
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	79fa      	ldrb	r2, [r7, #7]
 8000dac:	2101      	movs	r1, #1
 8000dae:	fa01 f202 	lsl.w	r2, r1, r2
 8000db2:	4611      	mov	r1, r2
 8000db4:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <MRCC_enEnablePeripheralCLK+0x80>)
 8000db6:	430b      	orrs	r3, r1
 8000db8:	61d3      	str	r3, [r2, #28]
 8000dba:	e012      	b.n	8000de2 <MRCC_enEnablePeripheralCLK+0x72>
	}

	else if (copy_u8Peripheral <= 95)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	2b5f      	cmp	r3, #95	; 0x5f
 8000dc0:	d80d      	bhi.n	8000dde <MRCC_enEnablePeripheralCLK+0x6e>
	{
		copy_u8Peripheral -= 64;
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	3b40      	subs	r3, #64	; 0x40
 8000dc6:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->RCC_APB2ENR, copy_u8Peripheral);
 8000dc8:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <MRCC_enEnablePeripheralCLK+0x80>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	79fa      	ldrb	r2, [r7, #7]
 8000dce:	2101      	movs	r1, #1
 8000dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd4:	4611      	mov	r1, r2
 8000dd6:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <MRCC_enEnablePeripheralCLK+0x80>)
 8000dd8:	430b      	orrs	r3, r1
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	e001      	b.n	8000de2 <MRCC_enEnablePeripheralCLK+0x72>
	}

	else
	{
		local_state = OUT_OF_RANG_ERR;
 8000dde:	2300      	movs	r3, #0
 8000de0:	73fb      	strb	r3, [r7, #15]
	}
	return local_state;
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40021000 	.word	0x40021000

08000df4 <MSTK_enInit>:

void (*STK_Callback)(void) = NULL;
static u8 flag = 0;

ErrorState_t MSTK_enInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

#if (STK_PRESCALER == STK_AHB_PRESCALER)
	SET_BIT(STK->STK_CTRL, CLKSOURCE);

#elif(STK_PRESCALER == STK_AHB_DIV8_PRESCALER)
	CLR_BIT(STK->STK_CTRL, CLKSOURCE);
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <MSTK_enInit+0x1c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <MSTK_enInit+0x1c>)
 8000dfe:	f023 0304 	bic.w	r3, r3, #4
 8000e02:	6013      	str	r3, [r2, #0]

#else
#error ("YOU SELECTED THE WRONG PRESCALER");
#endif

	return SUCCESS;
 8000e04:	2302      	movs	r3, #2
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000e010 	.word	0xe000e010

08000e14 <MSTK_enDelayMS>:

ErrorState_t MSTK_enDelayMS(u32 copy_u16delayMS)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	STK->STK_LOAD = copy_u16delayMS ;
 8000e1c:	4a0f      	ldr	r2, [pc, #60]	; (8000e5c <MSTK_enDelayMS+0x48>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6053      	str	r3, [r2, #4]
	SET_BIT(STK->STK_CTRL, ENABLE);
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MSTK_enDelayMS+0x48>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a0d      	ldr	r2, [pc, #52]	; (8000e5c <MSTK_enDelayMS+0x48>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6013      	str	r3, [r2, #0]

	while (!(GET_BIT(STK->STK_CTRL, COUNTFLAG)));
 8000e2e:	bf00      	nop
 8000e30:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <MSTK_enDelayMS+0x48>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	0c1b      	lsrs	r3, r3, #16
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d0f8      	beq.n	8000e30 <MSTK_enDelayMS+0x1c>

	CLR_BIT(STK->STK_CTRL, ENABLE);
 8000e3e:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <MSTK_enDelayMS+0x48>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <MSTK_enDelayMS+0x48>)
 8000e44:	f023 0301 	bic.w	r3, r3, #1
 8000e48:	6013      	str	r3, [r2, #0]
	STK->STK_VAL = 0;
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <MSTK_enDelayMS+0x48>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]

	return SUCCESS;
 8000e50:	2302      	movs	r3, #2

}
 8000e52:	4618      	mov	r0, r3
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e010 	.word	0xe000e010

08000e60 <SysTick_Handler>:
}



void SysTick_Handler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
	volatile u8 local_temp = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	71fb      	strb	r3, [r7, #7]
	if (flag == 1)
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <SysTick_Handler+0x58>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d10e      	bne.n	8000e90 <SysTick_Handler+0x30>
	{
		CLR_BIT(STK->STK_CTRL, TICKINT);
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <SysTick_Handler+0x5c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a11      	ldr	r2, [pc, #68]	; (8000ebc <SysTick_Handler+0x5c>)
 8000e78:	f023 0302 	bic.w	r3, r3, #2
 8000e7c:	6013      	str	r3, [r2, #0]
		CLR_BIT(STK->STK_CTRL, ENABLE);
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <SysTick_Handler+0x5c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <SysTick_Handler+0x5c>)
 8000e84:	f023 0301 	bic.w	r3, r3, #1
 8000e88:	6013      	str	r3, [r2, #0]
		STK->STK_VAL = 0;
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <SysTick_Handler+0x5c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
	}

	if (STK_Callback != NULL)
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <SysTick_Handler+0x60>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d002      	beq.n	8000e9e <SysTick_Handler+0x3e>
	{
		STK_Callback();
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <SysTick_Handler+0x60>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4798      	blx	r3
	}

	local_temp = GET_BIT(STK->STK_CTRL,COUNTFLAG);
 8000e9e:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <SysTick_Handler+0x5c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	0c1b      	lsrs	r3, r3, #16
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	71fb      	strb	r3, [r7, #7]
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000090 	.word	0x20000090
 8000ebc:	e000e010 	.word	0xe000e010
 8000ec0:	2000008c 	.word	0x2000008c

08000ec4 <main>:
void speedUp(void);
void speedDown(void);
void stop(void);

int main(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
	PB_ST button1 = {PORTB, PIN0, PULL_UP};
 8000eca:	2302      	movs	r3, #2
 8000ecc:	743b      	strb	r3, [r7, #16]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	747b      	strb	r3, [r7, #17]
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	74bb      	strb	r3, [r7, #18]
	PB_ST button2 = {PORTB, PIN1, PULL_UP};
 8000ed6:	4a6d      	ldr	r2, [pc, #436]	; (800108c <main+0x1c8>)
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	6812      	ldr	r2, [r2, #0]
 8000ede:	4611      	mov	r1, r2
 8000ee0:	8019      	strh	r1, [r3, #0]
 8000ee2:	3302      	adds	r3, #2
 8000ee4:	0c12      	lsrs	r2, r2, #16
 8000ee6:	701a      	strb	r2, [r3, #0]
	PB_ST button3 = {PORTA, PIN9, PULL_UP};
 8000ee8:	4a69      	ldr	r2, [pc, #420]	; (8001090 <main+0x1cc>)
 8000eea:	f107 0308 	add.w	r3, r7, #8
 8000eee:	6812      	ldr	r2, [r2, #0]
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	8019      	strh	r1, [r3, #0]
 8000ef4:	3302      	adds	r3, #2
 8000ef6:	0c12      	lsrs	r2, r2, #16
 8000ef8:	701a      	strb	r2, [r3, #0]
	PB_ST button4 = {PORTA, PIN10, PULL_UP};
 8000efa:	4a66      	ldr	r2, [pc, #408]	; (8001094 <main+0x1d0>)
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	6812      	ldr	r2, [r2, #0]
 8000f00:	4611      	mov	r1, r2
 8000f02:	8019      	strh	r1, [r3, #0]
 8000f04:	3302      	adds	r3, #2
 8000f06:	0c12      	lsrs	r2, r2, #16
 8000f08:	701a      	strb	r2, [r3, #0]

	MRCC_enSysClkINIT();
 8000f0a:	f7ff fef5 	bl	8000cf8 <MRCC_enSysClkINIT>
	MRCC_enEnablePeripheralCLK(IOPA);
 8000f0e:	2042      	movs	r0, #66	; 0x42
 8000f10:	f7ff ff2e 	bl	8000d70 <MRCC_enEnablePeripheralCLK>
	MRCC_enEnablePeripheralCLK(IOPB);
 8000f14:	2043      	movs	r0, #67	; 0x43
 8000f16:	f7ff ff2b 	bl	8000d70 <MRCC_enEnablePeripheralCLK>
	MRCC_enEnablePeripheralCLK(MAFIO);
 8000f1a:	2040      	movs	r0, #64	; 0x40
 8000f1c:	f7ff ff28 	bl	8000d70 <MRCC_enEnablePeripheralCLK>


	HPB_enInit(&button1);
 8000f20:	f107 0310 	add.w	r3, r7, #16
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff f9a9 	bl	800027c <HPB_enInit>
	HPB_enInit(&button2);
 8000f2a:	f107 030c 	add.w	r3, r7, #12
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff f9a4 	bl	800027c <HPB_enInit>
	HPB_enInit(&button3);
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff f99f 	bl	800027c <HPB_enInit>
	HPB_enInit(&button4);
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff f99b 	bl	800027c <HPB_enInit>
	HLEDMRX_enInit();
 8000f46:	f7ff f913 	bl	8000170 <HLEDMRX_enInit>
	MAFIO_enSetEXTIConfig(EXTI0_LINE, AFIO_GPIOB);
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff f9bf 	bl	80002d0 <MAFIO_enSetEXTIConfig>
	MAFIO_enSetEXTIConfig(EXTI1_LINE, AFIO_GPIOB);
 8000f52:	2101      	movs	r1, #1
 8000f54:	2001      	movs	r0, #1
 8000f56:	f7ff f9bb 	bl	80002d0 <MAFIO_enSetEXTIConfig>


	MNVIC_enEnableNVIC();
 8000f5a:	f7ff fe1b 	bl	8000b94 <MNVIC_enEnableNVIC>
	MNVIC_enSetPriority(EXT0_INT, 0, 1);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2100      	movs	r1, #0
 8000f62:	2006      	movs	r0, #6
 8000f64:	f7ff fe72 	bl	8000c4c <MNVIC_enSetPriority>
	MNVIC_enSetPriority(EXT1_INT, 1, 1);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	2007      	movs	r0, #7
 8000f6e:	f7ff fe6d 	bl	8000c4c <MNVIC_enSetPriority>
	MNVIC_enSetPriority(EXT9_5INT, 2, 1);
 8000f72:	2201      	movs	r2, #1
 8000f74:	2102      	movs	r1, #2
 8000f76:	2017      	movs	r0, #23
 8000f78:	f7ff fe68 	bl	8000c4c <MNVIC_enSetPriority>
	MNVIC_enSetPriority(EXT15_10INT, 3, 1);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2103      	movs	r1, #3
 8000f80:	2028      	movs	r0, #40	; 0x28
 8000f82:	f7ff fe63 	bl	8000c4c <MNVIC_enSetPriority>

	MEXTI_enCallBack(EXTI0_LINE, start);
 8000f86:	4944      	ldr	r1, [pc, #272]	; (8001098 <main+0x1d4>)
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f7ff fa31 	bl	80003f0 <MEXTI_enCallBack>

	MNVIC_enEnableInt(EXT0_INT);
 8000f8e:	2006      	movs	r0, #6
 8000f90:	f7ff fe0e 	bl	8000bb0 <MNVIC_enEnableInt>
	MNVIC_enEnableInt(EXT1_INT);
 8000f94:	2007      	movs	r0, #7
 8000f96:	f7ff fe0b 	bl	8000bb0 <MNVIC_enEnableInt>
	MNVIC_enEnableInt(EXT9_5INT);
 8000f9a:	2017      	movs	r0, #23
 8000f9c:	f7ff fe08 	bl	8000bb0 <MNVIC_enEnableInt>
	MNVIC_enEnableInt(EXT15_10INT);
 8000fa0:	2028      	movs	r0, #40	; 0x28
 8000fa2:	f7ff fe05 	bl	8000bb0 <MNVIC_enEnableInt>

	MEXTI_enCallBack(EXTI1_LINE, stop);
 8000fa6:	493d      	ldr	r1, [pc, #244]	; (800109c <main+0x1d8>)
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f7ff fa21 	bl	80003f0 <MEXTI_enCallBack>
	MEXTI_enCallBack(EXTI9_LINE, start);
 8000fae:	493a      	ldr	r1, [pc, #232]	; (8001098 <main+0x1d4>)
 8000fb0:	2009      	movs	r0, #9
 8000fb2:	f7ff fa1d 	bl	80003f0 <MEXTI_enCallBack>
	MEXTI_enCallBack(EXTI10_LINE,speedDown);
 8000fb6:	493a      	ldr	r1, [pc, #232]	; (80010a0 <main+0x1dc>)
 8000fb8:	200a      	movs	r0, #10
 8000fba:	f7ff fa19 	bl	80003f0 <MEXTI_enCallBack>

	MEXTI_enInit();
 8000fbe:	f7ff f9e1 	bl	8000384 <MEXTI_enInit>
	MEXTI_enSetLatch(EXTI1_LINE, EXTI_FAILING_TRIG);
 8000fc2:	2102      	movs	r1, #2
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f7ff fa2f 	bl	8000428 <MEXTI_enSetLatch>
	MEXTI_enSetLatch(EXTI9_LINE, EXTI_FAILING_TRIG);
 8000fca:	2102      	movs	r1, #2
 8000fcc:	2009      	movs	r0, #9
 8000fce:	f7ff fa2b 	bl	8000428 <MEXTI_enSetLatch>
	MEXTI_enSetLatch(EXTI10_LINE, EXTI_FAILING_TRIG);
 8000fd2:	2102      	movs	r1, #2
 8000fd4:	200a      	movs	r0, #10
 8000fd6:	f7ff fa27 	bl	8000428 <MEXTI_enSetLatch>

	MEXTI_enEnable(EXTI1_LINE);
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f7ff f9e8 	bl	80003b0 <MEXTI_enEnable>
	MEXTI_enEnable(EXTI9_LINE);
 8000fe0:	2009      	movs	r0, #9
 8000fe2:	f7ff f9e5 	bl	80003b0 <MEXTI_enEnable>
	MEXTI_enEnable(EXTI10_LINE);
 8000fe6:	200a      	movs	r0, #10
 8000fe8:	f7ff f9e2 	bl	80003b0 <MEXTI_enEnable>

	MSTK_enInit();
 8000fec:	f7ff ff02 	bl	8000df4 <MSTK_enInit>

	while(1)
	{


		if (copy_u8Intflag == 1)
 8000ff0:	4b2c      	ldr	r3, [pc, #176]	; (80010a4 <main+0x1e0>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d111      	bne.n	800101c <main+0x158>
		{
			for (u8 index = 0; index < 6; index++)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	75fb      	strb	r3, [r7, #23]
 8000ffc:	e00a      	b.n	8001014 <main+0x150>
			{
				HLEDMRX_enDisplayMotion(name[index], 5);
 8000ffe:	7dfb      	ldrb	r3, [r7, #23]
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	4a29      	ldr	r2, [pc, #164]	; (80010a8 <main+0x1e4>)
 8001004:	4413      	add	r3, r2
 8001006:	2105      	movs	r1, #5
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff f8eb 	bl	80001e4 <HLEDMRX_enDisplayMotion>
			for (u8 index = 0; index < 6; index++)
 800100e:	7dfb      	ldrb	r3, [r7, #23]
 8001010:	3301      	adds	r3, #1
 8001012:	75fb      	strb	r3, [r7, #23]
 8001014:	7dfb      	ldrb	r3, [r7, #23]
 8001016:	2b05      	cmp	r3, #5
 8001018:	d9f1      	bls.n	8000ffe <main+0x13a>
 800101a:	e7e9      	b.n	8000ff0 <main+0x12c>
			}

		}

		else if (copy_u8Intflag == 2)
 800101c:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <main+0x1e0>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d11b      	bne.n	800105c <main+0x198>
		{
			for (u8 index = 0; index < 6; index++)
 8001024:	2300      	movs	r3, #0
 8001026:	75bb      	strb	r3, [r7, #22]
 8001028:	e014      	b.n	8001054 <main+0x190>
			{
				for (u8 speed = 0; speed < 200; speed+=50)
 800102a:	2300      	movs	r3, #0
 800102c:	757b      	strb	r3, [r7, #21]
 800102e:	e00b      	b.n	8001048 <main+0x184>
				{
					HLEDMRX_enDisplayMotion(name[index], speed);
 8001030:	7dbb      	ldrb	r3, [r7, #22]
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	4a1c      	ldr	r2, [pc, #112]	; (80010a8 <main+0x1e4>)
 8001036:	4413      	add	r3, r2
 8001038:	7d7a      	ldrb	r2, [r7, #21]
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff f8d1 	bl	80001e4 <HLEDMRX_enDisplayMotion>
				for (u8 speed = 0; speed < 200; speed+=50)
 8001042:	7d7b      	ldrb	r3, [r7, #21]
 8001044:	3332      	adds	r3, #50	; 0x32
 8001046:	757b      	strb	r3, [r7, #21]
 8001048:	7d7b      	ldrb	r3, [r7, #21]
 800104a:	2bc7      	cmp	r3, #199	; 0xc7
 800104c:	d9f0      	bls.n	8001030 <main+0x16c>
			for (u8 index = 0; index < 6; index++)
 800104e:	7dbb      	ldrb	r3, [r7, #22]
 8001050:	3301      	adds	r3, #1
 8001052:	75bb      	strb	r3, [r7, #22]
 8001054:	7dbb      	ldrb	r3, [r7, #22]
 8001056:	2b05      	cmp	r3, #5
 8001058:	d9e7      	bls.n	800102a <main+0x166>
 800105a:	e7c9      	b.n	8000ff0 <main+0x12c>
				}
			}
		}

		else if (copy_u8Intflag == 3)
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <main+0x1e0>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b03      	cmp	r3, #3
 8001062:	d1c5      	bne.n	8000ff0 <main+0x12c>
		{
			for (u8 index = 0; index < 6; index++)
 8001064:	2300      	movs	r3, #0
 8001066:	74fb      	strb	r3, [r7, #19]
 8001068:	7cfb      	ldrb	r3, [r7, #19]
 800106a:	2b05      	cmp	r3, #5
 800106c:	d8c0      	bhi.n	8000ff0 <main+0x12c>
			{
				for (u8 speed = 200; speed >= 0; speed-=50)
 800106e:	23c8      	movs	r3, #200	; 0xc8
 8001070:	753b      	strb	r3, [r7, #20]
				{
					HLEDMRX_enDisplayMotion(name[index], speed);
 8001072:	7cfb      	ldrb	r3, [r7, #19]
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	4a0c      	ldr	r2, [pc, #48]	; (80010a8 <main+0x1e4>)
 8001078:	4413      	add	r3, r2
 800107a:	7d3a      	ldrb	r2, [r7, #20]
 800107c:	4611      	mov	r1, r2
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff f8b0 	bl	80001e4 <HLEDMRX_enDisplayMotion>
				for (u8 speed = 200; speed >= 0; speed-=50)
 8001084:	7d3b      	ldrb	r3, [r7, #20]
 8001086:	3b32      	subs	r3, #50	; 0x32
 8001088:	753b      	strb	r3, [r7, #20]
					HLEDMRX_enDisplayMotion(name[index], speed);
 800108a:	e7f2      	b.n	8001072 <main+0x1ae>
 800108c:	080011a8 	.word	0x080011a8
 8001090:	080011ac 	.word	0x080011ac
 8001094:	080011b0 	.word	0x080011b0
 8001098:	080010ad 	.word	0x080010ad
 800109c:	080010dd 	.word	0x080010dd
 80010a0:	080010c5 	.word	0x080010c5
 80010a4:	20000091 	.word	0x20000091
 80010a8:	20000000 	.word	0x20000000

080010ac <start>:
	}
}


void start(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	copy_u8Intflag = 1;
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <start+0x14>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	701a      	strb	r2, [r3, #0]
	MNVIC_enClrPendingFlag(EXT0_INT);
 80010b6:	2006      	movs	r0, #6
 80010b8:	f7ff fda0 	bl	8000bfc <MNVIC_enClrPendingFlag>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000091 	.word	0x20000091

080010c4 <speedDown>:
{
	copy_u8Intflag = 2;
	MNVIC_enClrPendingFlag(EXT9_5INT);
}
void speedDown(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	copy_u8Intflag = 3;
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <speedDown+0x14>)
 80010ca:	2203      	movs	r2, #3
 80010cc:	701a      	strb	r2, [r3, #0]
	MNVIC_enClrPendingFlag(EXT15_10INT);
 80010ce:	2028      	movs	r0, #40	; 0x28
 80010d0:	f7ff fd94 	bl	8000bfc <MNVIC_enClrPendingFlag>

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000091 	.word	0x20000091

080010dc <stop>:
void stop(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	copy_u8Intflag = 0;
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <stop+0x14>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
	MNVIC_enClrPendingFlag(EXT1_INT);
 80010e6:	2007      	movs	r0, #7
 80010e8:	f7ff fd88 	bl	8000bfc <MNVIC_enClrPendingFlag>
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000091 	.word	0x20000091

080010f4 <Reset_Handler>:
 80010f4:	480d      	ldr	r0, [pc, #52]	; (800112c <LoopForever+0x2>)
 80010f6:	4685      	mov	sp, r0
 80010f8:	f3af 8000 	nop.w
 80010fc:	480c      	ldr	r0, [pc, #48]	; (8001130 <LoopForever+0x6>)
 80010fe:	490d      	ldr	r1, [pc, #52]	; (8001134 <LoopForever+0xa>)
 8001100:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <LoopForever+0xe>)
 8001102:	2300      	movs	r3, #0
 8001104:	e002      	b.n	800110c <LoopCopyDataInit>

08001106 <CopyDataInit>:
 8001106:	58d4      	ldr	r4, [r2, r3]
 8001108:	50c4      	str	r4, [r0, r3]
 800110a:	3304      	adds	r3, #4

0800110c <LoopCopyDataInit>:
 800110c:	18c4      	adds	r4, r0, r3
 800110e:	428c      	cmp	r4, r1
 8001110:	d3f9      	bcc.n	8001106 <CopyDataInit>
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <LoopForever+0x12>)
 8001114:	4c0a      	ldr	r4, [pc, #40]	; (8001140 <LoopForever+0x16>)
 8001116:	2300      	movs	r3, #0
 8001118:	e001      	b.n	800111e <LoopFillZerobss>

0800111a <FillZerobss>:
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	3204      	adds	r2, #4

0800111e <LoopFillZerobss>:
 800111e:	42a2      	cmp	r2, r4
 8001120:	d3fb      	bcc.n	800111a <FillZerobss>
 8001122:	f000 f811 	bl	8001148 <__libc_init_array>
 8001126:	f7ff fecd 	bl	8000ec4 <main>

0800112a <LoopForever>:
 800112a:	e7fe      	b.n	800112a <LoopForever>
 800112c:	20005000 	.word	0x20005000
 8001130:	20000000 	.word	0x20000000
 8001134:	20000030 	.word	0x20000030
 8001138:	080011bc 	.word	0x080011bc
 800113c:	20000030 	.word	0x20000030
 8001140:	20000094 	.word	0x20000094

08001144 <ADC1_2_IRQHandler>:
 8001144:	e7fe      	b.n	8001144 <ADC1_2_IRQHandler>
	...

08001148 <__libc_init_array>:
 8001148:	b570      	push	{r4, r5, r6, lr}
 800114a:	2600      	movs	r6, #0
 800114c:	4d0c      	ldr	r5, [pc, #48]	; (8001180 <__libc_init_array+0x38>)
 800114e:	4c0d      	ldr	r4, [pc, #52]	; (8001184 <__libc_init_array+0x3c>)
 8001150:	1b64      	subs	r4, r4, r5
 8001152:	10a4      	asrs	r4, r4, #2
 8001154:	42a6      	cmp	r6, r4
 8001156:	d109      	bne.n	800116c <__libc_init_array+0x24>
 8001158:	f000 f81a 	bl	8001190 <_init>
 800115c:	2600      	movs	r6, #0
 800115e:	4d0a      	ldr	r5, [pc, #40]	; (8001188 <__libc_init_array+0x40>)
 8001160:	4c0a      	ldr	r4, [pc, #40]	; (800118c <__libc_init_array+0x44>)
 8001162:	1b64      	subs	r4, r4, r5
 8001164:	10a4      	asrs	r4, r4, #2
 8001166:	42a6      	cmp	r6, r4
 8001168:	d105      	bne.n	8001176 <__libc_init_array+0x2e>
 800116a:	bd70      	pop	{r4, r5, r6, pc}
 800116c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001170:	4798      	blx	r3
 8001172:	3601      	adds	r6, #1
 8001174:	e7ee      	b.n	8001154 <__libc_init_array+0xc>
 8001176:	f855 3b04 	ldr.w	r3, [r5], #4
 800117a:	4798      	blx	r3
 800117c:	3601      	adds	r6, #1
 800117e:	e7f2      	b.n	8001166 <__libc_init_array+0x1e>
 8001180:	080011b4 	.word	0x080011b4
 8001184:	080011b4 	.word	0x080011b4
 8001188:	080011b4 	.word	0x080011b4
 800118c:	080011b8 	.word	0x080011b8

08001190 <_init>:
 8001190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001192:	bf00      	nop
 8001194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001196:	bc08      	pop	{r3}
 8001198:	469e      	mov	lr, r3
 800119a:	4770      	bx	lr

0800119c <_fini>:
 800119c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800119e:	bf00      	nop
 80011a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011a2:	bc08      	pop	{r3}
 80011a4:	469e      	mov	lr, r3
 80011a6:	4770      	bx	lr
