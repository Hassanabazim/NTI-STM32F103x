
EXTI-LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d44  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e74  08000e7c  00010e7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e74  08000e74  00010e7c  2**0
                  CONTENTS
  4 .ARM          00000000  08000e74  08000e74  00010e7c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e74  08000e7c  00010e7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e74  08000e74  00010e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e78  08000e78  00010e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000000  08000e7c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08000e7c  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010e7c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001df4  00000000  00000000  00010ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000816  00000000  00000000  00012c99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000270  00000000  00000000  000134b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001e8  00000000  00000000  00013720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000104e  00000000  00000000  00013908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001913  00000000  00000000  00014956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000484b  00000000  00000000  00016269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0001aab4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000007a8  00000000  00000000  0001ab08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e5c 	.word	0x08000e5c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000e5c 	.word	0x08000e5c

08000170 <HLED_enSetON>:

	return SUCCESS;
}

ErrorState_t HLED_enSetON(u8 copyu8_LedPort, u8 copyu8_LedPin)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	460a      	mov	r2, r1
 800017a:	71fb      	strb	r3, [r7, #7]
 800017c:	4613      	mov	r3, r2
 800017e:	71bb      	strb	r3, [r7, #6]
#if(HLED_DIR == HLED_DIR_FORWARD)
	MGPIO_enSetPinValue(copyu8_LedPort, copyu8_LedPin, HIGH);
 8000180:	79b9      	ldrb	r1, [r7, #6]
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	2201      	movs	r2, #1
 8000186:	4618      	mov	r0, r3
 8000188:	f000 fa18 	bl	80005bc <MGPIO_enSetPinValue>
	MGPIO_enSetPinValue(copyu8_LedPort, copyu8_LedPin, LOW);
#else
#error ("WRONG LED DIRECTION")
#endif

	return SUCCESS;
 800018c:	2302      	movs	r3, #2
}
 800018e:	4618      	mov	r0, r3
 8000190:	3708      	adds	r7, #8
 8000192:	46bd      	mov	sp, r7
 8000194:	bd80      	pop	{r7, pc}

08000196 <HLED_enSetOFF>:

ErrorState_t HLED_enSetOFF(u8 copyu8_LedPort, u8 copyu8_LedPin)
{
 8000196:	b580      	push	{r7, lr}
 8000198:	b082      	sub	sp, #8
 800019a:	af00      	add	r7, sp, #0
 800019c:	4603      	mov	r3, r0
 800019e:	460a      	mov	r2, r1
 80001a0:	71fb      	strb	r3, [r7, #7]
 80001a2:	4613      	mov	r3, r2
 80001a4:	71bb      	strb	r3, [r7, #6]
#if(HLED_DIR == HLED_DIR_FORWARD)
	MGPIO_enSetPinValue(copyu8_LedPort, copyu8_LedPin, LOW);
 80001a6:	79b9      	ldrb	r1, [r7, #6]
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	2200      	movs	r2, #0
 80001ac:	4618      	mov	r0, r3
 80001ae:	f000 fa05 	bl	80005bc <MGPIO_enSetPinValue>
	MGPIO_enSetPinValue(copyu8_LedPort, copyu8_LedPin, HIGH);
#else
#error ("WRONG LED DIRECTION")
#endif

	return SUCCESS;
 80001b2:	2302      	movs	r3, #2
}
 80001b4:	4618      	mov	r0, r3
 80001b6:	3708      	adds	r7, #8
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}

080001bc <HPB_enInit>:
#include "HPB_priv.h"
#include "HPB_config.h"


ErrorState_t HPB_enInit(PB_ST *ptrPB)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b084      	sub	sp, #16
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
	ErrorState_t Local_state = SUCCESS;
 80001c4:	2302      	movs	r3, #2
 80001c6:	73fb      	strb	r3, [r7, #15]

	if (ptrPB->PB_PORT >= PORTA && ptrPB->PB_PORT <= PORTC)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	781b      	ldrb	r3, [r3, #0]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d018      	beq.n	8000202 <HPB_enInit+0x46>
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	2b03      	cmp	r3, #3
 80001d6:	d814      	bhi.n	8000202 <HPB_enInit+0x46>
	{
		MGPIO_enSetPinDirection(ptrPB->PB_PORT, ptrPB->PB_PIN, IN_PU_PD);
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	7818      	ldrb	r0, [r3, #0]
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	785b      	ldrb	r3, [r3, #1]
 80001e0:	2208      	movs	r2, #8
 80001e2:	4619      	mov	r1, r3
 80001e4:	f000 f910 	bl	8000408 <MGPIO_enSetPinDirection>

		/* Activiate Internal PULL-UPS Resistors */
		if(ptrPB->PB_MODE== PULL_UP)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	789b      	ldrb	r3, [r3, #2]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d10a      	bne.n	8000206 <HPB_enInit+0x4a>
			MGPIO_enSetPinValue(ptrPB->PB_PORT, ptrPB->PB_PIN, HIGH);
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	7818      	ldrb	r0, [r3, #0]
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	785b      	ldrb	r3, [r3, #1]
 80001f8:	2201      	movs	r2, #1
 80001fa:	4619      	mov	r1, r3
 80001fc:	f000 f9de 	bl	80005bc <MGPIO_enSetPinValue>
		if(ptrPB->PB_MODE== PULL_UP)
 8000200:	e001      	b.n	8000206 <HPB_enInit+0x4a>
	}

	else
	{
		Local_state = OUT_OF_RANG_ERR;
 8000202:	2300      	movs	r3, #0
 8000204:	73fb      	strb	r3, [r7, #15]
	}

	return Local_state;
 8000206:	7bfb      	ldrb	r3, [r7, #15]
}
 8000208:	4618      	mov	r0, r3
 800020a:	3710      	adds	r7, #16
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}

08000210 <MEXTI_enInit>:

void (*EXTI_CALLBACK[16])(void) = {0};


ErrorState_t MEXTI_enInit(void)
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
#if (EXTI_MODE == EXTI_RISING_TRIG)
	SET_BIT(EXTI->EXTI_RTSR,EXTI_LINE);

#elif(EXTI_MODE == EXTI_FAILING_TRIG)
	SET_BIT(EXTI->EXTI_FTSR,EXTI_LINE);
 8000214:	4b08      	ldr	r3, [pc, #32]	; (8000238 <MEXTI_enInit+0x28>)
 8000216:	68db      	ldr	r3, [r3, #12]
 8000218:	4a07      	ldr	r2, [pc, #28]	; (8000238 <MEXTI_enInit+0x28>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	60d3      	str	r3, [r2, #12]

#else
#error("Wrong EXTI MODE!");
#endif

	SET_BIT(EXTI->EXTI_IMR, EXTI_LINE);
 8000220:	4b05      	ldr	r3, [pc, #20]	; (8000238 <MEXTI_enInit+0x28>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a04      	ldr	r2, [pc, #16]	; (8000238 <MEXTI_enInit+0x28>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	6013      	str	r3, [r2, #0]

	return SUCCESS;
 800022c:	2302      	movs	r3, #2
}
 800022e:	4618      	mov	r0, r3
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	40010400 	.word	0x40010400

0800023c <MEXTI_enCallBack>:

	return local_state;
}

ErrorState_t MEXTI_enCallBack(u8 Copy_u8LineId, void (*ptr) (void))
{
 800023c:	b480      	push	{r7}
 800023e:	b085      	sub	sp, #20
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	6039      	str	r1, [r7, #0]
 8000246:	71fb      	strb	r3, [r7, #7]
	ErrorState_t local_state = SUCCESS ;
 8000248:	2302      	movs	r3, #2
 800024a:	73fb      	strb	r3, [r7, #15]
	if (ptr == NULL)
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	2b00      	cmp	r3, #0
 8000250:	d102      	bne.n	8000258 <MEXTI_enCallBack+0x1c>
	{
		local_state = NULL_PTR_ERR;
 8000252:	2301      	movs	r3, #1
 8000254:	73fb      	strb	r3, [r7, #15]
 8000256:	e004      	b.n	8000262 <MEXTI_enCallBack+0x26>
	}
	else
	{
		EXTI_CALLBACK[Copy_u8LineId] = ptr;
 8000258:	79fb      	ldrb	r3, [r7, #7]
 800025a:	4905      	ldr	r1, [pc, #20]	; (8000270 <MEXTI_enCallBack+0x34>)
 800025c:	683a      	ldr	r2, [r7, #0]
 800025e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	return local_state ;
 8000262:	7bfb      	ldrb	r3, [r7, #15]
}
 8000264:	4618      	mov	r0, r3
 8000266:	3714      	adds	r7, #20
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	2000001c 	.word	0x2000001c

08000274 <MEXTI_enClearPendingBit>:

	return local_state;
}

ErrorState_t MEXTI_enClearPendingBit(u8 Copy_u8LineId)
{
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
	ErrorState_t local_state = SUCCESS ;
 800027e:	2302      	movs	r3, #2
 8000280:	73fb      	strb	r3, [r7, #15]

	if (Copy_u8LineId <= 15)
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	2b0f      	cmp	r3, #15
 8000286:	d80a      	bhi.n	800029e <MEXTI_enClearPendingBit+0x2a>
	{
		SET_BIT(EXTI->EXTI_PR, Copy_u8LineId);
 8000288:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <MEXTI_enClearPendingBit+0x3c>)
 800028a:	695b      	ldr	r3, [r3, #20]
 800028c:	79fa      	ldrb	r2, [r7, #7]
 800028e:	2101      	movs	r1, #1
 8000290:	fa01 f202 	lsl.w	r2, r1, r2
 8000294:	4611      	mov	r1, r2
 8000296:	4a06      	ldr	r2, [pc, #24]	; (80002b0 <MEXTI_enClearPendingBit+0x3c>)
 8000298:	430b      	orrs	r3, r1
 800029a:	6153      	str	r3, [r2, #20]
 800029c:	e001      	b.n	80002a2 <MEXTI_enClearPendingBit+0x2e>
	}
	else
	{
		local_state = OUT_OF_RANG_ERR;
 800029e:	2300      	movs	r3, #0
 80002a0:	73fb      	strb	r3, [r7, #15]
	}

	return local_state;
 80002a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	3714      	adds	r7, #20
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bc80      	pop	{r7}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	40010400 	.word	0x40010400

080002b4 <EXTI0_IRQHandler>:
}



void EXTI0_IRQHandler(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	if (EXTI_CALLBACK[EXTI0_LINE] != NULL)
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <EXTI0_IRQHandler+0x18>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d002      	beq.n	80002c6 <EXTI0_IRQHandler+0x12>
	{
		EXTI_CALLBACK[EXTI0_LINE]();
 80002c0:	4b02      	ldr	r3, [pc, #8]	; (80002cc <EXTI0_IRQHandler+0x18>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4798      	blx	r3
	}

}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	2000001c 	.word	0x2000001c

080002d0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	if (EXTI_CALLBACK[EXTI1_LINE] != NULL)
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <EXTI1_IRQHandler+0x18>)
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d002      	beq.n	80002e2 <EXTI1_IRQHandler+0x12>
	{
		EXTI_CALLBACK[EXTI1_LINE]();
 80002dc:	4b02      	ldr	r3, [pc, #8]	; (80002e8 <EXTI1_IRQHandler+0x18>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	4798      	blx	r3
	}

}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	2000001c 	.word	0x2000001c

080002ec <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	if (EXTI_CALLBACK[EXTI2_LINE] != NULL)
 80002f0:	4b04      	ldr	r3, [pc, #16]	; (8000304 <EXTI2_IRQHandler+0x18>)
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d002      	beq.n	80002fe <EXTI2_IRQHandler+0x12>
	{
		EXTI_CALLBACK[EXTI2_LINE]();
 80002f8:	4b02      	ldr	r3, [pc, #8]	; (8000304 <EXTI2_IRQHandler+0x18>)
 80002fa:	689b      	ldr	r3, [r3, #8]
 80002fc:	4798      	blx	r3
	}
}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	2000001c 	.word	0x2000001c

08000308 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	if (EXTI_CALLBACK[EXTI3_LINE] != NULL)
 800030c:	4b04      	ldr	r3, [pc, #16]	; (8000320 <EXTI3_IRQHandler+0x18>)
 800030e:	68db      	ldr	r3, [r3, #12]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d002      	beq.n	800031a <EXTI3_IRQHandler+0x12>
	{
		EXTI_CALLBACK[EXTI3_LINE]();
 8000314:	4b02      	ldr	r3, [pc, #8]	; (8000320 <EXTI3_IRQHandler+0x18>)
 8000316:	68db      	ldr	r3, [r3, #12]
 8000318:	4798      	blx	r3
	}
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	2000001c 	.word	0x2000001c

08000324 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	if (EXTI_CALLBACK[EXTI4_LINE] != NULL)
 8000328:	4b04      	ldr	r3, [pc, #16]	; (800033c <EXTI4_IRQHandler+0x18>)
 800032a:	691b      	ldr	r3, [r3, #16]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d002      	beq.n	8000336 <EXTI4_IRQHandler+0x12>
	{
		EXTI_CALLBACK[EXTI4_LINE]();
 8000330:	4b02      	ldr	r3, [pc, #8]	; (800033c <EXTI4_IRQHandler+0x18>)
 8000332:	691b      	ldr	r3, [r3, #16]
 8000334:	4798      	blx	r3
	}
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	2000001c 	.word	0x2000001c

08000340 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	if (EXTI_CALLBACK[EXTI5_LINE] != NULL)
 8000344:	4b14      	ldr	r3, [pc, #80]	; (8000398 <EXTI9_5_IRQHandler+0x58>)
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d003      	beq.n	8000354 <EXTI9_5_IRQHandler+0x14>
	{
		EXTI_CALLBACK[EXTI5_LINE]();
 800034c:	4b12      	ldr	r3, [pc, #72]	; (8000398 <EXTI9_5_IRQHandler+0x58>)
 800034e:	695b      	ldr	r3, [r3, #20]
 8000350:	4798      	blx	r3
	else if (EXTI_CALLBACK[EXTI9_LINE] != NULL)
	{
		EXTI_CALLBACK[EXTI9_LINE]();

	}
}
 8000352:	e01e      	b.n	8000392 <EXTI9_5_IRQHandler+0x52>
	else if (EXTI_CALLBACK[EXTI6_LINE] != NULL)
 8000354:	4b10      	ldr	r3, [pc, #64]	; (8000398 <EXTI9_5_IRQHandler+0x58>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d003      	beq.n	8000364 <EXTI9_5_IRQHandler+0x24>
		EXTI_CALLBACK[EXTI6_LINE]();
 800035c:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <EXTI9_5_IRQHandler+0x58>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4798      	blx	r3
}
 8000362:	e016      	b.n	8000392 <EXTI9_5_IRQHandler+0x52>
	else if (EXTI_CALLBACK[EXTI7_LINE] != NULL)
 8000364:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <EXTI9_5_IRQHandler+0x58>)
 8000366:	69db      	ldr	r3, [r3, #28]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d003      	beq.n	8000374 <EXTI9_5_IRQHandler+0x34>
		EXTI_CALLBACK[EXTI7_LINE]();
 800036c:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <EXTI9_5_IRQHandler+0x58>)
 800036e:	69db      	ldr	r3, [r3, #28]
 8000370:	4798      	blx	r3
}
 8000372:	e00e      	b.n	8000392 <EXTI9_5_IRQHandler+0x52>
	else if (EXTI_CALLBACK[EXTI8_LINE] != NULL)
 8000374:	4b08      	ldr	r3, [pc, #32]	; (8000398 <EXTI9_5_IRQHandler+0x58>)
 8000376:	6a1b      	ldr	r3, [r3, #32]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d003      	beq.n	8000384 <EXTI9_5_IRQHandler+0x44>
		EXTI_CALLBACK[EXTI8_LINE]();
 800037c:	4b06      	ldr	r3, [pc, #24]	; (8000398 <EXTI9_5_IRQHandler+0x58>)
 800037e:	6a1b      	ldr	r3, [r3, #32]
 8000380:	4798      	blx	r3
}
 8000382:	e006      	b.n	8000392 <EXTI9_5_IRQHandler+0x52>
	else if (EXTI_CALLBACK[EXTI9_LINE] != NULL)
 8000384:	4b04      	ldr	r3, [pc, #16]	; (8000398 <EXTI9_5_IRQHandler+0x58>)
 8000386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000388:	2b00      	cmp	r3, #0
 800038a:	d002      	beq.n	8000392 <EXTI9_5_IRQHandler+0x52>
		EXTI_CALLBACK[EXTI9_LINE]();
 800038c:	4b02      	ldr	r3, [pc, #8]	; (8000398 <EXTI9_5_IRQHandler+0x58>)
 800038e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000390:	4798      	blx	r3
}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	2000001c 	.word	0x2000001c

0800039c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	if (EXTI_CALLBACK[EXTI10_LINE] != NULL)
 80003a0:	4b18      	ldr	r3, [pc, #96]	; (8000404 <EXTI15_10_IRQHandler+0x68>)
 80003a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d003      	beq.n	80003b0 <EXTI15_10_IRQHandler+0x14>
	{
		EXTI_CALLBACK[EXTI10_LINE]();
 80003a8:	4b16      	ldr	r3, [pc, #88]	; (8000404 <EXTI15_10_IRQHandler+0x68>)
 80003aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003ac:	4798      	blx	r3
	else if (EXTI_CALLBACK[EXTI15_LINE] != NULL)
	{
		EXTI_CALLBACK[EXTI15_LINE]();

	}
}
 80003ae:	e026      	b.n	80003fe <EXTI15_10_IRQHandler+0x62>
	else if (EXTI_CALLBACK[EXTI11_LINE] != NULL)
 80003b0:	4b14      	ldr	r3, [pc, #80]	; (8000404 <EXTI15_10_IRQHandler+0x68>)
 80003b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d003      	beq.n	80003c0 <EXTI15_10_IRQHandler+0x24>
		EXTI_CALLBACK[EXTI11_LINE]();
 80003b8:	4b12      	ldr	r3, [pc, #72]	; (8000404 <EXTI15_10_IRQHandler+0x68>)
 80003ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003bc:	4798      	blx	r3
}
 80003be:	e01e      	b.n	80003fe <EXTI15_10_IRQHandler+0x62>
	else if (EXTI_CALLBACK[EXTI12_LINE] != NULL)
 80003c0:	4b10      	ldr	r3, [pc, #64]	; (8000404 <EXTI15_10_IRQHandler+0x68>)
 80003c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d003      	beq.n	80003d0 <EXTI15_10_IRQHandler+0x34>
		EXTI_CALLBACK[EXTI12_LINE]();
 80003c8:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <EXTI15_10_IRQHandler+0x68>)
 80003ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003cc:	4798      	blx	r3
}
 80003ce:	e016      	b.n	80003fe <EXTI15_10_IRQHandler+0x62>
	else if (EXTI_CALLBACK[EXTI13_LINE] != NULL)
 80003d0:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <EXTI15_10_IRQHandler+0x68>)
 80003d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d003      	beq.n	80003e0 <EXTI15_10_IRQHandler+0x44>
		EXTI_CALLBACK[EXTI13_LINE]();
 80003d8:	4b0a      	ldr	r3, [pc, #40]	; (8000404 <EXTI15_10_IRQHandler+0x68>)
 80003da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003dc:	4798      	blx	r3
}
 80003de:	e00e      	b.n	80003fe <EXTI15_10_IRQHandler+0x62>
	else if (EXTI_CALLBACK[EXTI14_LINE] != NULL)
 80003e0:	4b08      	ldr	r3, [pc, #32]	; (8000404 <EXTI15_10_IRQHandler+0x68>)
 80003e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d003      	beq.n	80003f0 <EXTI15_10_IRQHandler+0x54>
		EXTI_CALLBACK[EXTI14_LINE]();
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <EXTI15_10_IRQHandler+0x68>)
 80003ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003ec:	4798      	blx	r3
}
 80003ee:	e006      	b.n	80003fe <EXTI15_10_IRQHandler+0x62>
	else if (EXTI_CALLBACK[EXTI15_LINE] != NULL)
 80003f0:	4b04      	ldr	r3, [pc, #16]	; (8000404 <EXTI15_10_IRQHandler+0x68>)
 80003f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d002      	beq.n	80003fe <EXTI15_10_IRQHandler+0x62>
		EXTI_CALLBACK[EXTI15_LINE]();
 80003f8:	4b02      	ldr	r3, [pc, #8]	; (8000404 <EXTI15_10_IRQHandler+0x68>)
 80003fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003fc:	4798      	blx	r3
}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	2000001c 	.word	0x2000001c

08000408 <MGPIO_enSetPinDirection>:
#include "MGPIO_int.h"
#include "MGPIO_config.h"
#include "MGPIO_priv.h"

ErrorState_t MGPIO_enSetPinDirection(PORT_t copy_u8port, PIN_t copy_u8pin, MODE_t copy_u8Mode)
{
 8000408:	b480      	push	{r7}
 800040a:	b085      	sub	sp, #20
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
 8000412:	460b      	mov	r3, r1
 8000414:	71bb      	strb	r3, [r7, #6]
 8000416:	4613      	mov	r3, r2
 8000418:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 800041a:	2302      	movs	r3, #2
 800041c:	73fb      	strb	r3, [r7, #15]
	switch(copy_u8port)
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	2b03      	cmp	r3, #3
 8000422:	d07f      	beq.n	8000524 <MGPIO_enSetPinDirection+0x11c>
 8000424:	2b03      	cmp	r3, #3
 8000426:	f300 80b9 	bgt.w	800059c <MGPIO_enSetPinDirection+0x194>
 800042a:	2b01      	cmp	r3, #1
 800042c:	d002      	beq.n	8000434 <MGPIO_enSetPinDirection+0x2c>
 800042e:	2b02      	cmp	r3, #2
 8000430:	d03c      	beq.n	80004ac <MGPIO_enSetPinDirection+0xa4>
 8000432:	e0b3      	b.n	800059c <MGPIO_enSetPinDirection+0x194>
	{
	case PORTA:
		if (copy_u8pin < GPIO_CRL_MAX)
 8000434:	79bb      	ldrb	r3, [r7, #6]
 8000436:	2b07      	cmp	r3, #7
 8000438:	d817      	bhi.n	800046a <MGPIO_enSetPinDirection+0x62>
		{
			GPIOA->GPIO_CRL &= ~(GPIO_MASK << (copy_u8pin * GPIO_OFFSET)) ;
 800043a:	4b5d      	ldr	r3, [pc, #372]	; (80005b0 <MGPIO_enSetPinDirection+0x1a8>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	79ba      	ldrb	r2, [r7, #6]
 8000440:	0092      	lsls	r2, r2, #2
 8000442:	210f      	movs	r1, #15
 8000444:	fa01 f202 	lsl.w	r2, r1, r2
 8000448:	43d2      	mvns	r2, r2
 800044a:	4611      	mov	r1, r2
 800044c:	4a58      	ldr	r2, [pc, #352]	; (80005b0 <MGPIO_enSetPinDirection+0x1a8>)
 800044e:	400b      	ands	r3, r1
 8000450:	6013      	str	r3, [r2, #0]
			GPIOA->GPIO_CRL |= copy_u8Mode << (copy_u8pin * GPIO_OFFSET) ;
 8000452:	4b57      	ldr	r3, [pc, #348]	; (80005b0 <MGPIO_enSetPinDirection+0x1a8>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	7979      	ldrb	r1, [r7, #5]
 8000458:	79ba      	ldrb	r2, [r7, #6]
 800045a:	0092      	lsls	r2, r2, #2
 800045c:	fa01 f202 	lsl.w	r2, r1, r2
 8000460:	4611      	mov	r1, r2
 8000462:	4a53      	ldr	r2, [pc, #332]	; (80005b0 <MGPIO_enSetPinDirection+0x1a8>)
 8000464:	430b      	orrs	r3, r1
 8000466:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000468:	e09b      	b.n	80005a2 <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < GPIO_CRH_MAX)
 800046a:	79bb      	ldrb	r3, [r7, #6]
 800046c:	2b0f      	cmp	r3, #15
 800046e:	d81a      	bhi.n	80004a6 <MGPIO_enSetPinDirection+0x9e>
			copy_u8pin -= GPIO_CRL_MAX  ;
 8000470:	79bb      	ldrb	r3, [r7, #6]
 8000472:	3b08      	subs	r3, #8
 8000474:	71bb      	strb	r3, [r7, #6]
			GPIOA->GPIO_CRH &= ~(GPIO_MASK << (copy_u8pin * GPIO_OFFSET));
 8000476:	4b4e      	ldr	r3, [pc, #312]	; (80005b0 <MGPIO_enSetPinDirection+0x1a8>)
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	79ba      	ldrb	r2, [r7, #6]
 800047c:	0092      	lsls	r2, r2, #2
 800047e:	210f      	movs	r1, #15
 8000480:	fa01 f202 	lsl.w	r2, r1, r2
 8000484:	43d2      	mvns	r2, r2
 8000486:	4611      	mov	r1, r2
 8000488:	4a49      	ldr	r2, [pc, #292]	; (80005b0 <MGPIO_enSetPinDirection+0x1a8>)
 800048a:	400b      	ands	r3, r1
 800048c:	6053      	str	r3, [r2, #4]
			GPIOA->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * GPIO_OFFSET));
 800048e:	4b48      	ldr	r3, [pc, #288]	; (80005b0 <MGPIO_enSetPinDirection+0x1a8>)
 8000490:	685b      	ldr	r3, [r3, #4]
 8000492:	7979      	ldrb	r1, [r7, #5]
 8000494:	79ba      	ldrb	r2, [r7, #6]
 8000496:	0092      	lsls	r2, r2, #2
 8000498:	fa01 f202 	lsl.w	r2, r1, r2
 800049c:	4611      	mov	r1, r2
 800049e:	4a44      	ldr	r2, [pc, #272]	; (80005b0 <MGPIO_enSetPinDirection+0x1a8>)
 80004a0:	430b      	orrs	r3, r1
 80004a2:	6053      	str	r3, [r2, #4]
		break;
 80004a4:	e07d      	b.n	80005a2 <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 80004a6:	2300      	movs	r3, #0
 80004a8:	73fb      	strb	r3, [r7, #15]
		break;
 80004aa:	e07a      	b.n	80005a2 <MGPIO_enSetPinDirection+0x19a>

	case PORTB:
		if (copy_u8pin < GPIO_CRL_MAX)
 80004ac:	79bb      	ldrb	r3, [r7, #6]
 80004ae:	2b07      	cmp	r3, #7
 80004b0:	d817      	bhi.n	80004e2 <MGPIO_enSetPinDirection+0xda>
		{
			GPIOB->GPIO_CRL &= ~(GPIO_MASK) << (copy_u8pin * GPIO_OFFSET) ;
 80004b2:	4b40      	ldr	r3, [pc, #256]	; (80005b4 <MGPIO_enSetPinDirection+0x1ac>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	79ba      	ldrb	r2, [r7, #6]
 80004b8:	0092      	lsls	r2, r2, #2
 80004ba:	f06f 010f 	mvn.w	r1, #15
 80004be:	fa01 f202 	lsl.w	r2, r1, r2
 80004c2:	4611      	mov	r1, r2
 80004c4:	4a3b      	ldr	r2, [pc, #236]	; (80005b4 <MGPIO_enSetPinDirection+0x1ac>)
 80004c6:	400b      	ands	r3, r1
 80004c8:	6013      	str	r3, [r2, #0]
			GPIOB->GPIO_CRL |= (copy_u8Mode << (copy_u8pin * GPIO_OFFSET)) ;
 80004ca:	4b3a      	ldr	r3, [pc, #232]	; (80005b4 <MGPIO_enSetPinDirection+0x1ac>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	7979      	ldrb	r1, [r7, #5]
 80004d0:	79ba      	ldrb	r2, [r7, #6]
 80004d2:	0092      	lsls	r2, r2, #2
 80004d4:	fa01 f202 	lsl.w	r2, r1, r2
 80004d8:	4611      	mov	r1, r2
 80004da:	4a36      	ldr	r2, [pc, #216]	; (80005b4 <MGPIO_enSetPinDirection+0x1ac>)
 80004dc:	430b      	orrs	r3, r1
 80004de:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 80004e0:	e05f      	b.n	80005a2 <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < GPIO_CRH_MAX)
 80004e2:	79bb      	ldrb	r3, [r7, #6]
 80004e4:	2b0f      	cmp	r3, #15
 80004e6:	d81a      	bhi.n	800051e <MGPIO_enSetPinDirection+0x116>
			copy_u8pin -= GPIO_CRL_MAX ;
 80004e8:	79bb      	ldrb	r3, [r7, #6]
 80004ea:	3b08      	subs	r3, #8
 80004ec:	71bb      	strb	r3, [r7, #6]
			GPIOB->GPIO_CRH &= ~(GPIO_MASK) << (copy_u8pin * GPIO_OFFSET) ;
 80004ee:	4b31      	ldr	r3, [pc, #196]	; (80005b4 <MGPIO_enSetPinDirection+0x1ac>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	79ba      	ldrb	r2, [r7, #6]
 80004f4:	0092      	lsls	r2, r2, #2
 80004f6:	f06f 010f 	mvn.w	r1, #15
 80004fa:	fa01 f202 	lsl.w	r2, r1, r2
 80004fe:	4611      	mov	r1, r2
 8000500:	4a2c      	ldr	r2, [pc, #176]	; (80005b4 <MGPIO_enSetPinDirection+0x1ac>)
 8000502:	400b      	ands	r3, r1
 8000504:	6053      	str	r3, [r2, #4]
			GPIOB->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * GPIO_OFFSET)) ;
 8000506:	4b2b      	ldr	r3, [pc, #172]	; (80005b4 <MGPIO_enSetPinDirection+0x1ac>)
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	7979      	ldrb	r1, [r7, #5]
 800050c:	79ba      	ldrb	r2, [r7, #6]
 800050e:	0092      	lsls	r2, r2, #2
 8000510:	fa01 f202 	lsl.w	r2, r1, r2
 8000514:	4611      	mov	r1, r2
 8000516:	4a27      	ldr	r2, [pc, #156]	; (80005b4 <MGPIO_enSetPinDirection+0x1ac>)
 8000518:	430b      	orrs	r3, r1
 800051a:	6053      	str	r3, [r2, #4]
		break;
 800051c:	e041      	b.n	80005a2 <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 800051e:	2300      	movs	r3, #0
 8000520:	73fb      	strb	r3, [r7, #15]
		break;
 8000522:	e03e      	b.n	80005a2 <MGPIO_enSetPinDirection+0x19a>

	case PORTC:
		if (copy_u8pin < GPIO_CRL_MAX)
 8000524:	79bb      	ldrb	r3, [r7, #6]
 8000526:	2b07      	cmp	r3, #7
 8000528:	d817      	bhi.n	800055a <MGPIO_enSetPinDirection+0x152>
		{
			GPIOC->GPIO_CRL &= ~(GPIO_MASK << (copy_u8pin * GPIO_OFFSET)) ;
 800052a:	4b23      	ldr	r3, [pc, #140]	; (80005b8 <MGPIO_enSetPinDirection+0x1b0>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	79ba      	ldrb	r2, [r7, #6]
 8000530:	0092      	lsls	r2, r2, #2
 8000532:	210f      	movs	r1, #15
 8000534:	fa01 f202 	lsl.w	r2, r1, r2
 8000538:	43d2      	mvns	r2, r2
 800053a:	4611      	mov	r1, r2
 800053c:	4a1e      	ldr	r2, [pc, #120]	; (80005b8 <MGPIO_enSetPinDirection+0x1b0>)
 800053e:	400b      	ands	r3, r1
 8000540:	6013      	str	r3, [r2, #0]
			GPIOC->GPIO_CRL |= (copy_u8Mode << (copy_u8pin * GPIO_OFFSET)) ;
 8000542:	4b1d      	ldr	r3, [pc, #116]	; (80005b8 <MGPIO_enSetPinDirection+0x1b0>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	7979      	ldrb	r1, [r7, #5]
 8000548:	79ba      	ldrb	r2, [r7, #6]
 800054a:	0092      	lsls	r2, r2, #2
 800054c:	fa01 f202 	lsl.w	r2, r1, r2
 8000550:	4611      	mov	r1, r2
 8000552:	4a19      	ldr	r2, [pc, #100]	; (80005b8 <MGPIO_enSetPinDirection+0x1b0>)
 8000554:	430b      	orrs	r3, r1
 8000556:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000558:	e023      	b.n	80005a2 <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < GPIO_CRH_MAX)
 800055a:	79bb      	ldrb	r3, [r7, #6]
 800055c:	2b0f      	cmp	r3, #15
 800055e:	d81a      	bhi.n	8000596 <MGPIO_enSetPinDirection+0x18e>
			copy_u8pin -= GPIO_CRL_MAX ;
 8000560:	79bb      	ldrb	r3, [r7, #6]
 8000562:	3b08      	subs	r3, #8
 8000564:	71bb      	strb	r3, [r7, #6]
			GPIOC->GPIO_CRH &= ~(GPIO_MASK) << (copy_u8pin * GPIO_OFFSET) ;
 8000566:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <MGPIO_enSetPinDirection+0x1b0>)
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	79ba      	ldrb	r2, [r7, #6]
 800056c:	0092      	lsls	r2, r2, #2
 800056e:	f06f 010f 	mvn.w	r1, #15
 8000572:	fa01 f202 	lsl.w	r2, r1, r2
 8000576:	4611      	mov	r1, r2
 8000578:	4a0f      	ldr	r2, [pc, #60]	; (80005b8 <MGPIO_enSetPinDirection+0x1b0>)
 800057a:	400b      	ands	r3, r1
 800057c:	6053      	str	r3, [r2, #4]
			GPIOC->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * GPIO_OFFSET)) ;
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <MGPIO_enSetPinDirection+0x1b0>)
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	7979      	ldrb	r1, [r7, #5]
 8000584:	79ba      	ldrb	r2, [r7, #6]
 8000586:	0092      	lsls	r2, r2, #2
 8000588:	fa01 f202 	lsl.w	r2, r1, r2
 800058c:	4611      	mov	r1, r2
 800058e:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <MGPIO_enSetPinDirection+0x1b0>)
 8000590:	430b      	orrs	r3, r1
 8000592:	6053      	str	r3, [r2, #4]
		break;
 8000594:	e005      	b.n	80005a2 <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 8000596:	2300      	movs	r3, #0
 8000598:	73fb      	strb	r3, [r7, #15]
		break;
 800059a:	e002      	b.n	80005a2 <MGPIO_enSetPinDirection+0x19a>

	default:
		local_state = OUT_OF_RANG_ERR;
 800059c:	2300      	movs	r3, #0
 800059e:	73fb      	strb	r3, [r7, #15]
		break;
 80005a0:	bf00      	nop
	}
	return local_state;
 80005a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40010800 	.word	0x40010800
 80005b4:	40010c00 	.word	0x40010c00
 80005b8:	40011000 	.word	0x40011000

080005bc <MGPIO_enSetPinValue>:

ErrorState_t MGPIO_enSetPinValue(PORT_t copy_u8port, PIN_t copy_u8pin, VALUE_t copy_u8Value)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
 80005c6:	460b      	mov	r3, r1
 80005c8:	71bb      	strb	r3, [r7, #6]
 80005ca:	4613      	mov	r3, r2
 80005cc:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 80005ce:	2302      	movs	r3, #2
 80005d0:	73fb      	strb	r3, [r7, #15]
	switch(copy_u8port)
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	2b03      	cmp	r3, #3
 80005d6:	d046      	beq.n	8000666 <MGPIO_enSetPinValue+0xaa>
 80005d8:	2b03      	cmp	r3, #3
 80005da:	dc64      	bgt.n	80006a6 <MGPIO_enSetPinValue+0xea>
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d002      	beq.n	80005e6 <MGPIO_enSetPinValue+0x2a>
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d020      	beq.n	8000626 <MGPIO_enSetPinValue+0x6a>
 80005e4:	e05f      	b.n	80006a6 <MGPIO_enSetPinValue+0xea>
	{
	case PORTA:
		if (copy_u8Value == HIGH)
 80005e6:	797b      	ldrb	r3, [r7, #5]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d10a      	bne.n	8000602 <MGPIO_enSetPinValue+0x46>
		{
			SET_BIT(GPIOA->GPIO_ODR, copy_u8pin);
 80005ec:	4b32      	ldr	r3, [pc, #200]	; (80006b8 <MGPIO_enSetPinValue+0xfc>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	79ba      	ldrb	r2, [r7, #6]
 80005f2:	2101      	movs	r1, #1
 80005f4:	fa01 f202 	lsl.w	r2, r1, r2
 80005f8:	4611      	mov	r1, r2
 80005fa:	4a2f      	ldr	r2, [pc, #188]	; (80006b8 <MGPIO_enSetPinValue+0xfc>)
 80005fc:	430b      	orrs	r3, r1
 80005fe:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000600:	e054      	b.n	80006ac <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 8000602:	797b      	ldrb	r3, [r7, #5]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d10b      	bne.n	8000620 <MGPIO_enSetPinValue+0x64>
			CLR_BIT(GPIOA->GPIO_ODR, copy_u8pin);
 8000608:	4b2b      	ldr	r3, [pc, #172]	; (80006b8 <MGPIO_enSetPinValue+0xfc>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	79ba      	ldrb	r2, [r7, #6]
 800060e:	2101      	movs	r1, #1
 8000610:	fa01 f202 	lsl.w	r2, r1, r2
 8000614:	43d2      	mvns	r2, r2
 8000616:	4611      	mov	r1, r2
 8000618:	4a27      	ldr	r2, [pc, #156]	; (80006b8 <MGPIO_enSetPinValue+0xfc>)
 800061a:	400b      	ands	r3, r1
 800061c:	60d3      	str	r3, [r2, #12]
		break;
 800061e:	e045      	b.n	80006ac <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 8000620:	2300      	movs	r3, #0
 8000622:	73fb      	strb	r3, [r7, #15]
		break;
 8000624:	e042      	b.n	80006ac <MGPIO_enSetPinValue+0xf0>

	case PORTB:
		if (copy_u8Value == HIGH)
 8000626:	797b      	ldrb	r3, [r7, #5]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d10a      	bne.n	8000642 <MGPIO_enSetPinValue+0x86>
		{
			SET_BIT(GPIOB->GPIO_ODR, copy_u8pin);
 800062c:	4b23      	ldr	r3, [pc, #140]	; (80006bc <MGPIO_enSetPinValue+0x100>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	79ba      	ldrb	r2, [r7, #6]
 8000632:	2101      	movs	r1, #1
 8000634:	fa01 f202 	lsl.w	r2, r1, r2
 8000638:	4611      	mov	r1, r2
 800063a:	4a20      	ldr	r2, [pc, #128]	; (80006bc <MGPIO_enSetPinValue+0x100>)
 800063c:	430b      	orrs	r3, r1
 800063e:	60d3      	str	r3, [r2, #12]
		else
		{
			local_state = OUT_OF_RANG_ERR;

		}
		break;
 8000640:	e034      	b.n	80006ac <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 8000642:	797b      	ldrb	r3, [r7, #5]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d10b      	bne.n	8000660 <MGPIO_enSetPinValue+0xa4>
			CLR_BIT(GPIOB->GPIO_ODR, copy_u8pin);
 8000648:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <MGPIO_enSetPinValue+0x100>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	79ba      	ldrb	r2, [r7, #6]
 800064e:	2101      	movs	r1, #1
 8000650:	fa01 f202 	lsl.w	r2, r1, r2
 8000654:	43d2      	mvns	r2, r2
 8000656:	4611      	mov	r1, r2
 8000658:	4a18      	ldr	r2, [pc, #96]	; (80006bc <MGPIO_enSetPinValue+0x100>)
 800065a:	400b      	ands	r3, r1
 800065c:	60d3      	str	r3, [r2, #12]
		break;
 800065e:	e025      	b.n	80006ac <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 8000660:	2300      	movs	r3, #0
 8000662:	73fb      	strb	r3, [r7, #15]
		break;
 8000664:	e022      	b.n	80006ac <MGPIO_enSetPinValue+0xf0>

	case PORTC:
		if (copy_u8Value == HIGH)
 8000666:	797b      	ldrb	r3, [r7, #5]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d10a      	bne.n	8000682 <MGPIO_enSetPinValue+0xc6>
		{
			SET_BIT(GPIOC->GPIO_ODR, copy_u8pin);
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <MGPIO_enSetPinValue+0x104>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	79ba      	ldrb	r2, [r7, #6]
 8000672:	2101      	movs	r1, #1
 8000674:	fa01 f202 	lsl.w	r2, r1, r2
 8000678:	4611      	mov	r1, r2
 800067a:	4a11      	ldr	r2, [pc, #68]	; (80006c0 <MGPIO_enSetPinValue+0x104>)
 800067c:	430b      	orrs	r3, r1
 800067e:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000680:	e014      	b.n	80006ac <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 8000682:	797b      	ldrb	r3, [r7, #5]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d10b      	bne.n	80006a0 <MGPIO_enSetPinValue+0xe4>
			CLR_BIT(GPIOC->GPIO_ODR, copy_u8pin);
 8000688:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <MGPIO_enSetPinValue+0x104>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	79ba      	ldrb	r2, [r7, #6]
 800068e:	2101      	movs	r1, #1
 8000690:	fa01 f202 	lsl.w	r2, r1, r2
 8000694:	43d2      	mvns	r2, r2
 8000696:	4611      	mov	r1, r2
 8000698:	4a09      	ldr	r2, [pc, #36]	; (80006c0 <MGPIO_enSetPinValue+0x104>)
 800069a:	400b      	ands	r3, r1
 800069c:	60d3      	str	r3, [r2, #12]
		break;
 800069e:	e005      	b.n	80006ac <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 80006a0:	2300      	movs	r3, #0
 80006a2:	73fb      	strb	r3, [r7, #15]
		break;
 80006a4:	e002      	b.n	80006ac <MGPIO_enSetPinValue+0xf0>

	default:
		local_state = OUT_OF_RANG_ERR;
 80006a6:	2300      	movs	r3, #0
 80006a8:	73fb      	strb	r3, [r7, #15]
		break;
 80006aa:	bf00      	nop
	}
	return local_state;
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	40010800 	.word	0x40010800
 80006bc:	40010c00 	.word	0x40010c00
 80006c0:	40011000 	.word	0x40011000

080006c4 <MGPIO_enSetPortDirection>:

	return local_state;
}

ErrorState_t MGPIO_enSetPortDirection(GPIO_ID_t copy_u8CRID,PORT_t copy_u8port,  MODE_t copy_u8Mode)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
 80006ce:	460b      	mov	r3, r1
 80006d0:	71bb      	strb	r3, [r7, #6]
 80006d2:	4613      	mov	r3, r2
 80006d4:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 80006d6:	2302      	movs	r3, #2
 80006d8:	73fb      	strb	r3, [r7, #15]
	switch(copy_u8port)
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	2b03      	cmp	r3, #3
 80006de:	d038      	beq.n	8000752 <MGPIO_enSetPortDirection+0x8e>
 80006e0:	2b03      	cmp	r3, #3
 80006e2:	dc4f      	bgt.n	8000784 <MGPIO_enSetPortDirection+0xc0>
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d002      	beq.n	80006ee <MGPIO_enSetPortDirection+0x2a>
 80006e8:	2b02      	cmp	r3, #2
 80006ea:	d019      	beq.n	8000720 <MGPIO_enSetPortDirection+0x5c>
 80006ec:	e04a      	b.n	8000784 <MGPIO_enSetPortDirection+0xc0>
	{
	case PORTA:
		if(copy_u8CRID == GPIO_CRL_ID)
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d107      	bne.n	8000704 <MGPIO_enSetPortDirection+0x40>
		{
			GPIOA->GPIO_CRL = copy_u8Mode * PORT_OFFSET ;
 80006f4:	797b      	ldrb	r3, [r7, #5]
 80006f6:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 80006fa:	fb02 f203 	mul.w	r2, r2, r3
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <MGPIO_enSetPortDirection+0xd0>)
 8000700:	601a      	str	r2, [r3, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000702:	e041      	b.n	8000788 <MGPIO_enSetPortDirection+0xc4>
		else if(copy_u8CRID == GPIO_CRH_ID)
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d107      	bne.n	800071a <MGPIO_enSetPortDirection+0x56>
			GPIOA->GPIO_CRH = copy_u8Mode * PORT_OFFSET ;
 800070a:	797b      	ldrb	r3, [r7, #5]
 800070c:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8000710:	fb02 f203 	mul.w	r2, r2, r3
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <MGPIO_enSetPortDirection+0xd0>)
 8000716:	605a      	str	r2, [r3, #4]
		break;
 8000718:	e036      	b.n	8000788 <MGPIO_enSetPortDirection+0xc4>
			local_state = OUT_OF_RANG_ERR;
 800071a:	2300      	movs	r3, #0
 800071c:	73fb      	strb	r3, [r7, #15]
		break;
 800071e:	e033      	b.n	8000788 <MGPIO_enSetPortDirection+0xc4>


	case PORTB:
		if(copy_u8CRID == GPIO_CRL_ID)
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d107      	bne.n	8000736 <MGPIO_enSetPortDirection+0x72>
		{
			GPIOB->GPIO_CRL = copy_u8Mode * PORT_OFFSET ;
 8000726:	797b      	ldrb	r3, [r7, #5]
 8000728:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800072c:	fb02 f203 	mul.w	r2, r2, r3
 8000730:	4b19      	ldr	r3, [pc, #100]	; (8000798 <MGPIO_enSetPortDirection+0xd4>)
 8000732:	601a      	str	r2, [r3, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000734:	e028      	b.n	8000788 <MGPIO_enSetPortDirection+0xc4>
		else if(copy_u8CRID == GPIO_CRH_ID)
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	2b01      	cmp	r3, #1
 800073a:	d107      	bne.n	800074c <MGPIO_enSetPortDirection+0x88>
			GPIOB->GPIO_CRH = copy_u8Mode * PORT_OFFSET ;
 800073c:	797b      	ldrb	r3, [r7, #5]
 800073e:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8000742:	fb02 f203 	mul.w	r2, r2, r3
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MGPIO_enSetPortDirection+0xd4>)
 8000748:	605a      	str	r2, [r3, #4]
		break;
 800074a:	e01d      	b.n	8000788 <MGPIO_enSetPortDirection+0xc4>
			local_state = OUT_OF_RANG_ERR;
 800074c:	2300      	movs	r3, #0
 800074e:	73fb      	strb	r3, [r7, #15]
		break;
 8000750:	e01a      	b.n	8000788 <MGPIO_enSetPortDirection+0xc4>

	case PORTC:
		if(copy_u8CRID == GPIO_CRL_ID)
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d107      	bne.n	8000768 <MGPIO_enSetPortDirection+0xa4>
		{
			GPIOC->GPIO_CRL = copy_u8Mode * PORT_OFFSET ;
 8000758:	797b      	ldrb	r3, [r7, #5]
 800075a:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800075e:	fb02 f203 	mul.w	r2, r2, r3
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MGPIO_enSetPortDirection+0xd8>)
 8000764:	601a      	str	r2, [r3, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000766:	e00f      	b.n	8000788 <MGPIO_enSetPortDirection+0xc4>
		else if(copy_u8CRID == GPIO_CRH_ID)
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d107      	bne.n	800077e <MGPIO_enSetPortDirection+0xba>
			GPIOC->GPIO_CRH = copy_u8Mode * PORT_OFFSET ;
 800076e:	797b      	ldrb	r3, [r7, #5]
 8000770:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8000774:	fb02 f203 	mul.w	r2, r2, r3
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <MGPIO_enSetPortDirection+0xd8>)
 800077a:	605a      	str	r2, [r3, #4]
		break;
 800077c:	e004      	b.n	8000788 <MGPIO_enSetPortDirection+0xc4>
			local_state = OUT_OF_RANG_ERR;
 800077e:	2300      	movs	r3, #0
 8000780:	73fb      	strb	r3, [r7, #15]
		break;
 8000782:	e001      	b.n	8000788 <MGPIO_enSetPortDirection+0xc4>

	default:
		local_state = OUT_OF_RANG_ERR;
 8000784:	2300      	movs	r3, #0
 8000786:	73fb      	strb	r3, [r7, #15]
	}

	return local_state;
 8000788:	7bfb      	ldrb	r3, [r7, #15]
}
 800078a:	4618      	mov	r0, r3
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	40010800 	.word	0x40010800
 8000798:	40010c00 	.word	0x40010c00
 800079c:	40011000 	.word	0x40011000

080007a0 <MGPIO_enSetPortValue>:

ErrorState_t MGPIO_enSetPortValue(GPIO_ID_t copy_u8CRID, PORT_t copy_u8port, VALUE_t copy_u8Value)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
 80007aa:	460b      	mov	r3, r1
 80007ac:	71bb      	strb	r3, [r7, #6]
 80007ae:	4613      	mov	r3, r2
 80007b0:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 80007b2:	2302      	movs	r3, #2
 80007b4:	73fb      	strb	r3, [r7, #15]

	switch(copy_u8port)
 80007b6:	79bb      	ldrb	r3, [r7, #6]
 80007b8:	2b03      	cmp	r3, #3
 80007ba:	f000 8088 	beq.w	80008ce <MGPIO_enSetPortValue+0x12e>
 80007be:	2b03      	cmp	r3, #3
 80007c0:	f300 80c5 	bgt.w	800094e <MGPIO_enSetPortValue+0x1ae>
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d002      	beq.n	80007ce <MGPIO_enSetPortValue+0x2e>
 80007c8:	2b02      	cmp	r3, #2
 80007ca:	d040      	beq.n	800084e <MGPIO_enSetPortValue+0xae>
 80007cc:	e0bf      	b.n	800094e <MGPIO_enSetPortValue+0x1ae>
	{
	case PORTA:
		if ((copy_u8Value == HIGH) && (copy_u8CRID == GPIO_CRL_ID))
 80007ce:	797b      	ldrb	r3, [r7, #5]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d109      	bne.n	80007e8 <MGPIO_enSetPortValue+0x48>
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d106      	bne.n	80007e8 <MGPIO_enSetPortValue+0x48>
		{
			GPIOA->GPIO_ODR |= PORT_LVALUE;
 80007da:	4b61      	ldr	r3, [pc, #388]	; (8000960 <MGPIO_enSetPortValue+0x1c0>)
 80007dc:	68db      	ldr	r3, [r3, #12]
 80007de:	4a60      	ldr	r2, [pc, #384]	; (8000960 <MGPIO_enSetPortValue+0x1c0>)
 80007e0:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80007e4:	60d3      	str	r3, [r2, #12]
 80007e6:	e031      	b.n	800084c <MGPIO_enSetPortValue+0xac>
		}
		else if ((copy_u8Value == HIGH) && (copy_u8CRID == GPIO_CRH_ID))
 80007e8:	797b      	ldrb	r3, [r7, #5]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d109      	bne.n	8000802 <MGPIO_enSetPortValue+0x62>
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d106      	bne.n	8000802 <MGPIO_enSetPortValue+0x62>
		{
			GPIOA->GPIO_ODR |= PORT_HVALUE;
 80007f4:	4b5a      	ldr	r3, [pc, #360]	; (8000960 <MGPIO_enSetPortValue+0x1c0>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	4a59      	ldr	r2, [pc, #356]	; (8000960 <MGPIO_enSetPortValue+0x1c0>)
 80007fa:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80007fe:	60d3      	str	r3, [r2, #12]
 8000800:	e024      	b.n	800084c <MGPIO_enSetPortValue+0xac>
		}
		else if ((copy_u8Value == LOW) && (copy_u8CRID == GPIO_CRL_ID))
 8000802:	797b      	ldrb	r3, [r7, #5]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d10d      	bne.n	8000824 <MGPIO_enSetPortValue+0x84>
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d10a      	bne.n	8000824 <MGPIO_enSetPortValue+0x84>
		{
			GPIOA->GPIO_ODR &= ~(PORT_LVALUE);
 800080e:	4b54      	ldr	r3, [pc, #336]	; (8000960 <MGPIO_enSetPortValue+0x1c0>)
 8000810:	68db      	ldr	r3, [r3, #12]
 8000812:	4a53      	ldr	r2, [pc, #332]	; (8000960 <MGPIO_enSetPortValue+0x1c0>)
 8000814:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000818:	60d3      	str	r3, [r2, #12]
			GPIOA->GPIO_ODR |= PORT_RESET;
 800081a:	4b51      	ldr	r3, [pc, #324]	; (8000960 <MGPIO_enSetPortValue+0x1c0>)
 800081c:	4a50      	ldr	r2, [pc, #320]	; (8000960 <MGPIO_enSetPortValue+0x1c0>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	60d3      	str	r3, [r2, #12]
 8000822:	e013      	b.n	800084c <MGPIO_enSetPortValue+0xac>
		}
		else if ((copy_u8Value == LOW) && (copy_u8CRID == GPIO_CRH_ID))
 8000824:	797b      	ldrb	r3, [r7, #5]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d10d      	bne.n	8000846 <MGPIO_enSetPortValue+0xa6>
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d10a      	bne.n	8000846 <MGPIO_enSetPortValue+0xa6>
		{
			GPIOA->GPIO_ODR &= ~(PORT_HVALUE);
 8000830:	4b4b      	ldr	r3, [pc, #300]	; (8000960 <MGPIO_enSetPortValue+0x1c0>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	4a4a      	ldr	r2, [pc, #296]	; (8000960 <MGPIO_enSetPortValue+0x1c0>)
 8000836:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800083a:	60d3      	str	r3, [r2, #12]
			GPIOA->GPIO_ODR |= PORT_RESET;
 800083c:	4b48      	ldr	r3, [pc, #288]	; (8000960 <MGPIO_enSetPortValue+0x1c0>)
 800083e:	4a48      	ldr	r2, [pc, #288]	; (8000960 <MGPIO_enSetPortValue+0x1c0>)
 8000840:	68db      	ldr	r3, [r3, #12]
 8000842:	60d3      	str	r3, [r2, #12]
 8000844:	e002      	b.n	800084c <MGPIO_enSetPortValue+0xac>
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
 8000846:	2300      	movs	r3, #0
 8000848:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800084a:	e083      	b.n	8000954 <MGPIO_enSetPortValue+0x1b4>
 800084c:	e082      	b.n	8000954 <MGPIO_enSetPortValue+0x1b4>

	case PORTB:
		if ((copy_u8Value == HIGH) && (copy_u8CRID == GPIO_CRL_ID))
 800084e:	797b      	ldrb	r3, [r7, #5]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d109      	bne.n	8000868 <MGPIO_enSetPortValue+0xc8>
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d106      	bne.n	8000868 <MGPIO_enSetPortValue+0xc8>
		{
			GPIOB->GPIO_ODR |= PORT_LVALUE;
 800085a:	4b42      	ldr	r3, [pc, #264]	; (8000964 <MGPIO_enSetPortValue+0x1c4>)
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	4a41      	ldr	r2, [pc, #260]	; (8000964 <MGPIO_enSetPortValue+0x1c4>)
 8000860:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000864:	60d3      	str	r3, [r2, #12]
 8000866:	e031      	b.n	80008cc <MGPIO_enSetPortValue+0x12c>
		}
		else if ((copy_u8Value == HIGH) && (copy_u8CRID == GPIO_CRH_ID))
 8000868:	797b      	ldrb	r3, [r7, #5]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d109      	bne.n	8000882 <MGPIO_enSetPortValue+0xe2>
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d106      	bne.n	8000882 <MGPIO_enSetPortValue+0xe2>
		{
			GPIOB->GPIO_ODR |= PORT_HVALUE;
 8000874:	4b3b      	ldr	r3, [pc, #236]	; (8000964 <MGPIO_enSetPortValue+0x1c4>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	4a3a      	ldr	r2, [pc, #232]	; (8000964 <MGPIO_enSetPortValue+0x1c4>)
 800087a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 800087e:	60d3      	str	r3, [r2, #12]
 8000880:	e024      	b.n	80008cc <MGPIO_enSetPortValue+0x12c>
		}
		else if ((copy_u8Value == LOW) && (copy_u8CRID == GPIO_CRL_ID))
 8000882:	797b      	ldrb	r3, [r7, #5]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d10d      	bne.n	80008a4 <MGPIO_enSetPortValue+0x104>
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d10a      	bne.n	80008a4 <MGPIO_enSetPortValue+0x104>
		{
			GPIOB->GPIO_ODR &= ~(PORT_LVALUE);
 800088e:	4b35      	ldr	r3, [pc, #212]	; (8000964 <MGPIO_enSetPortValue+0x1c4>)
 8000890:	68db      	ldr	r3, [r3, #12]
 8000892:	4a34      	ldr	r2, [pc, #208]	; (8000964 <MGPIO_enSetPortValue+0x1c4>)
 8000894:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000898:	60d3      	str	r3, [r2, #12]
			GPIOB->GPIO_ODR |= PORT_RESET;
 800089a:	4b32      	ldr	r3, [pc, #200]	; (8000964 <MGPIO_enSetPortValue+0x1c4>)
 800089c:	4a31      	ldr	r2, [pc, #196]	; (8000964 <MGPIO_enSetPortValue+0x1c4>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	60d3      	str	r3, [r2, #12]
 80008a2:	e013      	b.n	80008cc <MGPIO_enSetPortValue+0x12c>
		}
		else if ((copy_u8Value == LOW) && (copy_u8CRID == GPIO_CRH_ID))
 80008a4:	797b      	ldrb	r3, [r7, #5]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d10d      	bne.n	80008c6 <MGPIO_enSetPortValue+0x126>
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d10a      	bne.n	80008c6 <MGPIO_enSetPortValue+0x126>
		{
			GPIOB->GPIO_ODR &= ~(PORT_HVALUE);
 80008b0:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <MGPIO_enSetPortValue+0x1c4>)
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	4a2b      	ldr	r2, [pc, #172]	; (8000964 <MGPIO_enSetPortValue+0x1c4>)
 80008b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80008ba:	60d3      	str	r3, [r2, #12]
			GPIOB->GPIO_ODR |= PORT_RESET;
 80008bc:	4b29      	ldr	r3, [pc, #164]	; (8000964 <MGPIO_enSetPortValue+0x1c4>)
 80008be:	4a29      	ldr	r2, [pc, #164]	; (8000964 <MGPIO_enSetPortValue+0x1c4>)
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	60d3      	str	r3, [r2, #12]
 80008c4:	e002      	b.n	80008cc <MGPIO_enSetPortValue+0x12c>
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
 80008c6:	2300      	movs	r3, #0
 80008c8:	73fb      	strb	r3, [r7, #15]
		}
		break;
 80008ca:	e043      	b.n	8000954 <MGPIO_enSetPortValue+0x1b4>
 80008cc:	e042      	b.n	8000954 <MGPIO_enSetPortValue+0x1b4>

	case PORTC:
		if ((copy_u8Value == HIGH) && (copy_u8CRID == GPIO_CRL_ID))
 80008ce:	797b      	ldrb	r3, [r7, #5]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d109      	bne.n	80008e8 <MGPIO_enSetPortValue+0x148>
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d106      	bne.n	80008e8 <MGPIO_enSetPortValue+0x148>
		{
			GPIOC->GPIO_ODR |= PORT_LVALUE;
 80008da:	4b23      	ldr	r3, [pc, #140]	; (8000968 <MGPIO_enSetPortValue+0x1c8>)
 80008dc:	68db      	ldr	r3, [r3, #12]
 80008de:	4a22      	ldr	r2, [pc, #136]	; (8000968 <MGPIO_enSetPortValue+0x1c8>)
 80008e0:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80008e4:	60d3      	str	r3, [r2, #12]
 80008e6:	e031      	b.n	800094c <MGPIO_enSetPortValue+0x1ac>
		}
		else if ((copy_u8Value == HIGH) && (copy_u8CRID == GPIO_CRH_ID))
 80008e8:	797b      	ldrb	r3, [r7, #5]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d109      	bne.n	8000902 <MGPIO_enSetPortValue+0x162>
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d106      	bne.n	8000902 <MGPIO_enSetPortValue+0x162>
		{
			GPIOC->GPIO_ODR |= PORT_HVALUE;
 80008f4:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <MGPIO_enSetPortValue+0x1c8>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	4a1b      	ldr	r2, [pc, #108]	; (8000968 <MGPIO_enSetPortValue+0x1c8>)
 80008fa:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80008fe:	60d3      	str	r3, [r2, #12]
 8000900:	e024      	b.n	800094c <MGPIO_enSetPortValue+0x1ac>
		}
		else if ((copy_u8Value == LOW) && (copy_u8CRID == GPIO_CRL_ID))
 8000902:	797b      	ldrb	r3, [r7, #5]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d10d      	bne.n	8000924 <MGPIO_enSetPortValue+0x184>
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d10a      	bne.n	8000924 <MGPIO_enSetPortValue+0x184>
		{
			GPIOC->GPIO_ODR &= ~(PORT_LVALUE);
 800090e:	4b16      	ldr	r3, [pc, #88]	; (8000968 <MGPIO_enSetPortValue+0x1c8>)
 8000910:	68db      	ldr	r3, [r3, #12]
 8000912:	4a15      	ldr	r2, [pc, #84]	; (8000968 <MGPIO_enSetPortValue+0x1c8>)
 8000914:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000918:	60d3      	str	r3, [r2, #12]
			GPIOC->GPIO_ODR |= PORT_RESET;
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MGPIO_enSetPortValue+0x1c8>)
 800091c:	4a12      	ldr	r2, [pc, #72]	; (8000968 <MGPIO_enSetPortValue+0x1c8>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	60d3      	str	r3, [r2, #12]
 8000922:	e013      	b.n	800094c <MGPIO_enSetPortValue+0x1ac>
		}
		else if ((copy_u8Value == LOW) && (copy_u8CRID == GPIO_CRH_ID))
 8000924:	797b      	ldrb	r3, [r7, #5]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d10d      	bne.n	8000946 <MGPIO_enSetPortValue+0x1a6>
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d10a      	bne.n	8000946 <MGPIO_enSetPortValue+0x1a6>
		{
			GPIOC->GPIO_ODR &= ~(PORT_HVALUE);
 8000930:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <MGPIO_enSetPortValue+0x1c8>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	4a0c      	ldr	r2, [pc, #48]	; (8000968 <MGPIO_enSetPortValue+0x1c8>)
 8000936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800093a:	60d3      	str	r3, [r2, #12]
			GPIOC->GPIO_ODR |= PORT_RESET;
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <MGPIO_enSetPortValue+0x1c8>)
 800093e:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <MGPIO_enSetPortValue+0x1c8>)
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	60d3      	str	r3, [r2, #12]
 8000944:	e002      	b.n	800094c <MGPIO_enSetPortValue+0x1ac>
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
 8000946:	2300      	movs	r3, #0
 8000948:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800094a:	e003      	b.n	8000954 <MGPIO_enSetPortValue+0x1b4>
 800094c:	e002      	b.n	8000954 <MGPIO_enSetPortValue+0x1b4>

	default:
		local_state = OUT_OF_RANG_ERR;
 800094e:	2300      	movs	r3, #0
 8000950:	73fb      	strb	r3, [r7, #15]
		break;
 8000952:	bf00      	nop

	}
	return local_state;
 8000954:	7bfb      	ldrb	r3, [r7, #15]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	40010800 	.word	0x40010800
 8000964:	40010c00 	.word	0x40010c00
 8000968:	40011000 	.word	0x40011000

0800096c <MNVIC_enEnableNVIC>:
#include "MNVIC_int.h"
#include "MNVIC_config.h"
#include "MNVIC_priv.h"

ErrorState_t MNVIC_enEnableNVIC(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
	SCB_AIRCR = NVIC_GROUPSUB_PRI;
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <MNVIC_enEnableNVIC+0x14>)
 8000972:	4a04      	ldr	r2, [pc, #16]	; (8000984 <MNVIC_enEnableNVIC+0x18>)
 8000974:	601a      	str	r2, [r3, #0]

	return SUCCESS;
 8000976:	2302      	movs	r3, #2
}
 8000978:	4618      	mov	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr
 8000980:	e000ed0c 	.word	0xe000ed0c
 8000984:	05fa0600 	.word	0x05fa0600

08000988 <MNVIC_enEnableInt>:


ErrorState_t MNVIC_enEnableInt(VectorTable_t copy_u8IRQnum)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
	ErrorState_t  local_state = SUCCESS;
 8000992:	2302      	movs	r3, #2
 8000994:	73fb      	strb	r3, [r7, #15]

	if (copy_u8IRQnum <= 31)
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b1f      	cmp	r3, #31
 800099a:	d805      	bhi.n	80009a8 <MNVIC_enEnableInt+0x20>
	{
		NVIC->NVIC_ISER[0] = (1<<copy_u8IRQnum);
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	2201      	movs	r2, #1
 80009a0:	409a      	lsls	r2, r3
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MNVIC_enEnableInt+0x48>)
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	e00d      	b.n	80009c4 <MNVIC_enEnableInt+0x3c>
	}
	else if (copy_u8IRQnum <= 63)
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	2b3f      	cmp	r3, #63	; 0x3f
 80009ac:	d808      	bhi.n	80009c0 <MNVIC_enEnableInt+0x38>
	{
		copy_u8IRQnum -= 32;
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	3b20      	subs	r3, #32
 80009b2:	71fb      	strb	r3, [r7, #7]
		NVIC->NVIC_ISER[1] = (1<<copy_u8IRQnum);
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	2201      	movs	r2, #1
 80009b8:	409a      	lsls	r2, r3
 80009ba:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <MNVIC_enEnableInt+0x48>)
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	e001      	b.n	80009c4 <MNVIC_enEnableInt+0x3c>
	}
	else
	{
		local_state = OUT_OF_RANG_ERR;
 80009c0:	2300      	movs	r3, #0
 80009c2:	73fb      	strb	r3, [r7, #15]
	}
	return local_state;
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3714      	adds	r7, #20
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	e000e100 	.word	0xe000e100

080009d4 <MRCC_enSysClkINIT>:
#include "MRCC_int.h"
#include "MRCC_config.h"
#include "MRCC_priv.h"

ErrorState_t MRCC_enSysClkINIT(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0


	/** CLK source is HSI **/
#elif(RCC_CLK_TYPE == RCC_HSI)
	/* 1. ENABLE the HSI */
	SET_BIT(RCC->RCC_CR, HSION);
 80009d8:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MRCC_enSysClkINIT+0x74>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a1a      	ldr	r2, [pc, #104]	; (8000a48 <MRCC_enSysClkINIT+0x74>)
 80009de:	f043 0301 	orr.w	r3, r3, #1
 80009e2:	6013      	str	r3, [r2, #0]

	/* 2. wait till HSE is READY 'settling time finished', stable */
	while (!(GET_BIT(RCC->RCC_CR, HSIRDY)));
 80009e4:	bf00      	nop
 80009e6:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MRCC_enSysClkINIT+0x74>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	085b      	lsrs	r3, r3, #1
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d0f8      	beq.n	80009e6 <MRCC_enSysClkINIT+0x12>

	/* 3. Enable System switch clock with HSI */
	CLR_BIT(RCC->RCC_CFGR, SWC);
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MRCC_enSysClkINIT+0x74>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	4a13      	ldr	r2, [pc, #76]	; (8000a48 <MRCC_enSysClkINIT+0x74>)
 80009fa:	f023 0301 	bic.w	r3, r3, #1
 80009fe:	6053      	str	r3, [r2, #4]

#else
#error("WRONG CLK TYPE");
#endif
	/* MASK the AHB and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= RCC_AHB_MASK;
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MRCC_enSysClkINIT+0x74>)
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	4a10      	ldr	r2, [pc, #64]	; (8000a48 <MRCC_enSysClkINIT+0x74>)
 8000a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a0a:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= RCC_AHB_PRESCALER;
 8000a0c:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MRCC_enSysClkINIT+0x74>)
 8000a0e:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <MRCC_enSysClkINIT+0x74>)
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	6053      	str	r3, [r2, #4]

	/* MASK the APB1 and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= RCC_APB1_MASK;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MRCC_enSysClkINIT+0x74>)
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <MRCC_enSysClkINIT+0x74>)
 8000a1a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a1e:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= RCC_APB1_PRESCALER_MODE;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MRCC_enSysClkINIT+0x74>)
 8000a22:	4a09      	ldr	r2, [pc, #36]	; (8000a48 <MRCC_enSysClkINIT+0x74>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	6053      	str	r3, [r2, #4]

	/* MASK the APB2 and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= RCC_APB2_MASK;
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <MRCC_enSysClkINIT+0x74>)
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	4a06      	ldr	r2, [pc, #24]	; (8000a48 <MRCC_enSysClkINIT+0x74>)
 8000a2e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a32:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= RCC_APB2_PRESCALER_MODE;
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <MRCC_enSysClkINIT+0x74>)
 8000a36:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <MRCC_enSysClkINIT+0x74>)
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	6053      	str	r3, [r2, #4]
		RCC->RCC_CFGR &= RCC_MCO_MASK;
		RCC->RCC_CFGR |= RCC_MCO_MODE ;
	}
#endif

	return SUCCESS;
 8000a3c:	2302      	movs	r3, #2
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000

08000a4c <MRCC_enEnablePeripheralCLK>:

ErrorState_t MRCC_enEnablePeripheralCLK(peripheral_ID copy_u8Peripheral)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
	ErrorState_t local_state = SUCCESS;
 8000a56:	2302      	movs	r3, #2
 8000a58:	73fb      	strb	r3, [r7, #15]

	/* based on predefined Peripheral, switch to corresponding Register, and Enabled it*/
	if (copy_u8Peripheral <= 31)
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	2b1f      	cmp	r3, #31
 8000a5e:	d80a      	bhi.n	8000a76 <MRCC_enEnablePeripheralCLK+0x2a>
		SET_BIT(RCC->RCC_AHBENR, copy_u8Peripheral);
 8000a60:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <MRCC_enEnablePeripheralCLK+0x80>)
 8000a62:	695b      	ldr	r3, [r3, #20]
 8000a64:	79fa      	ldrb	r2, [r7, #7]
 8000a66:	2101      	movs	r1, #1
 8000a68:	fa01 f202 	lsl.w	r2, r1, r2
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4a17      	ldr	r2, [pc, #92]	; (8000acc <MRCC_enEnablePeripheralCLK+0x80>)
 8000a70:	430b      	orrs	r3, r1
 8000a72:	6153      	str	r3, [r2, #20]
 8000a74:	e023      	b.n	8000abe <MRCC_enEnablePeripheralCLK+0x72>

	else if (copy_u8Peripheral <= 63)
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2b3f      	cmp	r3, #63	; 0x3f
 8000a7a:	d80d      	bhi.n	8000a98 <MRCC_enEnablePeripheralCLK+0x4c>
	{
		copy_u8Peripheral -= 32;
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	3b20      	subs	r3, #32
 8000a80:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->RCC_APB1ENR, copy_u8Peripheral);
 8000a82:	4b12      	ldr	r3, [pc, #72]	; (8000acc <MRCC_enEnablePeripheralCLK+0x80>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	79fa      	ldrb	r2, [r7, #7]
 8000a88:	2101      	movs	r1, #1
 8000a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a8e:	4611      	mov	r1, r2
 8000a90:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <MRCC_enEnablePeripheralCLK+0x80>)
 8000a92:	430b      	orrs	r3, r1
 8000a94:	61d3      	str	r3, [r2, #28]
 8000a96:	e012      	b.n	8000abe <MRCC_enEnablePeripheralCLK+0x72>
	}

	else if (copy_u8Peripheral <= 95)
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	2b5f      	cmp	r3, #95	; 0x5f
 8000a9c:	d80d      	bhi.n	8000aba <MRCC_enEnablePeripheralCLK+0x6e>
	{
		copy_u8Peripheral -= 64;
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	3b40      	subs	r3, #64	; 0x40
 8000aa2:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->RCC_APB2ENR, copy_u8Peripheral);
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <MRCC_enEnablePeripheralCLK+0x80>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	79fa      	ldrb	r2, [r7, #7]
 8000aaa:	2101      	movs	r1, #1
 8000aac:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	4a06      	ldr	r2, [pc, #24]	; (8000acc <MRCC_enEnablePeripheralCLK+0x80>)
 8000ab4:	430b      	orrs	r3, r1
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	e001      	b.n	8000abe <MRCC_enEnablePeripheralCLK+0x72>
	}

	else
	{
		local_state = OUT_OF_RANG_ERR;
 8000aba:	2300      	movs	r3, #0
 8000abc:	73fb      	strb	r3, [r7, #15]
	}
	return local_state;
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	40021000 	.word	0x40021000

08000ad0 <MSTK_enInit>:

void (*STK_Callback)(void) = NULL;
static u8 flag = 0;

ErrorState_t MSTK_enInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

#if (STK_PRESCALER == STK_AHB_PRESCALER)
	SET_BIT(STK->STK_CTRL, CLKSOURCE);

#elif(STK_PRESCALER == STK_AHB_DIV8_PRESCALER)
	CLR_BIT(STK->STK_CTRL, CLKSOURCE);
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <MSTK_enInit+0x1c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <MSTK_enInit+0x1c>)
 8000ada:	f023 0304 	bic.w	r3, r3, #4
 8000ade:	6013      	str	r3, [r2, #0]

#else
#error ("YOU SELECTED THE WRONG PRESCALER");
#endif

	return SUCCESS;
 8000ae0:	2302      	movs	r3, #2
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000e010 	.word	0xe000e010

08000af0 <MSTK_enDelayMS>:

ErrorState_t MSTK_enDelayMS(u32 copy_u16delayMS)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	STK->STK_LOAD = copy_u16delayMS * 1000 ;
 8000af8:	4a11      	ldr	r2, [pc, #68]	; (8000b40 <MSTK_enDelayMS+0x50>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b00:	fb01 f303 	mul.w	r3, r1, r3
 8000b04:	6053      	str	r3, [r2, #4]
	SET_BIT(STK->STK_CTRL, ENABLE);
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MSTK_enDelayMS+0x50>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <MSTK_enDelayMS+0x50>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6013      	str	r3, [r2, #0]

	while (!(GET_BIT(STK->STK_CTRL, COUNTFLAG)));
 8000b12:	bf00      	nop
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <MSTK_enDelayMS+0x50>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	0c1b      	lsrs	r3, r3, #16
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d0f8      	beq.n	8000b14 <MSTK_enDelayMS+0x24>

	CLR_BIT(STK->STK_CTRL, ENABLE);
 8000b22:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <MSTK_enDelayMS+0x50>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a06      	ldr	r2, [pc, #24]	; (8000b40 <MSTK_enDelayMS+0x50>)
 8000b28:	f023 0301 	bic.w	r3, r3, #1
 8000b2c:	6013      	str	r3, [r2, #0]
	STK->STK_VAL = 0;
 8000b2e:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <MSTK_enDelayMS+0x50>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]

	return SUCCESS;
 8000b34:	2302      	movs	r3, #2

}
 8000b36:	4618      	mov	r0, r3
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr
 8000b40:	e000e010 	.word	0xe000e010

08000b44 <SysTick_Handler>:
}



void SysTick_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
	volatile u8 local_temp = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	71fb      	strb	r3, [r7, #7]
	if (flag == 1)
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <SysTick_Handler+0x58>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d10e      	bne.n	8000b74 <SysTick_Handler+0x30>
	{
		CLR_BIT(STK->STK_CTRL, TICKINT);
 8000b56:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <SysTick_Handler+0x5c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a11      	ldr	r2, [pc, #68]	; (8000ba0 <SysTick_Handler+0x5c>)
 8000b5c:	f023 0302 	bic.w	r3, r3, #2
 8000b60:	6013      	str	r3, [r2, #0]
		CLR_BIT(STK->STK_CTRL, ENABLE);
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <SysTick_Handler+0x5c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <SysTick_Handler+0x5c>)
 8000b68:	f023 0301 	bic.w	r3, r3, #1
 8000b6c:	6013      	str	r3, [r2, #0]
		STK->STK_VAL = 0;
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <SysTick_Handler+0x5c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
	}

	if (STK_Callback != NULL)
 8000b74:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <SysTick_Handler+0x60>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d002      	beq.n	8000b82 <SysTick_Handler+0x3e>
	{
		STK_Callback();
 8000b7c:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <SysTick_Handler+0x60>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4798      	blx	r3
	}

	local_temp = GET_BIT(STK->STK_CTRL,COUNTFLAG);
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <SysTick_Handler+0x5c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	0c1b      	lsrs	r3, r3, #16
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	71fb      	strb	r3, [r7, #7]
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000060 	.word	0x20000060
 8000ba0:	e000e010 	.word	0xe000e010
 8000ba4:	2000005c 	.word	0x2000005c

08000ba8 <main>:

static u8 flag = 0 ;
void state(void);

int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
	PB_ST button = {PORTA, PIN0, PULL_UP};
 8000bae:	2301      	movs	r3, #1
 8000bb0:	713b      	strb	r3, [r7, #4]
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	717b      	strb	r3, [r7, #5]
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	71bb      	strb	r3, [r7, #6]
	MRCC_enSysClkINIT();
 8000bba:	f7ff ff0b 	bl	80009d4 <MRCC_enSysClkINIT>
	MRCC_enEnablePeripheralCLK(IOPA);
 8000bbe:	2042      	movs	r0, #66	; 0x42
 8000bc0:	f7ff ff44 	bl	8000a4c <MRCC_enEnablePeripheralCLK>
	MRCC_enEnablePeripheralCLK(IOPB);
 8000bc4:	2043      	movs	r0, #67	; 0x43
 8000bc6:	f7ff ff41 	bl	8000a4c <MRCC_enEnablePeripheralCLK>

	MGPIO_enSetPortDirection(GPIO_CRH_ID, PORTB, OUT_2MHZ_PP);
 8000bca:	2202      	movs	r2, #2
 8000bcc:	2102      	movs	r1, #2
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f7ff fd78 	bl	80006c4 <MGPIO_enSetPortDirection>
	HPB_enInit(&button);
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff faf0 	bl	80001bc <HPB_enInit>

	MEXTI_enCallBack(EXTI0_LINE, state);
 8000bdc:	4962      	ldr	r1, [pc, #392]	; (8000d68 <main+0x1c0>)
 8000bde:	2000      	movs	r0, #0
 8000be0:	f7ff fb2c 	bl	800023c <MEXTI_enCallBack>
	MNVIC_enEnableNVIC();
 8000be4:	f7ff fec2 	bl	800096c <MNVIC_enEnableNVIC>
	MNVIC_enEnableInt(EXT0_INT);
 8000be8:	2006      	movs	r0, #6
 8000bea:	f7ff fecd 	bl	8000988 <MNVIC_enEnableInt>
	MEXTI_enInit();
 8000bee:	f7ff fb0f 	bl	8000210 <MEXTI_enInit>
	MSTK_enInit();
 8000bf2:	f7ff ff6d 	bl	8000ad0 <MSTK_enInit>

	while (1)
	{
		if (flag == 1)
 8000bf6:	4b5d      	ldr	r3, [pc, #372]	; (8000d6c <main+0x1c4>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d141      	bne.n	8000c82 <main+0xda>
		{
			for (u8 i = 0; i < 4; i++)
 8000bfe:	2300      	movs	r3, #0
 8000c00:	75fb      	strb	r3, [r7, #23]
 8000c02:	e03a      	b.n	8000c7a <main+0xd2>
			{
				for (int j = 0; j < 8; j++)
 8000c04:	2300      	movs	r3, #0
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	e031      	b.n	8000c6e <main+0xc6>
				{
					HLED_enSetON(PORTB, j+8);
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	3308      	adds	r3, #8
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	4619      	mov	r1, r3
 8000c14:	2002      	movs	r0, #2
 8000c16:	f7ff faab 	bl	8000170 <HLED_enSetON>
					MSTK_enDelayMS(200);
 8000c1a:	20c8      	movs	r0, #200	; 0xc8
 8000c1c:	f7ff ff68 	bl	8000af0 <MSTK_enDelayMS>
					HLED_enSetOFF(PORTB, j+8);
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	3308      	adds	r3, #8
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	4619      	mov	r1, r3
 8000c2a:	2002      	movs	r0, #2
 8000c2c:	f7ff fab3 	bl	8000196 <HLED_enSetOFF>
					if (j+8 == 15)
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	2b07      	cmp	r3, #7
 8000c34:	d118      	bne.n	8000c68 <main+0xc0>
					{
						for (int k = (j+8)-1; k >= 8; k--)
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	3307      	adds	r3, #7
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	e011      	b.n	8000c62 <main+0xba>
						{
							HLED_enSetON(PORTB, k);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	4619      	mov	r1, r3
 8000c44:	2002      	movs	r0, #2
 8000c46:	f7ff fa93 	bl	8000170 <HLED_enSetON>
							MSTK_enDelayMS(200);
 8000c4a:	20c8      	movs	r0, #200	; 0xc8
 8000c4c:	f7ff ff50 	bl	8000af0 <MSTK_enDelayMS>
							HLED_enSetOFF(PORTB, k);
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	4619      	mov	r1, r3
 8000c56:	2002      	movs	r0, #2
 8000c58:	f7ff fa9d 	bl	8000196 <HLED_enSetOFF>
						for (int k = (j+8)-1; k >= 8; k--)
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2b07      	cmp	r3, #7
 8000c66:	dcea      	bgt.n	8000c3e <main+0x96>
				for (int j = 0; j < 8; j++)
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	2b07      	cmp	r3, #7
 8000c72:	ddca      	ble.n	8000c0a <main+0x62>
			for (u8 i = 0; i < 4; i++)
 8000c74:	7dfb      	ldrb	r3, [r7, #23]
 8000c76:	3301      	adds	r3, #1
 8000c78:	75fb      	strb	r3, [r7, #23]
 8000c7a:	7dfb      	ldrb	r3, [r7, #23]
 8000c7c:	2b03      	cmp	r3, #3
 8000c7e:	d9c1      	bls.n	8000c04 <main+0x5c>
 8000c80:	e7b9      	b.n	8000bf6 <main+0x4e>
					}

				}
			}
		}
		else if (flag == 2)
 8000c82:	4b3a      	ldr	r3, [pc, #232]	; (8000d6c <main+0x1c4>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d142      	bne.n	8000d10 <main+0x168>
		{
			for (u8 k = 0; k < 4; k++)
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	72fb      	strb	r3, [r7, #11]
 8000c8e:	e03b      	b.n	8000d08 <main+0x160>
			{
				for (u8 i = 0; i < 4; i++)
 8000c90:	2300      	movs	r3, #0
 8000c92:	72bb      	strb	r3, [r7, #10]
 8000c94:	e032      	b.n	8000cfc <main+0x154>
				{
					HLED_enSetON(PORTB, PIN11 - i);
 8000c96:	7abb      	ldrb	r3, [r7, #10]
 8000c98:	f1c3 030b 	rsb	r3, r3, #11
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	2002      	movs	r0, #2
 8000ca2:	f7ff fa65 	bl	8000170 <HLED_enSetON>
					HLED_enSetON(PORTB, PIN12 + i);
 8000ca6:	7abb      	ldrb	r3, [r7, #10]
 8000ca8:	330c      	adds	r3, #12
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	4619      	mov	r1, r3
 8000cae:	2002      	movs	r0, #2
 8000cb0:	f7ff fa5e 	bl	8000170 <HLED_enSetON>
					MSTK_enDelayMS(200);
 8000cb4:	20c8      	movs	r0, #200	; 0xc8
 8000cb6:	f7ff ff1b 	bl	8000af0 <MSTK_enDelayMS>
					if(i == 3)
 8000cba:	7abb      	ldrb	r3, [r7, #10]
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	d11a      	bne.n	8000cf6 <main+0x14e>
					{
						for (u8 j = 0; j < 4; j++)
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	727b      	strb	r3, [r7, #9]
 8000cc4:	e014      	b.n	8000cf0 <main+0x148>
						{
							HLED_enSetOFF(PORTB, PIN15 - j);
 8000cc6:	7a7b      	ldrb	r3, [r7, #9]
 8000cc8:	f1c3 030f 	rsb	r3, r3, #15
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	4619      	mov	r1, r3
 8000cd0:	2002      	movs	r0, #2
 8000cd2:	f7ff fa60 	bl	8000196 <HLED_enSetOFF>
							HLED_enSetOFF(PORTB, PIN8 + j);
 8000cd6:	7a7b      	ldrb	r3, [r7, #9]
 8000cd8:	3308      	adds	r3, #8
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	4619      	mov	r1, r3
 8000cde:	2002      	movs	r0, #2
 8000ce0:	f7ff fa59 	bl	8000196 <HLED_enSetOFF>
							MSTK_enDelayMS(200);
 8000ce4:	20c8      	movs	r0, #200	; 0xc8
 8000ce6:	f7ff ff03 	bl	8000af0 <MSTK_enDelayMS>
						for (u8 j = 0; j < 4; j++)
 8000cea:	7a7b      	ldrb	r3, [r7, #9]
 8000cec:	3301      	adds	r3, #1
 8000cee:	727b      	strb	r3, [r7, #9]
 8000cf0:	7a7b      	ldrb	r3, [r7, #9]
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	d9e7      	bls.n	8000cc6 <main+0x11e>
				for (u8 i = 0; i < 4; i++)
 8000cf6:	7abb      	ldrb	r3, [r7, #10]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	72bb      	strb	r3, [r7, #10]
 8000cfc:	7abb      	ldrb	r3, [r7, #10]
 8000cfe:	2b03      	cmp	r3, #3
 8000d00:	d9c9      	bls.n	8000c96 <main+0xee>
			for (u8 k = 0; k < 4; k++)
 8000d02:	7afb      	ldrb	r3, [r7, #11]
 8000d04:	3301      	adds	r3, #1
 8000d06:	72fb      	strb	r3, [r7, #11]
 8000d08:	7afb      	ldrb	r3, [r7, #11]
 8000d0a:	2b03      	cmp	r3, #3
 8000d0c:	d9c0      	bls.n	8000c90 <main+0xe8>
 8000d0e:	e772      	b.n	8000bf6 <main+0x4e>
				}
			}
		}


		else if (flag == 3)
 8000d10:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <main+0x1c4>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b03      	cmp	r3, #3
 8000d16:	d11b      	bne.n	8000d50 <main+0x1a8>
		{
			for (u8 i = 0; i<8; i++)
 8000d18:	2300      	movs	r3, #0
 8000d1a:	723b      	strb	r3, [r7, #8]
 8000d1c:	e014      	b.n	8000d48 <main+0x1a0>

			{
				MGPIO_enSetPortValue(GPIO_CRH_ID, PORTB, HIGH);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2102      	movs	r1, #2
 8000d22:	2001      	movs	r0, #1
 8000d24:	f7ff fd3c 	bl	80007a0 <MGPIO_enSetPortValue>
				MSTK_enDelayMS(500);
 8000d28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d2c:	f7ff fee0 	bl	8000af0 <MSTK_enDelayMS>
				MGPIO_enSetPortValue(GPIO_CRH_ID, PORTB, LOW);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2102      	movs	r1, #2
 8000d34:	2001      	movs	r0, #1
 8000d36:	f7ff fd33 	bl	80007a0 <MGPIO_enSetPortValue>
				MSTK_enDelayMS(500);
 8000d3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d3e:	f7ff fed7 	bl	8000af0 <MSTK_enDelayMS>
			for (u8 i = 0; i<8; i++)
 8000d42:	7a3b      	ldrb	r3, [r7, #8]
 8000d44:	3301      	adds	r3, #1
 8000d46:	723b      	strb	r3, [r7, #8]
 8000d48:	7a3b      	ldrb	r3, [r7, #8]
 8000d4a:	2b07      	cmp	r3, #7
 8000d4c:	d9e7      	bls.n	8000d1e <main+0x176>
 8000d4e:	e752      	b.n	8000bf6 <main+0x4e>

			}
		}

		else if (flag == 0)
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <main+0x1c4>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f47f af4e 	bne.w	8000bf6 <main+0x4e>
		{
			MGPIO_enSetPortValue(GPIO_CRH_ID, PORTB, LOW);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f7ff fd1e 	bl	80007a0 <MGPIO_enSetPortValue>
		if (flag == 1)
 8000d64:	e747      	b.n	8000bf6 <main+0x4e>
 8000d66:	bf00      	nop
 8000d68:	08000d71 	.word	0x08000d71
 8000d6c:	20000061 	.word	0x20000061

08000d70 <state>:
		}
	}
}

void state(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	if (flag == 0)
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <state+0x4c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d103      	bne.n	8000d84 <state+0x14>
	{
		flag = 1;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <state+0x4c>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	701a      	strb	r2, [r3, #0]
 8000d82:	e016      	b.n	8000db2 <state+0x42>
	}

	else if (flag == 1)
 8000d84:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <state+0x4c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d103      	bne.n	8000d94 <state+0x24>
	{
		flag = 2;
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <state+0x4c>)
 8000d8e:	2202      	movs	r2, #2
 8000d90:	701a      	strb	r2, [r3, #0]
 8000d92:	e00e      	b.n	8000db2 <state+0x42>
	}
	else if (flag == 2)
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <state+0x4c>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d103      	bne.n	8000da4 <state+0x34>
	{
		flag = 3;
 8000d9c:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <state+0x4c>)
 8000d9e:	2203      	movs	r2, #3
 8000da0:	701a      	strb	r2, [r3, #0]
 8000da2:	e006      	b.n	8000db2 <state+0x42>
	}
	else if (flag == 3)
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <state+0x4c>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b03      	cmp	r3, #3
 8000daa:	d102      	bne.n	8000db2 <state+0x42>
	{
		flag = 0;
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <state+0x4c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
	}
	MEXTI_enClearPendingBit(EXTI0_LINE);
 8000db2:	2000      	movs	r0, #0
 8000db4:	f7ff fa5e 	bl	8000274 <MEXTI_enClearPendingBit>
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000061 	.word	0x20000061

08000dc0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dc2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000dc4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc8:	480c      	ldr	r0, [pc, #48]	; (8000dfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000dca:	490d      	ldr	r1, [pc, #52]	; (8000e00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	; (8000e04 <LoopForever+0xe>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd0:	e002      	b.n	8000dd8 <LoopCopyDataInit>

08000dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd6:	3304      	adds	r3, #4

08000dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ddc:	d3f9      	bcc.n	8000dd2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de0:	4c0a      	ldr	r4, [pc, #40]	; (8000e0c <LoopForever+0x16>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de4:	e001      	b.n	8000dea <LoopFillZerobss>

08000de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de8:	3204      	adds	r2, #4

08000dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dec:	d3fb      	bcc.n	8000de6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dee:	f000 f811 	bl	8000e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000df2:	f7ff fed9 	bl	8000ba8 <main>

08000df6 <LoopForever>:

LoopForever:
    b LoopForever
 8000df6:	e7fe      	b.n	8000df6 <LoopForever>
  ldr   r0, =_estack
 8000df8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e00:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000e04:	08000e7c 	.word	0x08000e7c
  ldr r2, =_sbss
 8000e08:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000e0c:	20000064 	.word	0x20000064

08000e10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC1_2_IRQHandler>
	...

08000e14 <__libc_init_array>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	2600      	movs	r6, #0
 8000e18:	4d0c      	ldr	r5, [pc, #48]	; (8000e4c <__libc_init_array+0x38>)
 8000e1a:	4c0d      	ldr	r4, [pc, #52]	; (8000e50 <__libc_init_array+0x3c>)
 8000e1c:	1b64      	subs	r4, r4, r5
 8000e1e:	10a4      	asrs	r4, r4, #2
 8000e20:	42a6      	cmp	r6, r4
 8000e22:	d109      	bne.n	8000e38 <__libc_init_array+0x24>
 8000e24:	f000 f81a 	bl	8000e5c <_init>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	4d0a      	ldr	r5, [pc, #40]	; (8000e54 <__libc_init_array+0x40>)
 8000e2c:	4c0a      	ldr	r4, [pc, #40]	; (8000e58 <__libc_init_array+0x44>)
 8000e2e:	1b64      	subs	r4, r4, r5
 8000e30:	10a4      	asrs	r4, r4, #2
 8000e32:	42a6      	cmp	r6, r4
 8000e34:	d105      	bne.n	8000e42 <__libc_init_array+0x2e>
 8000e36:	bd70      	pop	{r4, r5, r6, pc}
 8000e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e3c:	4798      	blx	r3
 8000e3e:	3601      	adds	r6, #1
 8000e40:	e7ee      	b.n	8000e20 <__libc_init_array+0xc>
 8000e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e46:	4798      	blx	r3
 8000e48:	3601      	adds	r6, #1
 8000e4a:	e7f2      	b.n	8000e32 <__libc_init_array+0x1e>
 8000e4c:	08000e74 	.word	0x08000e74
 8000e50:	08000e74 	.word	0x08000e74
 8000e54:	08000e74 	.word	0x08000e74
 8000e58:	08000e78 	.word	0x08000e78

08000e5c <_init>:
 8000e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e5e:	bf00      	nop
 8000e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e62:	bc08      	pop	{r3}
 8000e64:	469e      	mov	lr, r3
 8000e66:	4770      	bx	lr

08000e68 <_fini>:
 8000e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e6a:	bf00      	nop
 8000e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e6e:	bc08      	pop	{r3}
 8000e70:	469e      	mov	lr, r3
 8000e72:	4770      	bx	lr
