
MATRIX-LAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000078c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008bc  080008bc  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008bc  080008bc  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  080008bc  080008bc  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008bc  080008bc  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008bc  080008bc  000108bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008c0  080008c0  000108c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080008c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000030  080008f4  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000054  080008f4  00020054  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000fc3  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004f7  00000000  00000000  0002101c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000160  00000000  00000000  00021518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000108  00000000  00000000  00021678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f6a  00000000  00000000  00021780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000fa2  00000000  00000000  000226ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003fb0  00000000  00000000  0002368c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0002763c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000400  00000000  00000000  00027690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000030 	.word	0x20000030
 800014c:	00000000 	.word	0x00000000
 8000150:	080008a4 	.word	0x080008a4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000034 	.word	0x20000034
 800016c:	080008a4 	.word	0x080008a4

08000170 <HLEDMRX_enInit>:
#include "HLEDMRX_config.h"
#include "HLEDMRX_priv.h"


ErrorState_t HLEDMRX_enInit(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	/* 1. set Row direction to Output 2MHz PushPull */
	MGPIO_enSetPortDirection(GPIO_CRL_ID, PORTA, OUT_2MHZ_PP);
 8000174:	2202      	movs	r2, #2
 8000176:	2101      	movs	r1, #1
 8000178:	2000      	movs	r0, #0
 800017a:	f000 f8f1 	bl	8000360 <MGPIO_enSetPortDirection>

	/* 2. set Col direction to Output 2MHz PushPull */
	MGPIO_enSetPortDirection(GPIO_CRH_ID, PORTB, OUT_2MHZ_PP);
 800017e:	2202      	movs	r2, #2
 8000180:	2102      	movs	r1, #2
 8000182:	2001      	movs	r0, #1
 8000184:	f000 f8ec 	bl	8000360 <MGPIO_enSetPortDirection>

	return SUCCESS;
 8000188:	2302      	movs	r3, #2
}
 800018a:	4618      	mov	r0, r3
 800018c:	bd80      	pop	{r7, pc}

0800018e <HLEDMRX_voidSetRowValue>:

	return SUCCESS;
}

static void HLEDMRX_voidSetRowValue(u8 copy_u8data)
{
 800018e:	b580      	push	{r7, lr}
 8000190:	b084      	sub	sp, #16
 8000192:	af00      	add	r7, sp, #0
 8000194:	4603      	mov	r3, r0
 8000196:	71fb      	strb	r3, [r7, #7]
	u8 local_temp ;
	for (u8 pinNum = 0; pinNum < 8; pinNum++)
 8000198:	2300      	movs	r3, #0
 800019a:	73fb      	strb	r3, [r7, #15]
 800019c:	e01a      	b.n	80001d4 <HLEDMRX_voidSetRowValue+0x46>
	{
		local_temp = GET_BIT(copy_u8data, pinNum);
 800019e:	79fa      	ldrb	r2, [r7, #7]
 80001a0:	7bfb      	ldrb	r3, [r7, #15]
 80001a2:	fa42 f303 	asr.w	r3, r2, r3
 80001a6:	b2db      	uxtb	r3, r3
 80001a8:	f003 0301 	and.w	r3, r3, #1
 80001ac:	73bb      	strb	r3, [r7, #14]
		if (local_temp == 0)
 80001ae:	7bbb      	ldrb	r3, [r7, #14]
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d106      	bne.n	80001c2 <HLEDMRX_voidSetRowValue+0x34>
			MGPIO_enSetPinValue(PORTA, pinNum, HIGH);
 80001b4:	7bfb      	ldrb	r3, [r7, #15]
 80001b6:	2201      	movs	r2, #1
 80001b8:	4619      	mov	r1, r3
 80001ba:	2001      	movs	r0, #1
 80001bc:	f000 f84c 	bl	8000258 <MGPIO_enSetPinValue>
 80001c0:	e005      	b.n	80001ce <HLEDMRX_voidSetRowValue+0x40>
		else
			MGPIO_enSetPinValue(PORTA, pinNum, LOW);
 80001c2:	7bfb      	ldrb	r3, [r7, #15]
 80001c4:	2200      	movs	r2, #0
 80001c6:	4619      	mov	r1, r3
 80001c8:	2001      	movs	r0, #1
 80001ca:	f000 f845 	bl	8000258 <MGPIO_enSetPinValue>
	for (u8 pinNum = 0; pinNum < 8; pinNum++)
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	3301      	adds	r3, #1
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	7bfb      	ldrb	r3, [r7, #15]
 80001d6:	2b07      	cmp	r3, #7
 80001d8:	d9e1      	bls.n	800019e <HLEDMRX_voidSetRowValue+0x10>
	}
}
 80001da:	bf00      	nop
 80001dc:	bf00      	nop
 80001de:	3710      	adds	r7, #16
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}

080001e4 <HLEDMRX_enDisplayMotion>:

ErrorState_t HLEDMRX_enDisplayMotion(u8 *Copy_u8DataLarge, u32 Copy_u32Speed)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	6039      	str	r1, [r7, #0]
	for (u32 x =0 ; x < Copy_u32Speed; x++)
 80001ee:	2300      	movs	r3, #0
 80001f0:	60fb      	str	r3, [r7, #12]
 80001f2:	e027      	b.n	8000244 <HLEDMRX_enDisplayMotion+0x60>
	{
		for (u8 pinNum = 0; pinNum < 8; pinNum++)
 80001f4:	2300      	movs	r3, #0
 80001f6:	72fb      	strb	r3, [r7, #11]
 80001f8:	e01a      	b.n	8000230 <HLEDMRX_enDisplayMotion+0x4c>
		{
			/* 1. Disable All col pins by writing High */
			MGPIO_enSetPortValue(GPIO_CRH_ID, PORTB, LOW);
 80001fa:	2200      	movs	r2, #0
 80001fc:	2102      	movs	r1, #2
 80001fe:	2001      	movs	r0, #1
 8000200:	f000 f91c 	bl	800043c <MGPIO_enSetPortValue>

			/* 2. Get data and stored in ROWS */
			HLEDMRX_voidSetRowValue(Copy_u8DataLarge[pinNum]);
 8000204:	7afb      	ldrb	r3, [r7, #11]
 8000206:	687a      	ldr	r2, [r7, #4]
 8000208:	4413      	add	r3, r2
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	4618      	mov	r0, r3
 800020e:	f7ff ffbe 	bl	800018e <HLEDMRX_voidSetRowValue>

			/* 3. Enable col0 by writing low */
			MGPIO_enSetPinValue(PORTB, (PIN8 + pinNum), HIGH);
 8000212:	7afb      	ldrb	r3, [r7, #11]
 8000214:	3308      	adds	r3, #8
 8000216:	b2db      	uxtb	r3, r3
 8000218:	2201      	movs	r2, #1
 800021a:	4619      	mov	r1, r3
 800021c:	2002      	movs	r0, #2
 800021e:	f000 f81b 	bl	8000258 <MGPIO_enSetPinValue>


			/* 4. delay of the opreation */
			MSTK_enDelayMS(2500);
 8000222:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000226:	f000 fa6d 	bl	8000704 <MSTK_enDelayMS>
		for (u8 pinNum = 0; pinNum < 8; pinNum++)
 800022a:	7afb      	ldrb	r3, [r7, #11]
 800022c:	3301      	adds	r3, #1
 800022e:	72fb      	strb	r3, [r7, #11]
 8000230:	7afb      	ldrb	r3, [r7, #11]
 8000232:	2b07      	cmp	r3, #7
 8000234:	d9e1      	bls.n	80001fa <HLEDMRX_enDisplayMotion+0x16>
		}
		MSTK_enDelayMS(1000);
 8000236:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800023a:	f000 fa63 	bl	8000704 <MSTK_enDelayMS>
	for (u32 x =0 ; x < Copy_u32Speed; x++)
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	3301      	adds	r3, #1
 8000242:	60fb      	str	r3, [r7, #12]
 8000244:	68fa      	ldr	r2, [r7, #12]
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	429a      	cmp	r2, r3
 800024a:	d3d3      	bcc.n	80001f4 <HLEDMRX_enDisplayMotion+0x10>
	}


	return SUCCESS;
 800024c:	2302      	movs	r3, #2
}
 800024e:	4618      	mov	r0, r3
 8000250:	3710      	adds	r7, #16
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
	...

08000258 <MGPIO_enSetPinValue>:
	}
	return local_state;
}

ErrorState_t MGPIO_enSetPinValue(PORT_t copy_u8port, PIN_t copy_u8pin, VALUE_t copy_u8Value)
{
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	71fb      	strb	r3, [r7, #7]
 8000262:	460b      	mov	r3, r1
 8000264:	71bb      	strb	r3, [r7, #6]
 8000266:	4613      	mov	r3, r2
 8000268:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 800026a:	2302      	movs	r3, #2
 800026c:	73fb      	strb	r3, [r7, #15]
	switch(copy_u8port)
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	2b03      	cmp	r3, #3
 8000272:	d046      	beq.n	8000302 <MGPIO_enSetPinValue+0xaa>
 8000274:	2b03      	cmp	r3, #3
 8000276:	dc64      	bgt.n	8000342 <MGPIO_enSetPinValue+0xea>
 8000278:	2b01      	cmp	r3, #1
 800027a:	d002      	beq.n	8000282 <MGPIO_enSetPinValue+0x2a>
 800027c:	2b02      	cmp	r3, #2
 800027e:	d020      	beq.n	80002c2 <MGPIO_enSetPinValue+0x6a>
 8000280:	e05f      	b.n	8000342 <MGPIO_enSetPinValue+0xea>
	{
	case PORTA:
		if (copy_u8Value == HIGH)
 8000282:	797b      	ldrb	r3, [r7, #5]
 8000284:	2b01      	cmp	r3, #1
 8000286:	d10a      	bne.n	800029e <MGPIO_enSetPinValue+0x46>
		{
			SET_BIT(GPIOA->GPIO_ODR, copy_u8pin);
 8000288:	4b32      	ldr	r3, [pc, #200]	; (8000354 <MGPIO_enSetPinValue+0xfc>)
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	79ba      	ldrb	r2, [r7, #6]
 800028e:	2101      	movs	r1, #1
 8000290:	fa01 f202 	lsl.w	r2, r1, r2
 8000294:	4611      	mov	r1, r2
 8000296:	4a2f      	ldr	r2, [pc, #188]	; (8000354 <MGPIO_enSetPinValue+0xfc>)
 8000298:	430b      	orrs	r3, r1
 800029a:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 800029c:	e054      	b.n	8000348 <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 800029e:	797b      	ldrb	r3, [r7, #5]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d10b      	bne.n	80002bc <MGPIO_enSetPinValue+0x64>
			CLR_BIT(GPIOA->GPIO_ODR, copy_u8pin);
 80002a4:	4b2b      	ldr	r3, [pc, #172]	; (8000354 <MGPIO_enSetPinValue+0xfc>)
 80002a6:	68db      	ldr	r3, [r3, #12]
 80002a8:	79ba      	ldrb	r2, [r7, #6]
 80002aa:	2101      	movs	r1, #1
 80002ac:	fa01 f202 	lsl.w	r2, r1, r2
 80002b0:	43d2      	mvns	r2, r2
 80002b2:	4611      	mov	r1, r2
 80002b4:	4a27      	ldr	r2, [pc, #156]	; (8000354 <MGPIO_enSetPinValue+0xfc>)
 80002b6:	400b      	ands	r3, r1
 80002b8:	60d3      	str	r3, [r2, #12]
		break;
 80002ba:	e045      	b.n	8000348 <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 80002bc:	2300      	movs	r3, #0
 80002be:	73fb      	strb	r3, [r7, #15]
		break;
 80002c0:	e042      	b.n	8000348 <MGPIO_enSetPinValue+0xf0>

	case PORTB:
		if (copy_u8Value == HIGH)
 80002c2:	797b      	ldrb	r3, [r7, #5]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d10a      	bne.n	80002de <MGPIO_enSetPinValue+0x86>
		{
			SET_BIT(GPIOB->GPIO_ODR, copy_u8pin);
 80002c8:	4b23      	ldr	r3, [pc, #140]	; (8000358 <MGPIO_enSetPinValue+0x100>)
 80002ca:	68db      	ldr	r3, [r3, #12]
 80002cc:	79ba      	ldrb	r2, [r7, #6]
 80002ce:	2101      	movs	r1, #1
 80002d0:	fa01 f202 	lsl.w	r2, r1, r2
 80002d4:	4611      	mov	r1, r2
 80002d6:	4a20      	ldr	r2, [pc, #128]	; (8000358 <MGPIO_enSetPinValue+0x100>)
 80002d8:	430b      	orrs	r3, r1
 80002da:	60d3      	str	r3, [r2, #12]
		else
		{
			local_state = OUT_OF_RANG_ERR;

		}
		break;
 80002dc:	e034      	b.n	8000348 <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 80002de:	797b      	ldrb	r3, [r7, #5]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d10b      	bne.n	80002fc <MGPIO_enSetPinValue+0xa4>
			CLR_BIT(GPIOB->GPIO_ODR, copy_u8pin);
 80002e4:	4b1c      	ldr	r3, [pc, #112]	; (8000358 <MGPIO_enSetPinValue+0x100>)
 80002e6:	68db      	ldr	r3, [r3, #12]
 80002e8:	79ba      	ldrb	r2, [r7, #6]
 80002ea:	2101      	movs	r1, #1
 80002ec:	fa01 f202 	lsl.w	r2, r1, r2
 80002f0:	43d2      	mvns	r2, r2
 80002f2:	4611      	mov	r1, r2
 80002f4:	4a18      	ldr	r2, [pc, #96]	; (8000358 <MGPIO_enSetPinValue+0x100>)
 80002f6:	400b      	ands	r3, r1
 80002f8:	60d3      	str	r3, [r2, #12]
		break;
 80002fa:	e025      	b.n	8000348 <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 80002fc:	2300      	movs	r3, #0
 80002fe:	73fb      	strb	r3, [r7, #15]
		break;
 8000300:	e022      	b.n	8000348 <MGPIO_enSetPinValue+0xf0>

	case PORTC:
		if (copy_u8Value == HIGH)
 8000302:	797b      	ldrb	r3, [r7, #5]
 8000304:	2b01      	cmp	r3, #1
 8000306:	d10a      	bne.n	800031e <MGPIO_enSetPinValue+0xc6>
		{
			SET_BIT(GPIOC->GPIO_ODR, copy_u8pin);
 8000308:	4b14      	ldr	r3, [pc, #80]	; (800035c <MGPIO_enSetPinValue+0x104>)
 800030a:	68db      	ldr	r3, [r3, #12]
 800030c:	79ba      	ldrb	r2, [r7, #6]
 800030e:	2101      	movs	r1, #1
 8000310:	fa01 f202 	lsl.w	r2, r1, r2
 8000314:	4611      	mov	r1, r2
 8000316:	4a11      	ldr	r2, [pc, #68]	; (800035c <MGPIO_enSetPinValue+0x104>)
 8000318:	430b      	orrs	r3, r1
 800031a:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 800031c:	e014      	b.n	8000348 <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 800031e:	797b      	ldrb	r3, [r7, #5]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d10b      	bne.n	800033c <MGPIO_enSetPinValue+0xe4>
			CLR_BIT(GPIOC->GPIO_ODR, copy_u8pin);
 8000324:	4b0d      	ldr	r3, [pc, #52]	; (800035c <MGPIO_enSetPinValue+0x104>)
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	79ba      	ldrb	r2, [r7, #6]
 800032a:	2101      	movs	r1, #1
 800032c:	fa01 f202 	lsl.w	r2, r1, r2
 8000330:	43d2      	mvns	r2, r2
 8000332:	4611      	mov	r1, r2
 8000334:	4a09      	ldr	r2, [pc, #36]	; (800035c <MGPIO_enSetPinValue+0x104>)
 8000336:	400b      	ands	r3, r1
 8000338:	60d3      	str	r3, [r2, #12]
		break;
 800033a:	e005      	b.n	8000348 <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 800033c:	2300      	movs	r3, #0
 800033e:	73fb      	strb	r3, [r7, #15]
		break;
 8000340:	e002      	b.n	8000348 <MGPIO_enSetPinValue+0xf0>

	default:
		local_state = OUT_OF_RANG_ERR;
 8000342:	2300      	movs	r3, #0
 8000344:	73fb      	strb	r3, [r7, #15]
		break;
 8000346:	bf00      	nop
	}
	return local_state;
 8000348:	7bfb      	ldrb	r3, [r7, #15]
}
 800034a:	4618      	mov	r0, r3
 800034c:	3714      	adds	r7, #20
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr
 8000354:	40010800 	.word	0x40010800
 8000358:	40010c00 	.word	0x40010c00
 800035c:	40011000 	.word	0x40011000

08000360 <MGPIO_enSetPortDirection>:

	return local_state;
}

ErrorState_t MGPIO_enSetPortDirection(GPIO_ID_t copy_u8CRID,PORT_t copy_u8port,  MODE_t copy_u8Mode)
{
 8000360:	b480      	push	{r7}
 8000362:	b085      	sub	sp, #20
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	71fb      	strb	r3, [r7, #7]
 800036a:	460b      	mov	r3, r1
 800036c:	71bb      	strb	r3, [r7, #6]
 800036e:	4613      	mov	r3, r2
 8000370:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 8000372:	2302      	movs	r3, #2
 8000374:	73fb      	strb	r3, [r7, #15]
	switch(copy_u8port)
 8000376:	79bb      	ldrb	r3, [r7, #6]
 8000378:	2b03      	cmp	r3, #3
 800037a:	d038      	beq.n	80003ee <MGPIO_enSetPortDirection+0x8e>
 800037c:	2b03      	cmp	r3, #3
 800037e:	dc4f      	bgt.n	8000420 <MGPIO_enSetPortDirection+0xc0>
 8000380:	2b01      	cmp	r3, #1
 8000382:	d002      	beq.n	800038a <MGPIO_enSetPortDirection+0x2a>
 8000384:	2b02      	cmp	r3, #2
 8000386:	d019      	beq.n	80003bc <MGPIO_enSetPortDirection+0x5c>
 8000388:	e04a      	b.n	8000420 <MGPIO_enSetPortDirection+0xc0>
	{
	case PORTA:
		if(copy_u8CRID == GPIO_CRL_ID)
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d107      	bne.n	80003a0 <MGPIO_enSetPortDirection+0x40>
		{
			GPIOA->GPIO_CRL = copy_u8Mode * PORT_OFFSET ;
 8000390:	797b      	ldrb	r3, [r7, #5]
 8000392:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8000396:	fb02 f203 	mul.w	r2, r2, r3
 800039a:	4b25      	ldr	r3, [pc, #148]	; (8000430 <MGPIO_enSetPortDirection+0xd0>)
 800039c:	601a      	str	r2, [r3, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 800039e:	e041      	b.n	8000424 <MGPIO_enSetPortDirection+0xc4>
		else if(copy_u8CRID == GPIO_CRH_ID)
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d107      	bne.n	80003b6 <MGPIO_enSetPortDirection+0x56>
			GPIOA->GPIO_CRH = copy_u8Mode * PORT_OFFSET ;
 80003a6:	797b      	ldrb	r3, [r7, #5]
 80003a8:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 80003ac:	fb02 f203 	mul.w	r2, r2, r3
 80003b0:	4b1f      	ldr	r3, [pc, #124]	; (8000430 <MGPIO_enSetPortDirection+0xd0>)
 80003b2:	605a      	str	r2, [r3, #4]
		break;
 80003b4:	e036      	b.n	8000424 <MGPIO_enSetPortDirection+0xc4>
			local_state = OUT_OF_RANG_ERR;
 80003b6:	2300      	movs	r3, #0
 80003b8:	73fb      	strb	r3, [r7, #15]
		break;
 80003ba:	e033      	b.n	8000424 <MGPIO_enSetPortDirection+0xc4>


	case PORTB:
		if(copy_u8CRID == GPIO_CRL_ID)
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d107      	bne.n	80003d2 <MGPIO_enSetPortDirection+0x72>
		{
			GPIOB->GPIO_CRL = copy_u8Mode * PORT_OFFSET ;
 80003c2:	797b      	ldrb	r3, [r7, #5]
 80003c4:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 80003c8:	fb02 f203 	mul.w	r2, r2, r3
 80003cc:	4b19      	ldr	r3, [pc, #100]	; (8000434 <MGPIO_enSetPortDirection+0xd4>)
 80003ce:	601a      	str	r2, [r3, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 80003d0:	e028      	b.n	8000424 <MGPIO_enSetPortDirection+0xc4>
		else if(copy_u8CRID == GPIO_CRH_ID)
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d107      	bne.n	80003e8 <MGPIO_enSetPortDirection+0x88>
			GPIOB->GPIO_CRH = copy_u8Mode * PORT_OFFSET ;
 80003d8:	797b      	ldrb	r3, [r7, #5]
 80003da:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 80003de:	fb02 f203 	mul.w	r2, r2, r3
 80003e2:	4b14      	ldr	r3, [pc, #80]	; (8000434 <MGPIO_enSetPortDirection+0xd4>)
 80003e4:	605a      	str	r2, [r3, #4]
		break;
 80003e6:	e01d      	b.n	8000424 <MGPIO_enSetPortDirection+0xc4>
			local_state = OUT_OF_RANG_ERR;
 80003e8:	2300      	movs	r3, #0
 80003ea:	73fb      	strb	r3, [r7, #15]
		break;
 80003ec:	e01a      	b.n	8000424 <MGPIO_enSetPortDirection+0xc4>

	case PORTC:
		if(copy_u8CRID == GPIO_CRL_ID)
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d107      	bne.n	8000404 <MGPIO_enSetPortDirection+0xa4>
		{
			GPIOC->GPIO_CRL = copy_u8Mode * PORT_OFFSET ;
 80003f4:	797b      	ldrb	r3, [r7, #5]
 80003f6:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 80003fa:	fb02 f203 	mul.w	r2, r2, r3
 80003fe:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <MGPIO_enSetPortDirection+0xd8>)
 8000400:	601a      	str	r2, [r3, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000402:	e00f      	b.n	8000424 <MGPIO_enSetPortDirection+0xc4>
		else if(copy_u8CRID == GPIO_CRH_ID)
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	2b01      	cmp	r3, #1
 8000408:	d107      	bne.n	800041a <MGPIO_enSetPortDirection+0xba>
			GPIOC->GPIO_CRH = copy_u8Mode * PORT_OFFSET ;
 800040a:	797b      	ldrb	r3, [r7, #5]
 800040c:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8000410:	fb02 f203 	mul.w	r2, r2, r3
 8000414:	4b08      	ldr	r3, [pc, #32]	; (8000438 <MGPIO_enSetPortDirection+0xd8>)
 8000416:	605a      	str	r2, [r3, #4]
		break;
 8000418:	e004      	b.n	8000424 <MGPIO_enSetPortDirection+0xc4>
			local_state = OUT_OF_RANG_ERR;
 800041a:	2300      	movs	r3, #0
 800041c:	73fb      	strb	r3, [r7, #15]
		break;
 800041e:	e001      	b.n	8000424 <MGPIO_enSetPortDirection+0xc4>

	default:
		local_state = OUT_OF_RANG_ERR;
 8000420:	2300      	movs	r3, #0
 8000422:	73fb      	strb	r3, [r7, #15]
	}

	return local_state;
 8000424:	7bfb      	ldrb	r3, [r7, #15]
}
 8000426:	4618      	mov	r0, r3
 8000428:	3714      	adds	r7, #20
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	40010800 	.word	0x40010800
 8000434:	40010c00 	.word	0x40010c00
 8000438:	40011000 	.word	0x40011000

0800043c <MGPIO_enSetPortValue>:

ErrorState_t MGPIO_enSetPortValue(GPIO_ID_t copy_u8CRID, PORT_t copy_u8port, VALUE_t copy_u8Value)
{
 800043c:	b480      	push	{r7}
 800043e:	b085      	sub	sp, #20
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	71fb      	strb	r3, [r7, #7]
 8000446:	460b      	mov	r3, r1
 8000448:	71bb      	strb	r3, [r7, #6]
 800044a:	4613      	mov	r3, r2
 800044c:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 800044e:	2302      	movs	r3, #2
 8000450:	73fb      	strb	r3, [r7, #15]

	switch(copy_u8port)
 8000452:	79bb      	ldrb	r3, [r7, #6]
 8000454:	2b03      	cmp	r3, #3
 8000456:	f000 8088 	beq.w	800056a <MGPIO_enSetPortValue+0x12e>
 800045a:	2b03      	cmp	r3, #3
 800045c:	f300 80c5 	bgt.w	80005ea <MGPIO_enSetPortValue+0x1ae>
 8000460:	2b01      	cmp	r3, #1
 8000462:	d002      	beq.n	800046a <MGPIO_enSetPortValue+0x2e>
 8000464:	2b02      	cmp	r3, #2
 8000466:	d040      	beq.n	80004ea <MGPIO_enSetPortValue+0xae>
 8000468:	e0bf      	b.n	80005ea <MGPIO_enSetPortValue+0x1ae>
	{
	case PORTA:
		if ((copy_u8Value == HIGH) && (copy_u8CRID == GPIO_CRL_ID))
 800046a:	797b      	ldrb	r3, [r7, #5]
 800046c:	2b01      	cmp	r3, #1
 800046e:	d109      	bne.n	8000484 <MGPIO_enSetPortValue+0x48>
 8000470:	79fb      	ldrb	r3, [r7, #7]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d106      	bne.n	8000484 <MGPIO_enSetPortValue+0x48>
		{
			GPIOA->GPIO_ODR |= PORT_LVALUE;
 8000476:	4b61      	ldr	r3, [pc, #388]	; (80005fc <MGPIO_enSetPortValue+0x1c0>)
 8000478:	68db      	ldr	r3, [r3, #12]
 800047a:	4a60      	ldr	r2, [pc, #384]	; (80005fc <MGPIO_enSetPortValue+0x1c0>)
 800047c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000480:	60d3      	str	r3, [r2, #12]
 8000482:	e031      	b.n	80004e8 <MGPIO_enSetPortValue+0xac>
		}
		else if ((copy_u8Value == HIGH) && (copy_u8CRID == GPIO_CRH_ID))
 8000484:	797b      	ldrb	r3, [r7, #5]
 8000486:	2b01      	cmp	r3, #1
 8000488:	d109      	bne.n	800049e <MGPIO_enSetPortValue+0x62>
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	2b01      	cmp	r3, #1
 800048e:	d106      	bne.n	800049e <MGPIO_enSetPortValue+0x62>
		{
			GPIOA->GPIO_ODR |= PORT_HVALUE;
 8000490:	4b5a      	ldr	r3, [pc, #360]	; (80005fc <MGPIO_enSetPortValue+0x1c0>)
 8000492:	68db      	ldr	r3, [r3, #12]
 8000494:	4a59      	ldr	r2, [pc, #356]	; (80005fc <MGPIO_enSetPortValue+0x1c0>)
 8000496:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 800049a:	60d3      	str	r3, [r2, #12]
 800049c:	e024      	b.n	80004e8 <MGPIO_enSetPortValue+0xac>
		}
		else if ((copy_u8Value == LOW) && (copy_u8CRID == GPIO_CRL_ID))
 800049e:	797b      	ldrb	r3, [r7, #5]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d10d      	bne.n	80004c0 <MGPIO_enSetPortValue+0x84>
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d10a      	bne.n	80004c0 <MGPIO_enSetPortValue+0x84>
		{
			GPIOA->GPIO_ODR &= ~(PORT_LVALUE);
 80004aa:	4b54      	ldr	r3, [pc, #336]	; (80005fc <MGPIO_enSetPortValue+0x1c0>)
 80004ac:	68db      	ldr	r3, [r3, #12]
 80004ae:	4a53      	ldr	r2, [pc, #332]	; (80005fc <MGPIO_enSetPortValue+0x1c0>)
 80004b0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80004b4:	60d3      	str	r3, [r2, #12]
			GPIOA->GPIO_ODR |= PORT_RESET;
 80004b6:	4b51      	ldr	r3, [pc, #324]	; (80005fc <MGPIO_enSetPortValue+0x1c0>)
 80004b8:	4a50      	ldr	r2, [pc, #320]	; (80005fc <MGPIO_enSetPortValue+0x1c0>)
 80004ba:	68db      	ldr	r3, [r3, #12]
 80004bc:	60d3      	str	r3, [r2, #12]
 80004be:	e013      	b.n	80004e8 <MGPIO_enSetPortValue+0xac>
		}
		else if ((copy_u8Value == LOW) && (copy_u8CRID == GPIO_CRH_ID))
 80004c0:	797b      	ldrb	r3, [r7, #5]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d10d      	bne.n	80004e2 <MGPIO_enSetPortValue+0xa6>
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d10a      	bne.n	80004e2 <MGPIO_enSetPortValue+0xa6>
		{
			GPIOA->GPIO_ODR &= ~(PORT_HVALUE);
 80004cc:	4b4b      	ldr	r3, [pc, #300]	; (80005fc <MGPIO_enSetPortValue+0x1c0>)
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	4a4a      	ldr	r2, [pc, #296]	; (80005fc <MGPIO_enSetPortValue+0x1c0>)
 80004d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80004d6:	60d3      	str	r3, [r2, #12]
			GPIOA->GPIO_ODR |= PORT_RESET;
 80004d8:	4b48      	ldr	r3, [pc, #288]	; (80005fc <MGPIO_enSetPortValue+0x1c0>)
 80004da:	4a48      	ldr	r2, [pc, #288]	; (80005fc <MGPIO_enSetPortValue+0x1c0>)
 80004dc:	68db      	ldr	r3, [r3, #12]
 80004de:	60d3      	str	r3, [r2, #12]
 80004e0:	e002      	b.n	80004e8 <MGPIO_enSetPortValue+0xac>
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
 80004e2:	2300      	movs	r3, #0
 80004e4:	73fb      	strb	r3, [r7, #15]
		}
		break;
 80004e6:	e083      	b.n	80005f0 <MGPIO_enSetPortValue+0x1b4>
 80004e8:	e082      	b.n	80005f0 <MGPIO_enSetPortValue+0x1b4>

	case PORTB:
		if ((copy_u8Value == HIGH) && (copy_u8CRID == GPIO_CRL_ID))
 80004ea:	797b      	ldrb	r3, [r7, #5]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d109      	bne.n	8000504 <MGPIO_enSetPortValue+0xc8>
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d106      	bne.n	8000504 <MGPIO_enSetPortValue+0xc8>
		{
			GPIOB->GPIO_ODR |= PORT_LVALUE;
 80004f6:	4b42      	ldr	r3, [pc, #264]	; (8000600 <MGPIO_enSetPortValue+0x1c4>)
 80004f8:	68db      	ldr	r3, [r3, #12]
 80004fa:	4a41      	ldr	r2, [pc, #260]	; (8000600 <MGPIO_enSetPortValue+0x1c4>)
 80004fc:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000500:	60d3      	str	r3, [r2, #12]
 8000502:	e031      	b.n	8000568 <MGPIO_enSetPortValue+0x12c>
		}
		else if ((copy_u8Value == HIGH) && (copy_u8CRID == GPIO_CRH_ID))
 8000504:	797b      	ldrb	r3, [r7, #5]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d109      	bne.n	800051e <MGPIO_enSetPortValue+0xe2>
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d106      	bne.n	800051e <MGPIO_enSetPortValue+0xe2>
		{
			GPIOB->GPIO_ODR |= PORT_HVALUE;
 8000510:	4b3b      	ldr	r3, [pc, #236]	; (8000600 <MGPIO_enSetPortValue+0x1c4>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	4a3a      	ldr	r2, [pc, #232]	; (8000600 <MGPIO_enSetPortValue+0x1c4>)
 8000516:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 800051a:	60d3      	str	r3, [r2, #12]
 800051c:	e024      	b.n	8000568 <MGPIO_enSetPortValue+0x12c>
		}
		else if ((copy_u8Value == LOW) && (copy_u8CRID == GPIO_CRL_ID))
 800051e:	797b      	ldrb	r3, [r7, #5]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d10d      	bne.n	8000540 <MGPIO_enSetPortValue+0x104>
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d10a      	bne.n	8000540 <MGPIO_enSetPortValue+0x104>
		{
			GPIOB->GPIO_ODR &= ~(PORT_LVALUE);
 800052a:	4b35      	ldr	r3, [pc, #212]	; (8000600 <MGPIO_enSetPortValue+0x1c4>)
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	4a34      	ldr	r2, [pc, #208]	; (8000600 <MGPIO_enSetPortValue+0x1c4>)
 8000530:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000534:	60d3      	str	r3, [r2, #12]
			GPIOB->GPIO_ODR |= PORT_RESET;
 8000536:	4b32      	ldr	r3, [pc, #200]	; (8000600 <MGPIO_enSetPortValue+0x1c4>)
 8000538:	4a31      	ldr	r2, [pc, #196]	; (8000600 <MGPIO_enSetPortValue+0x1c4>)
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	60d3      	str	r3, [r2, #12]
 800053e:	e013      	b.n	8000568 <MGPIO_enSetPortValue+0x12c>
		}
		else if ((copy_u8Value == LOW) && (copy_u8CRID == GPIO_CRH_ID))
 8000540:	797b      	ldrb	r3, [r7, #5]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d10d      	bne.n	8000562 <MGPIO_enSetPortValue+0x126>
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d10a      	bne.n	8000562 <MGPIO_enSetPortValue+0x126>
		{
			GPIOB->GPIO_ODR &= ~(PORT_HVALUE);
 800054c:	4b2c      	ldr	r3, [pc, #176]	; (8000600 <MGPIO_enSetPortValue+0x1c4>)
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	4a2b      	ldr	r2, [pc, #172]	; (8000600 <MGPIO_enSetPortValue+0x1c4>)
 8000552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000556:	60d3      	str	r3, [r2, #12]
			GPIOB->GPIO_ODR |= PORT_RESET;
 8000558:	4b29      	ldr	r3, [pc, #164]	; (8000600 <MGPIO_enSetPortValue+0x1c4>)
 800055a:	4a29      	ldr	r2, [pc, #164]	; (8000600 <MGPIO_enSetPortValue+0x1c4>)
 800055c:	68db      	ldr	r3, [r3, #12]
 800055e:	60d3      	str	r3, [r2, #12]
 8000560:	e002      	b.n	8000568 <MGPIO_enSetPortValue+0x12c>
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
 8000562:	2300      	movs	r3, #0
 8000564:	73fb      	strb	r3, [r7, #15]
		}
		break;
 8000566:	e043      	b.n	80005f0 <MGPIO_enSetPortValue+0x1b4>
 8000568:	e042      	b.n	80005f0 <MGPIO_enSetPortValue+0x1b4>

	case PORTC:
		if ((copy_u8Value == HIGH) && (copy_u8CRID == GPIO_CRL_ID))
 800056a:	797b      	ldrb	r3, [r7, #5]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d109      	bne.n	8000584 <MGPIO_enSetPortValue+0x148>
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d106      	bne.n	8000584 <MGPIO_enSetPortValue+0x148>
		{
			GPIOC->GPIO_ODR |= PORT_LVALUE;
 8000576:	4b23      	ldr	r3, [pc, #140]	; (8000604 <MGPIO_enSetPortValue+0x1c8>)
 8000578:	68db      	ldr	r3, [r3, #12]
 800057a:	4a22      	ldr	r2, [pc, #136]	; (8000604 <MGPIO_enSetPortValue+0x1c8>)
 800057c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000580:	60d3      	str	r3, [r2, #12]
 8000582:	e031      	b.n	80005e8 <MGPIO_enSetPortValue+0x1ac>
		}
		else if ((copy_u8Value == HIGH) && (copy_u8CRID == GPIO_CRH_ID))
 8000584:	797b      	ldrb	r3, [r7, #5]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d109      	bne.n	800059e <MGPIO_enSetPortValue+0x162>
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d106      	bne.n	800059e <MGPIO_enSetPortValue+0x162>
		{
			GPIOC->GPIO_ODR |= PORT_HVALUE;
 8000590:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <MGPIO_enSetPortValue+0x1c8>)
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	4a1b      	ldr	r2, [pc, #108]	; (8000604 <MGPIO_enSetPortValue+0x1c8>)
 8000596:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 800059a:	60d3      	str	r3, [r2, #12]
 800059c:	e024      	b.n	80005e8 <MGPIO_enSetPortValue+0x1ac>
		}
		else if ((copy_u8Value == LOW) && (copy_u8CRID == GPIO_CRL_ID))
 800059e:	797b      	ldrb	r3, [r7, #5]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d10d      	bne.n	80005c0 <MGPIO_enSetPortValue+0x184>
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d10a      	bne.n	80005c0 <MGPIO_enSetPortValue+0x184>
		{
			GPIOC->GPIO_ODR &= ~(PORT_LVALUE);
 80005aa:	4b16      	ldr	r3, [pc, #88]	; (8000604 <MGPIO_enSetPortValue+0x1c8>)
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	4a15      	ldr	r2, [pc, #84]	; (8000604 <MGPIO_enSetPortValue+0x1c8>)
 80005b0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80005b4:	60d3      	str	r3, [r2, #12]
			GPIOC->GPIO_ODR |= PORT_RESET;
 80005b6:	4b13      	ldr	r3, [pc, #76]	; (8000604 <MGPIO_enSetPortValue+0x1c8>)
 80005b8:	4a12      	ldr	r2, [pc, #72]	; (8000604 <MGPIO_enSetPortValue+0x1c8>)
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	60d3      	str	r3, [r2, #12]
 80005be:	e013      	b.n	80005e8 <MGPIO_enSetPortValue+0x1ac>
		}
		else if ((copy_u8Value == LOW) && (copy_u8CRID == GPIO_CRH_ID))
 80005c0:	797b      	ldrb	r3, [r7, #5]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d10d      	bne.n	80005e2 <MGPIO_enSetPortValue+0x1a6>
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d10a      	bne.n	80005e2 <MGPIO_enSetPortValue+0x1a6>
		{
			GPIOC->GPIO_ODR &= ~(PORT_HVALUE);
 80005cc:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <MGPIO_enSetPortValue+0x1c8>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	4a0c      	ldr	r2, [pc, #48]	; (8000604 <MGPIO_enSetPortValue+0x1c8>)
 80005d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80005d6:	60d3      	str	r3, [r2, #12]
			GPIOC->GPIO_ODR |= PORT_RESET;
 80005d8:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <MGPIO_enSetPortValue+0x1c8>)
 80005da:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <MGPIO_enSetPortValue+0x1c8>)
 80005dc:	68db      	ldr	r3, [r3, #12]
 80005de:	60d3      	str	r3, [r2, #12]
 80005e0:	e002      	b.n	80005e8 <MGPIO_enSetPortValue+0x1ac>
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
 80005e2:	2300      	movs	r3, #0
 80005e4:	73fb      	strb	r3, [r7, #15]
		}
		break;
 80005e6:	e003      	b.n	80005f0 <MGPIO_enSetPortValue+0x1b4>
 80005e8:	e002      	b.n	80005f0 <MGPIO_enSetPortValue+0x1b4>

	default:
		local_state = OUT_OF_RANG_ERR;
 80005ea:	2300      	movs	r3, #0
 80005ec:	73fb      	strb	r3, [r7, #15]
		break;
 80005ee:	bf00      	nop

	}
	return local_state;
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	40010800 	.word	0x40010800
 8000600:	40010c00 	.word	0x40010c00
 8000604:	40011000 	.word	0x40011000

08000608 <MRCC_enSysClkINIT>:
#include "MRCC_int.h"
#include "MRCC_config.h"
#include "MRCC_priv.h"

ErrorState_t MRCC_enSysClkINIT(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0


	/** CLK source is HSI **/
#elif(RCC_CLK_TYPE == RCC_HSI)
	/* 1. ENABLE the HSI */
	SET_BIT(RCC->RCC_CR, HSION);
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <MRCC_enSysClkINIT+0x74>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a1a      	ldr	r2, [pc, #104]	; (800067c <MRCC_enSysClkINIT+0x74>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

	/* 2. wait till HSE is READY 'settling time finished', stable */
	while (!(GET_BIT(RCC->RCC_CR, HSIRDY)));
 8000618:	bf00      	nop
 800061a:	4b18      	ldr	r3, [pc, #96]	; (800067c <MRCC_enSysClkINIT+0x74>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	085b      	lsrs	r3, r3, #1
 8000620:	f003 0301 	and.w	r3, r3, #1
 8000624:	2b00      	cmp	r3, #0
 8000626:	d0f8      	beq.n	800061a <MRCC_enSysClkINIT+0x12>

	/* 3. Enable System switch clock with HSI */
	CLR_BIT(RCC->RCC_CFGR, SWC);
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <MRCC_enSysClkINIT+0x74>)
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	4a13      	ldr	r2, [pc, #76]	; (800067c <MRCC_enSysClkINIT+0x74>)
 800062e:	f023 0301 	bic.w	r3, r3, #1
 8000632:	6053      	str	r3, [r2, #4]

#else
#error("WRONG CLK TYPE");
#endif
	/* MASK the AHB and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= RCC_AHB_MASK;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <MRCC_enSysClkINIT+0x74>)
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	4a10      	ldr	r2, [pc, #64]	; (800067c <MRCC_enSysClkINIT+0x74>)
 800063a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800063e:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= RCC_AHB_PRESCALER;
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MRCC_enSysClkINIT+0x74>)
 8000642:	4a0e      	ldr	r2, [pc, #56]	; (800067c <MRCC_enSysClkINIT+0x74>)
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	6053      	str	r3, [r2, #4]

	/* MASK the APB1 and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= RCC_APB1_MASK;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MRCC_enSysClkINIT+0x74>)
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	4a0b      	ldr	r2, [pc, #44]	; (800067c <MRCC_enSysClkINIT+0x74>)
 800064e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000652:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= RCC_APB1_PRESCALER_MODE;
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <MRCC_enSysClkINIT+0x74>)
 8000656:	4a09      	ldr	r2, [pc, #36]	; (800067c <MRCC_enSysClkINIT+0x74>)
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	6053      	str	r3, [r2, #4]

	/* MASK the APB2 and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= RCC_APB2_MASK;
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <MRCC_enSysClkINIT+0x74>)
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	4a06      	ldr	r2, [pc, #24]	; (800067c <MRCC_enSysClkINIT+0x74>)
 8000662:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000666:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= RCC_APB2_PRESCALER_MODE;
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <MRCC_enSysClkINIT+0x74>)
 800066a:	4a04      	ldr	r2, [pc, #16]	; (800067c <MRCC_enSysClkINIT+0x74>)
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	6053      	str	r3, [r2, #4]
		RCC->RCC_CFGR &= RCC_MCO_MASK;
		RCC->RCC_CFGR |= RCC_MCO_MODE ;
	}
#endif

	return SUCCESS;
 8000670:	2302      	movs	r3, #2
}
 8000672:	4618      	mov	r0, r3
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	40021000 	.word	0x40021000

08000680 <MRCC_enEnablePeripheralCLK>:

ErrorState_t MRCC_enEnablePeripheralCLK(peripheral_ID copy_u8Peripheral)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
	ErrorState_t local_state = SUCCESS;
 800068a:	2302      	movs	r3, #2
 800068c:	73fb      	strb	r3, [r7, #15]

	/* based on predefined Peripheral, switch to corresponding Register, and Enabled it*/
	if (copy_u8Peripheral <= 31)
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	2b1f      	cmp	r3, #31
 8000692:	d80a      	bhi.n	80006aa <MRCC_enEnablePeripheralCLK+0x2a>
		SET_BIT(RCC->RCC_AHBENR, copy_u8Peripheral);
 8000694:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <MRCC_enEnablePeripheralCLK+0x80>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	79fa      	ldrb	r2, [r7, #7]
 800069a:	2101      	movs	r1, #1
 800069c:	fa01 f202 	lsl.w	r2, r1, r2
 80006a0:	4611      	mov	r1, r2
 80006a2:	4a17      	ldr	r2, [pc, #92]	; (8000700 <MRCC_enEnablePeripheralCLK+0x80>)
 80006a4:	430b      	orrs	r3, r1
 80006a6:	6153      	str	r3, [r2, #20]
 80006a8:	e023      	b.n	80006f2 <MRCC_enEnablePeripheralCLK+0x72>

	else if (copy_u8Peripheral <= 63)
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	2b3f      	cmp	r3, #63	; 0x3f
 80006ae:	d80d      	bhi.n	80006cc <MRCC_enEnablePeripheralCLK+0x4c>
	{
		copy_u8Peripheral -= 32;
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	3b20      	subs	r3, #32
 80006b4:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->RCC_APB1ENR, copy_u8Peripheral);
 80006b6:	4b12      	ldr	r3, [pc, #72]	; (8000700 <MRCC_enEnablePeripheralCLK+0x80>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	79fa      	ldrb	r2, [r7, #7]
 80006bc:	2101      	movs	r1, #1
 80006be:	fa01 f202 	lsl.w	r2, r1, r2
 80006c2:	4611      	mov	r1, r2
 80006c4:	4a0e      	ldr	r2, [pc, #56]	; (8000700 <MRCC_enEnablePeripheralCLK+0x80>)
 80006c6:	430b      	orrs	r3, r1
 80006c8:	61d3      	str	r3, [r2, #28]
 80006ca:	e012      	b.n	80006f2 <MRCC_enEnablePeripheralCLK+0x72>
	}

	else if (copy_u8Peripheral <= 95)
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	2b5f      	cmp	r3, #95	; 0x5f
 80006d0:	d80d      	bhi.n	80006ee <MRCC_enEnablePeripheralCLK+0x6e>
	{
		copy_u8Peripheral -= 64;
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	3b40      	subs	r3, #64	; 0x40
 80006d6:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->RCC_APB2ENR, copy_u8Peripheral);
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MRCC_enEnablePeripheralCLK+0x80>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	79fa      	ldrb	r2, [r7, #7]
 80006de:	2101      	movs	r1, #1
 80006e0:	fa01 f202 	lsl.w	r2, r1, r2
 80006e4:	4611      	mov	r1, r2
 80006e6:	4a06      	ldr	r2, [pc, #24]	; (8000700 <MRCC_enEnablePeripheralCLK+0x80>)
 80006e8:	430b      	orrs	r3, r1
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	e001      	b.n	80006f2 <MRCC_enEnablePeripheralCLK+0x72>
	}

	else
	{
		local_state = OUT_OF_RANG_ERR;
 80006ee:	2300      	movs	r3, #0
 80006f0:	73fb      	strb	r3, [r7, #15]
	}
	return local_state;
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000

08000704 <MSTK_enDelayMS>:

	return SUCCESS;
}

ErrorState_t MSTK_enDelayMS(u32 copy_u16delayMS)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	u8 local = GET_BIT(STK->STK_CTRL,COUNTFLAG);
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <MSTK_enDelayMS+0x58>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	0c1b      	lsrs	r3, r3, #16
 8000712:	b2db      	uxtb	r3, r3
 8000714:	f003 0301 	and.w	r3, r3, #1
 8000718:	73fb      	strb	r3, [r7, #15]
	STK->STK_LOAD = copy_u16delayMS ;
 800071a:	4a10      	ldr	r2, [pc, #64]	; (800075c <MSTK_enDelayMS+0x58>)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6053      	str	r3, [r2, #4]
	SET_BIT(STK->STK_CTRL, ENABLE);
 8000720:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MSTK_enDelayMS+0x58>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a0d      	ldr	r2, [pc, #52]	; (800075c <MSTK_enDelayMS+0x58>)
 8000726:	f043 0301 	orr.w	r3, r3, #1
 800072a:	6013      	str	r3, [r2, #0]

	while (!(GET_BIT(STK->STK_CTRL, COUNTFLAG)));
 800072c:	bf00      	nop
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MSTK_enDelayMS+0x58>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	0c1b      	lsrs	r3, r3, #16
 8000734:	f003 0301 	and.w	r3, r3, #1
 8000738:	2b00      	cmp	r3, #0
 800073a:	d0f8      	beq.n	800072e <MSTK_enDelayMS+0x2a>

	CLR_BIT(STK->STK_CTRL, ENABLE);
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <MSTK_enDelayMS+0x58>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a06      	ldr	r2, [pc, #24]	; (800075c <MSTK_enDelayMS+0x58>)
 8000742:	f023 0301 	bic.w	r3, r3, #1
 8000746:	6013      	str	r3, [r2, #0]
	STK->STK_VAL = 0;
 8000748:	4b04      	ldr	r3, [pc, #16]	; (800075c <MSTK_enDelayMS+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]

	return SUCCESS;
 800074e:	2302      	movs	r3, #2

}
 8000750:	4618      	mov	r0, r3
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000e010 	.word	0xe000e010

08000760 <SysTick_Handler>:
}



void SysTick_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
	volatile u8 local_temp = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	71fb      	strb	r3, [r7, #7]
	if (flag == 1)
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <SysTick_Handler+0x58>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d10e      	bne.n	8000790 <SysTick_Handler+0x30>
	{
		CLR_BIT(STK->STK_CTRL, TICKINT);
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <SysTick_Handler+0x5c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a11      	ldr	r2, [pc, #68]	; (80007bc <SysTick_Handler+0x5c>)
 8000778:	f023 0302 	bic.w	r3, r3, #2
 800077c:	6013      	str	r3, [r2, #0]
		CLR_BIT(STK->STK_CTRL, ENABLE);
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SysTick_Handler+0x5c>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a0e      	ldr	r2, [pc, #56]	; (80007bc <SysTick_Handler+0x5c>)
 8000784:	f023 0301 	bic.w	r3, r3, #1
 8000788:	6013      	str	r3, [r2, #0]
		STK->STK_VAL = 0;
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <SysTick_Handler+0x5c>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
	}

	if (STK_Callback != NULL)
 8000790:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <SysTick_Handler+0x60>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d002      	beq.n	800079e <SysTick_Handler+0x3e>
	{
		STK_Callback();
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <SysTick_Handler+0x60>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4798      	blx	r3
	}

	local_temp = GET_BIT(STK->STK_CTRL,COUNTFLAG);
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <SysTick_Handler+0x5c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	0c1b      	lsrs	r3, r3, #16
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	71fb      	strb	r3, [r7, #7]
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000050 	.word	0x20000050
 80007bc:	e000e010 	.word	0xe000e010
 80007c0:	2000004c 	.word	0x2000004c

080007c4 <main>:
				{0, 0, 36, 52, 44, 36, 0, 0}};

u8 text[] = "HELLO";

int main(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
	MRCC_enSysClkINIT();
 80007ca:	f7ff ff1d 	bl	8000608 <MRCC_enSysClkINIT>
	MRCC_enEnablePeripheralCLK(IOPA);
 80007ce:	2042      	movs	r0, #66	; 0x42
 80007d0:	f7ff ff56 	bl	8000680 <MRCC_enEnablePeripheralCLK>
	MRCC_enEnablePeripheralCLK(IOPB);
 80007d4:	2043      	movs	r0, #67	; 0x43
 80007d6:	f7ff ff53 	bl	8000680 <MRCC_enEnablePeripheralCLK>

	HLEDMRX_enInit();
 80007da:	f7ff fcc9 	bl	8000170 <HLEDMRX_enInit>

	while (1)
	{
		for (u8 i = 0; i < 6; i++)
 80007de:	2300      	movs	r3, #0
 80007e0:	71fb      	strb	r3, [r7, #7]
 80007e2:	e00a      	b.n	80007fa <main+0x36>
		{
			HLEDMRX_enDisplayMotion(name[i], 50);
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	00db      	lsls	r3, r3, #3
 80007e8:	4a06      	ldr	r2, [pc, #24]	; (8000804 <main+0x40>)
 80007ea:	4413      	add	r3, r2
 80007ec:	2132      	movs	r1, #50	; 0x32
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff fcf8 	bl	80001e4 <HLEDMRX_enDisplayMotion>
		for (u8 i = 0; i < 6; i++)
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	3301      	adds	r3, #1
 80007f8:	71fb      	strb	r3, [r7, #7]
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b05      	cmp	r3, #5
 80007fe:	d9f1      	bls.n	80007e4 <main+0x20>
 8000800:	e7ed      	b.n	80007de <main+0x1a>
 8000802:	bf00      	nop
 8000804:	20000000 	.word	0x20000000

08000808 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000808:	480d      	ldr	r0, [pc, #52]	; (8000840 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800080a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800080c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000810:	480c      	ldr	r0, [pc, #48]	; (8000844 <LoopForever+0x6>)
  ldr r1, =_edata
 8000812:	490d      	ldr	r1, [pc, #52]	; (8000848 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000814:	4a0d      	ldr	r2, [pc, #52]	; (800084c <LoopForever+0xe>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000818:	e002      	b.n	8000820 <LoopCopyDataInit>

0800081a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800081a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800081c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081e:	3304      	adds	r3, #4

08000820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000824:	d3f9      	bcc.n	800081a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000826:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000828:	4c0a      	ldr	r4, [pc, #40]	; (8000854 <LoopForever+0x16>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800082c:	e001      	b.n	8000832 <LoopFillZerobss>

0800082e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000830:	3204      	adds	r2, #4

08000832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000834:	d3fb      	bcc.n	800082e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000836:	f000 f811 	bl	800085c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800083a:	f7ff ffc3 	bl	80007c4 <main>

0800083e <LoopForever>:

LoopForever:
    b LoopForever
 800083e:	e7fe      	b.n	800083e <LoopForever>
  ldr   r0, =_estack
 8000840:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000848:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 800084c:	080008c4 	.word	0x080008c4
  ldr r2, =_sbss
 8000850:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000854:	20000054 	.word	0x20000054

08000858 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000858:	e7fe      	b.n	8000858 <ADC1_2_IRQHandler>
	...

0800085c <__libc_init_array>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	2600      	movs	r6, #0
 8000860:	4d0c      	ldr	r5, [pc, #48]	; (8000894 <__libc_init_array+0x38>)
 8000862:	4c0d      	ldr	r4, [pc, #52]	; (8000898 <__libc_init_array+0x3c>)
 8000864:	1b64      	subs	r4, r4, r5
 8000866:	10a4      	asrs	r4, r4, #2
 8000868:	42a6      	cmp	r6, r4
 800086a:	d109      	bne.n	8000880 <__libc_init_array+0x24>
 800086c:	f000 f81a 	bl	80008a4 <_init>
 8000870:	2600      	movs	r6, #0
 8000872:	4d0a      	ldr	r5, [pc, #40]	; (800089c <__libc_init_array+0x40>)
 8000874:	4c0a      	ldr	r4, [pc, #40]	; (80008a0 <__libc_init_array+0x44>)
 8000876:	1b64      	subs	r4, r4, r5
 8000878:	10a4      	asrs	r4, r4, #2
 800087a:	42a6      	cmp	r6, r4
 800087c:	d105      	bne.n	800088a <__libc_init_array+0x2e>
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f855 3b04 	ldr.w	r3, [r5], #4
 8000884:	4798      	blx	r3
 8000886:	3601      	adds	r6, #1
 8000888:	e7ee      	b.n	8000868 <__libc_init_array+0xc>
 800088a:	f855 3b04 	ldr.w	r3, [r5], #4
 800088e:	4798      	blx	r3
 8000890:	3601      	adds	r6, #1
 8000892:	e7f2      	b.n	800087a <__libc_init_array+0x1e>
 8000894:	080008bc 	.word	0x080008bc
 8000898:	080008bc 	.word	0x080008bc
 800089c:	080008bc 	.word	0x080008bc
 80008a0:	080008c0 	.word	0x080008c0

080008a4 <_init>:
 80008a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008a6:	bf00      	nop
 80008a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008aa:	bc08      	pop	{r3}
 80008ac:	469e      	mov	lr, r3
 80008ae:	4770      	bx	lr

080008b0 <_fini>:
 80008b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008b2:	bf00      	nop
 80008b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008b6:	bc08      	pop	{r3}
 80008b8:	469e      	mov	lr, r3
 80008ba:	4770      	bx	lr
