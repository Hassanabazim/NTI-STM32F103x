
EXTI-LAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000948  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a78  08000a78  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a78  08000a78  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000a78  08000a78  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a78  08000a78  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a78  08000a78  00010a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a7c  08000a7c  00010a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000a80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000008  08000a88  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08000a88  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   000019eb  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006c4  00000000  00000000  00021a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000220  00000000  00000000  000220e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a8  00000000  00000000  00022300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000010ac  00000000  00000000  000224a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000015e1  00000000  00000000  00023554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004647  00000000  00000000  00024b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0002917c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000684  00000000  00000000  000291d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a60 	.word	0x08000a60

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	08000a60 	.word	0x08000a60

08000170 <HLED_enInit>:
#include "HLED_priv.h"
#include "HLED_config.h"


ErrorState_t HLED_enInit(u8 copyu8_LedPort, u8 copyu8_LedPin)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	460a      	mov	r2, r1
 800017a:	71fb      	strb	r3, [r7, #7]
 800017c:	4613      	mov	r3, r2
 800017e:	71bb      	strb	r3, [r7, #6]
	MGPIO_enSetPinDirection(copyu8_LedPort, copyu8_LedPin, OUT_2MHZ_PP);
 8000180:	79b9      	ldrb	r1, [r7, #6]
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	2202      	movs	r2, #2
 8000186:	4618      	mov	r0, r3
 8000188:	f000 f9c2 	bl	8000510 <MGPIO_enSetPinDirection>

	return SUCCESS;
 800018c:	2302      	movs	r3, #2
}
 800018e:	4618      	mov	r0, r3
 8000190:	3708      	adds	r7, #8
 8000192:	46bd      	mov	sp, r7
 8000194:	bd80      	pop	{r7, pc}

08000196 <HLED_enSetON>:

ErrorState_t HLED_enSetON(u8 copyu8_LedPort, u8 copyu8_LedPin)
{
 8000196:	b580      	push	{r7, lr}
 8000198:	b082      	sub	sp, #8
 800019a:	af00      	add	r7, sp, #0
 800019c:	4603      	mov	r3, r0
 800019e:	460a      	mov	r2, r1
 80001a0:	71fb      	strb	r3, [r7, #7]
 80001a2:	4613      	mov	r3, r2
 80001a4:	71bb      	strb	r3, [r7, #6]
#if(HLED_DIR == HLED_DIR_FORWARD)
	MGPIO_enSetPinValue(copyu8_LedPort, copyu8_LedPin, HIGH);
 80001a6:	79b9      	ldrb	r1, [r7, #6]
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	2201      	movs	r2, #1
 80001ac:	4618      	mov	r0, r3
 80001ae:	f000 fa89 	bl	80006c4 <MGPIO_enSetPinValue>
	MGPIO_enSetPinValue(copyu8_LedPort, copyu8_LedPin, LOW);
#else
#error ("WRONG LED DIRECTION")
#endif

	return SUCCESS;
 80001b2:	2302      	movs	r3, #2
}
 80001b4:	4618      	mov	r0, r3
 80001b6:	3708      	adds	r7, #8
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}

080001bc <HLED_enSetOFF>:

ErrorState_t HLED_enSetOFF(u8 copyu8_LedPort, u8 copyu8_LedPin)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	4603      	mov	r3, r0
 80001c4:	460a      	mov	r2, r1
 80001c6:	71fb      	strb	r3, [r7, #7]
 80001c8:	4613      	mov	r3, r2
 80001ca:	71bb      	strb	r3, [r7, #6]
#if(HLED_DIR == HLED_DIR_FORWARD)
	MGPIO_enSetPinValue(copyu8_LedPort, copyu8_LedPin, LOW);
 80001cc:	79b9      	ldrb	r1, [r7, #6]
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	2200      	movs	r2, #0
 80001d2:	4618      	mov	r0, r3
 80001d4:	f000 fa76 	bl	80006c4 <MGPIO_enSetPinValue>
	MGPIO_enSetPinValue(copyu8_LedPort, copyu8_LedPin, HIGH);
#else
#error ("WRONG LED DIRECTION")
#endif

	return SUCCESS;
 80001d8:	2302      	movs	r3, #2
}
 80001da:	4618      	mov	r0, r3
 80001dc:	3708      	adds	r7, #8
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}

080001e2 <HPB_enInit>:
#include "HPB_priv.h"
#include "HPB_config.h"


ErrorState_t HPB_enInit(PB_ST *ptrPB)
{
 80001e2:	b580      	push	{r7, lr}
 80001e4:	b084      	sub	sp, #16
 80001e6:	af00      	add	r7, sp, #0
 80001e8:	6078      	str	r0, [r7, #4]
	ErrorState_t Local_state = SUCCESS;
 80001ea:	2302      	movs	r3, #2
 80001ec:	73fb      	strb	r3, [r7, #15]

	if (ptrPB->PB_PORT >= PORTA && ptrPB->PB_PORT <= PORTC)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d018      	beq.n	8000228 <HPB_enInit+0x46>
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	2b03      	cmp	r3, #3
 80001fc:	d814      	bhi.n	8000228 <HPB_enInit+0x46>
	{
		MGPIO_enSetPinDirection(ptrPB->PB_PORT, ptrPB->PB_PIN, IN_PU_PD);
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	7818      	ldrb	r0, [r3, #0]
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	785b      	ldrb	r3, [r3, #1]
 8000206:	2208      	movs	r2, #8
 8000208:	4619      	mov	r1, r3
 800020a:	f000 f981 	bl	8000510 <MGPIO_enSetPinDirection>

		/* Activiate Internal PULL-UPS Resistors */
		if(ptrPB->PB_MODE== PULL_UP)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	789b      	ldrb	r3, [r3, #2]
 8000212:	2b00      	cmp	r3, #0
 8000214:	d10a      	bne.n	800022c <HPB_enInit+0x4a>
			MGPIO_enSetPinValue(ptrPB->PB_PORT, ptrPB->PB_PIN, HIGH);
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	7818      	ldrb	r0, [r3, #0]
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	785b      	ldrb	r3, [r3, #1]
 800021e:	2201      	movs	r2, #1
 8000220:	4619      	mov	r1, r3
 8000222:	f000 fa4f 	bl	80006c4 <MGPIO_enSetPinValue>
		if(ptrPB->PB_MODE== PULL_UP)
 8000226:	e001      	b.n	800022c <HPB_enInit+0x4a>
	}

	else
	{
		Local_state = OUT_OF_RANG_ERR;
 8000228:	2300      	movs	r3, #0
 800022a:	73fb      	strb	r3, [r7, #15]
	}

	return Local_state;
 800022c:	7bfb      	ldrb	r3, [r7, #15]
}
 800022e:	4618      	mov	r0, r3
 8000230:	3710      	adds	r7, #16
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
	...

08000238 <MEXTI_enInit>:

void (*EXTI_CALLBACK[16])(void) = {0};


ErrorState_t MEXTI_enInit(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
#if (EXTI_MODE == EXTI_RISING_TRIG)
	SET_BIT(EXTI->EXTI_RTSR,EXTI_LINE);
 800023c:	4b08      	ldr	r3, [pc, #32]	; (8000260 <MEXTI_enInit+0x28>)
 800023e:	689b      	ldr	r3, [r3, #8]
 8000240:	4a07      	ldr	r2, [pc, #28]	; (8000260 <MEXTI_enInit+0x28>)
 8000242:	f043 0301 	orr.w	r3, r3, #1
 8000246:	6093      	str	r3, [r2, #8]

#else
#error("Wrong EXTI MODE!");
#endif

	SET_BIT(EXTI->EXTI_IMR, EXTI_LINE);
 8000248:	4b05      	ldr	r3, [pc, #20]	; (8000260 <MEXTI_enInit+0x28>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a04      	ldr	r2, [pc, #16]	; (8000260 <MEXTI_enInit+0x28>)
 800024e:	f043 0301 	orr.w	r3, r3, #1
 8000252:	6013      	str	r3, [r2, #0]

	return SUCCESS;
 8000254:	2302      	movs	r3, #2
}
 8000256:	4618      	mov	r0, r3
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40010400 	.word	0x40010400

08000264 <MEXTI_enEnable>:

ErrorState_t MEXTI_enEnable(u8 Copy_u8LineId)
{
 8000264:	b480      	push	{r7}
 8000266:	b085      	sub	sp, #20
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	71fb      	strb	r3, [r7, #7]
	ErrorState_t local_state = SUCCESS ;
 800026e:	2302      	movs	r3, #2
 8000270:	73fb      	strb	r3, [r7, #15]

	if (Copy_u8LineId <= 15)
 8000272:	79fb      	ldrb	r3, [r7, #7]
 8000274:	2b0f      	cmp	r3, #15
 8000276:	d80a      	bhi.n	800028e <MEXTI_enEnable+0x2a>
	{
		SET_BIT(EXTI->EXTI_IMR, Copy_u8LineId);
 8000278:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <MEXTI_enEnable+0x3c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	79fa      	ldrb	r2, [r7, #7]
 800027e:	2101      	movs	r1, #1
 8000280:	fa01 f202 	lsl.w	r2, r1, r2
 8000284:	4611      	mov	r1, r2
 8000286:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <MEXTI_enEnable+0x3c>)
 8000288:	430b      	orrs	r3, r1
 800028a:	6013      	str	r3, [r2, #0]
 800028c:	e001      	b.n	8000292 <MEXTI_enEnable+0x2e>
	}
	else
	{
		local_state = OUT_OF_RANG_ERR;
 800028e:	2300      	movs	r3, #0
 8000290:	73fb      	strb	r3, [r7, #15]
	}

	return local_state;
 8000292:	7bfb      	ldrb	r3, [r7, #15]
}
 8000294:	4618      	mov	r0, r3
 8000296:	3714      	adds	r7, #20
 8000298:	46bd      	mov	sp, r7
 800029a:	bc80      	pop	{r7}
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	40010400 	.word	0x40010400

080002a4 <MEXTI_enCallBack>:

	return local_state;
}

ErrorState_t MEXTI_enCallBack(u8 Copy_u8LineId, void (*ptr) (void))
{
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	6039      	str	r1, [r7, #0]
 80002ae:	71fb      	strb	r3, [r7, #7]
	ErrorState_t local_state = SUCCESS ;
 80002b0:	2302      	movs	r3, #2
 80002b2:	73fb      	strb	r3, [r7, #15]
	if (ptr == NULL)
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d102      	bne.n	80002c0 <MEXTI_enCallBack+0x1c>
	{
		local_state = NULL_PTR_ERR;
 80002ba:	2301      	movs	r3, #1
 80002bc:	73fb      	strb	r3, [r7, #15]
 80002be:	e004      	b.n	80002ca <MEXTI_enCallBack+0x26>
	}
	else
	{
		EXTI_CALLBACK[Copy_u8LineId] = ptr;
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	4905      	ldr	r1, [pc, #20]	; (80002d8 <MEXTI_enCallBack+0x34>)
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	return local_state ;
 80002ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	3714      	adds	r7, #20
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bc80      	pop	{r7}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	20000024 	.word	0x20000024

080002dc <MEXTI_enClearPendingBit>:

	return local_state;
}

ErrorState_t MEXTI_enClearPendingBit(u8 Copy_u8LineId)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]
	ErrorState_t local_state = SUCCESS ;
 80002e6:	2302      	movs	r3, #2
 80002e8:	73fb      	strb	r3, [r7, #15]

	if (Copy_u8LineId <= 15)
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	2b0f      	cmp	r3, #15
 80002ee:	d80a      	bhi.n	8000306 <MEXTI_enClearPendingBit+0x2a>
	{
		SET_BIT(EXTI->EXTI_PR, Copy_u8LineId);
 80002f0:	4b09      	ldr	r3, [pc, #36]	; (8000318 <MEXTI_enClearPendingBit+0x3c>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	79fa      	ldrb	r2, [r7, #7]
 80002f6:	2101      	movs	r1, #1
 80002f8:	fa01 f202 	lsl.w	r2, r1, r2
 80002fc:	4611      	mov	r1, r2
 80002fe:	4a06      	ldr	r2, [pc, #24]	; (8000318 <MEXTI_enClearPendingBit+0x3c>)
 8000300:	430b      	orrs	r3, r1
 8000302:	6153      	str	r3, [r2, #20]
 8000304:	e001      	b.n	800030a <MEXTI_enClearPendingBit+0x2e>
	}
	else
	{
		local_state = OUT_OF_RANG_ERR;
 8000306:	2300      	movs	r3, #0
 8000308:	73fb      	strb	r3, [r7, #15]
	}

	return local_state;
 800030a:	7bfb      	ldrb	r3, [r7, #15]
}
 800030c:	4618      	mov	r0, r3
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40010400 	.word	0x40010400

0800031c <MEXTI_enSetLatch>:

ErrorState_t MEXTI_enSetLatch(u8 Copy_u8LineId, u8 Copy_u8Mode)
{
 800031c:	b480      	push	{r7}
 800031e:	b085      	sub	sp, #20
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	460a      	mov	r2, r1
 8000326:	71fb      	strb	r3, [r7, #7]
 8000328:	4613      	mov	r3, r2
 800032a:	71bb      	strb	r3, [r7, #6]
	ErrorState_t local_state = SUCCESS ;
 800032c:	2302      	movs	r3, #2
 800032e:	73fb      	strb	r3, [r7, #15]

	if (Copy_u8LineId <= 15)
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	2b0f      	cmp	r3, #15
 8000334:	d837      	bhi.n	80003a6 <MEXTI_enSetLatch+0x8a>
	{
		switch (Copy_u8Mode)
 8000336:	79bb      	ldrb	r3, [r7, #6]
 8000338:	2b03      	cmp	r3, #3
 800033a:	d01c      	beq.n	8000376 <MEXTI_enSetLatch+0x5a>
 800033c:	2b03      	cmp	r3, #3
 800033e:	dc2f      	bgt.n	80003a0 <MEXTI_enSetLatch+0x84>
 8000340:	2b01      	cmp	r3, #1
 8000342:	d002      	beq.n	800034a <MEXTI_enSetLatch+0x2e>
 8000344:	2b02      	cmp	r3, #2
 8000346:	d00b      	beq.n	8000360 <MEXTI_enSetLatch+0x44>
 8000348:	e02a      	b.n	80003a0 <MEXTI_enSetLatch+0x84>
		{
		case EXTI_RISING_TRIG:
			SET_BIT(EXTI->EXTI_RTSR,Copy_u8LineId);
 800034a:	4b1b      	ldr	r3, [pc, #108]	; (80003b8 <MEXTI_enSetLatch+0x9c>)
 800034c:	689b      	ldr	r3, [r3, #8]
 800034e:	79fa      	ldrb	r2, [r7, #7]
 8000350:	2101      	movs	r1, #1
 8000352:	fa01 f202 	lsl.w	r2, r1, r2
 8000356:	4611      	mov	r1, r2
 8000358:	4a17      	ldr	r2, [pc, #92]	; (80003b8 <MEXTI_enSetLatch+0x9c>)
 800035a:	430b      	orrs	r3, r1
 800035c:	6093      	str	r3, [r2, #8]
			break;
 800035e:	e024      	b.n	80003aa <MEXTI_enSetLatch+0x8e>

		case EXTI_FAILING_TRIG:
			SET_BIT(EXTI->EXTI_FTSR,Copy_u8LineId);
 8000360:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <MEXTI_enSetLatch+0x9c>)
 8000362:	68db      	ldr	r3, [r3, #12]
 8000364:	79fa      	ldrb	r2, [r7, #7]
 8000366:	2101      	movs	r1, #1
 8000368:	fa01 f202 	lsl.w	r2, r1, r2
 800036c:	4611      	mov	r1, r2
 800036e:	4a12      	ldr	r2, [pc, #72]	; (80003b8 <MEXTI_enSetLatch+0x9c>)
 8000370:	430b      	orrs	r3, r1
 8000372:	60d3      	str	r3, [r2, #12]
			break;
 8000374:	e019      	b.n	80003aa <MEXTI_enSetLatch+0x8e>

		case EXTI_LOGIC_CHANGE:
			SET_BIT(EXTI->EXTI_RTSR,Copy_u8LineId);
 8000376:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <MEXTI_enSetLatch+0x9c>)
 8000378:	689b      	ldr	r3, [r3, #8]
 800037a:	79fa      	ldrb	r2, [r7, #7]
 800037c:	2101      	movs	r1, #1
 800037e:	fa01 f202 	lsl.w	r2, r1, r2
 8000382:	4611      	mov	r1, r2
 8000384:	4a0c      	ldr	r2, [pc, #48]	; (80003b8 <MEXTI_enSetLatch+0x9c>)
 8000386:	430b      	orrs	r3, r1
 8000388:	6093      	str	r3, [r2, #8]
			SET_BIT(EXTI->EXTI_FTSR,Copy_u8LineId);
 800038a:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <MEXTI_enSetLatch+0x9c>)
 800038c:	68db      	ldr	r3, [r3, #12]
 800038e:	79fa      	ldrb	r2, [r7, #7]
 8000390:	2101      	movs	r1, #1
 8000392:	fa01 f202 	lsl.w	r2, r1, r2
 8000396:	4611      	mov	r1, r2
 8000398:	4a07      	ldr	r2, [pc, #28]	; (80003b8 <MEXTI_enSetLatch+0x9c>)
 800039a:	430b      	orrs	r3, r1
 800039c:	60d3      	str	r3, [r2, #12]
			break;
 800039e:	e004      	b.n	80003aa <MEXTI_enSetLatch+0x8e>

		default:
			local_state = OUT_OF_RANG_ERR;
 80003a0:	2300      	movs	r3, #0
 80003a2:	73fb      	strb	r3, [r7, #15]
			break;
 80003a4:	e001      	b.n	80003aa <MEXTI_enSetLatch+0x8e>
		}
	}
	else
	{
		local_state = OUT_OF_RANG_ERR;
 80003a6:	2300      	movs	r3, #0
 80003a8:	73fb      	strb	r3, [r7, #15]
	}

	return local_state;
 80003aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	3714      	adds	r7, #20
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	40010400 	.word	0x40010400

080003bc <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	if (EXTI_CALLBACK[EXTI0_LINE] != NULL)
 80003c0:	4b04      	ldr	r3, [pc, #16]	; (80003d4 <EXTI0_IRQHandler+0x18>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d002      	beq.n	80003ce <EXTI0_IRQHandler+0x12>
	{
		EXTI_CALLBACK[EXTI0_LINE]();
 80003c8:	4b02      	ldr	r3, [pc, #8]	; (80003d4 <EXTI0_IRQHandler+0x18>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4798      	blx	r3
	}

}
 80003ce:	bf00      	nop
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	20000024 	.word	0x20000024

080003d8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	if (EXTI_CALLBACK[EXTI1_LINE] != NULL)
 80003dc:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <EXTI1_IRQHandler+0x18>)
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d002      	beq.n	80003ea <EXTI1_IRQHandler+0x12>
	{
		EXTI_CALLBACK[EXTI1_LINE]();
 80003e4:	4b02      	ldr	r3, [pc, #8]	; (80003f0 <EXTI1_IRQHandler+0x18>)
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	4798      	blx	r3
	}

}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	20000024 	.word	0x20000024

080003f4 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	if (EXTI_CALLBACK[EXTI2_LINE] != NULL)
 80003f8:	4b04      	ldr	r3, [pc, #16]	; (800040c <EXTI2_IRQHandler+0x18>)
 80003fa:	689b      	ldr	r3, [r3, #8]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d002      	beq.n	8000406 <EXTI2_IRQHandler+0x12>
	{
		EXTI_CALLBACK[EXTI2_LINE]();
 8000400:	4b02      	ldr	r3, [pc, #8]	; (800040c <EXTI2_IRQHandler+0x18>)
 8000402:	689b      	ldr	r3, [r3, #8]
 8000404:	4798      	blx	r3
	}
}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	20000024 	.word	0x20000024

08000410 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	if (EXTI_CALLBACK[EXTI3_LINE] != NULL)
 8000414:	4b04      	ldr	r3, [pc, #16]	; (8000428 <EXTI3_IRQHandler+0x18>)
 8000416:	68db      	ldr	r3, [r3, #12]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d002      	beq.n	8000422 <EXTI3_IRQHandler+0x12>
	{
		EXTI_CALLBACK[EXTI3_LINE]();
 800041c:	4b02      	ldr	r3, [pc, #8]	; (8000428 <EXTI3_IRQHandler+0x18>)
 800041e:	68db      	ldr	r3, [r3, #12]
 8000420:	4798      	blx	r3
	}
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	20000024 	.word	0x20000024

0800042c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	if (EXTI_CALLBACK[EXTI4_LINE] != NULL)
 8000430:	4b04      	ldr	r3, [pc, #16]	; (8000444 <EXTI4_IRQHandler+0x18>)
 8000432:	691b      	ldr	r3, [r3, #16]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d002      	beq.n	800043e <EXTI4_IRQHandler+0x12>
	{
		EXTI_CALLBACK[EXTI4_LINE]();
 8000438:	4b02      	ldr	r3, [pc, #8]	; (8000444 <EXTI4_IRQHandler+0x18>)
 800043a:	691b      	ldr	r3, [r3, #16]
 800043c:	4798      	blx	r3
	}
}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	20000024 	.word	0x20000024

08000448 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	if (EXTI_CALLBACK[EXTI5_LINE] != NULL)
 800044c:	4b14      	ldr	r3, [pc, #80]	; (80004a0 <EXTI9_5_IRQHandler+0x58>)
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d003      	beq.n	800045c <EXTI9_5_IRQHandler+0x14>
	{
		EXTI_CALLBACK[EXTI5_LINE]();
 8000454:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <EXTI9_5_IRQHandler+0x58>)
 8000456:	695b      	ldr	r3, [r3, #20]
 8000458:	4798      	blx	r3
	else if (EXTI_CALLBACK[EXTI9_LINE] != NULL)
	{
		EXTI_CALLBACK[EXTI9_LINE]();

	}
}
 800045a:	e01e      	b.n	800049a <EXTI9_5_IRQHandler+0x52>
	else if (EXTI_CALLBACK[EXTI6_LINE] != NULL)
 800045c:	4b10      	ldr	r3, [pc, #64]	; (80004a0 <EXTI9_5_IRQHandler+0x58>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d003      	beq.n	800046c <EXTI9_5_IRQHandler+0x24>
		EXTI_CALLBACK[EXTI6_LINE]();
 8000464:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <EXTI9_5_IRQHandler+0x58>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4798      	blx	r3
}
 800046a:	e016      	b.n	800049a <EXTI9_5_IRQHandler+0x52>
	else if (EXTI_CALLBACK[EXTI7_LINE] != NULL)
 800046c:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <EXTI9_5_IRQHandler+0x58>)
 800046e:	69db      	ldr	r3, [r3, #28]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d003      	beq.n	800047c <EXTI9_5_IRQHandler+0x34>
		EXTI_CALLBACK[EXTI7_LINE]();
 8000474:	4b0a      	ldr	r3, [pc, #40]	; (80004a0 <EXTI9_5_IRQHandler+0x58>)
 8000476:	69db      	ldr	r3, [r3, #28]
 8000478:	4798      	blx	r3
}
 800047a:	e00e      	b.n	800049a <EXTI9_5_IRQHandler+0x52>
	else if (EXTI_CALLBACK[EXTI8_LINE] != NULL)
 800047c:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <EXTI9_5_IRQHandler+0x58>)
 800047e:	6a1b      	ldr	r3, [r3, #32]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d003      	beq.n	800048c <EXTI9_5_IRQHandler+0x44>
		EXTI_CALLBACK[EXTI8_LINE]();
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <EXTI9_5_IRQHandler+0x58>)
 8000486:	6a1b      	ldr	r3, [r3, #32]
 8000488:	4798      	blx	r3
}
 800048a:	e006      	b.n	800049a <EXTI9_5_IRQHandler+0x52>
	else if (EXTI_CALLBACK[EXTI9_LINE] != NULL)
 800048c:	4b04      	ldr	r3, [pc, #16]	; (80004a0 <EXTI9_5_IRQHandler+0x58>)
 800048e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000490:	2b00      	cmp	r3, #0
 8000492:	d002      	beq.n	800049a <EXTI9_5_IRQHandler+0x52>
		EXTI_CALLBACK[EXTI9_LINE]();
 8000494:	4b02      	ldr	r3, [pc, #8]	; (80004a0 <EXTI9_5_IRQHandler+0x58>)
 8000496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000498:	4798      	blx	r3
}
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	20000024 	.word	0x20000024

080004a4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	if (EXTI_CALLBACK[EXTI10_LINE] != NULL)
 80004a8:	4b18      	ldr	r3, [pc, #96]	; (800050c <EXTI15_10_IRQHandler+0x68>)
 80004aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d003      	beq.n	80004b8 <EXTI15_10_IRQHandler+0x14>
	{
		EXTI_CALLBACK[EXTI10_LINE]();
 80004b0:	4b16      	ldr	r3, [pc, #88]	; (800050c <EXTI15_10_IRQHandler+0x68>)
 80004b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004b4:	4798      	blx	r3
	else if (EXTI_CALLBACK[EXTI15_LINE] != NULL)
	{
		EXTI_CALLBACK[EXTI15_LINE]();

	}
}
 80004b6:	e026      	b.n	8000506 <EXTI15_10_IRQHandler+0x62>
	else if (EXTI_CALLBACK[EXTI11_LINE] != NULL)
 80004b8:	4b14      	ldr	r3, [pc, #80]	; (800050c <EXTI15_10_IRQHandler+0x68>)
 80004ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d003      	beq.n	80004c8 <EXTI15_10_IRQHandler+0x24>
		EXTI_CALLBACK[EXTI11_LINE]();
 80004c0:	4b12      	ldr	r3, [pc, #72]	; (800050c <EXTI15_10_IRQHandler+0x68>)
 80004c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004c4:	4798      	blx	r3
}
 80004c6:	e01e      	b.n	8000506 <EXTI15_10_IRQHandler+0x62>
	else if (EXTI_CALLBACK[EXTI12_LINE] != NULL)
 80004c8:	4b10      	ldr	r3, [pc, #64]	; (800050c <EXTI15_10_IRQHandler+0x68>)
 80004ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d003      	beq.n	80004d8 <EXTI15_10_IRQHandler+0x34>
		EXTI_CALLBACK[EXTI12_LINE]();
 80004d0:	4b0e      	ldr	r3, [pc, #56]	; (800050c <EXTI15_10_IRQHandler+0x68>)
 80004d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d4:	4798      	blx	r3
}
 80004d6:	e016      	b.n	8000506 <EXTI15_10_IRQHandler+0x62>
	else if (EXTI_CALLBACK[EXTI13_LINE] != NULL)
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <EXTI15_10_IRQHandler+0x68>)
 80004da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d003      	beq.n	80004e8 <EXTI15_10_IRQHandler+0x44>
		EXTI_CALLBACK[EXTI13_LINE]();
 80004e0:	4b0a      	ldr	r3, [pc, #40]	; (800050c <EXTI15_10_IRQHandler+0x68>)
 80004e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004e4:	4798      	blx	r3
}
 80004e6:	e00e      	b.n	8000506 <EXTI15_10_IRQHandler+0x62>
	else if (EXTI_CALLBACK[EXTI14_LINE] != NULL)
 80004e8:	4b08      	ldr	r3, [pc, #32]	; (800050c <EXTI15_10_IRQHandler+0x68>)
 80004ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d003      	beq.n	80004f8 <EXTI15_10_IRQHandler+0x54>
		EXTI_CALLBACK[EXTI14_LINE]();
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <EXTI15_10_IRQHandler+0x68>)
 80004f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004f4:	4798      	blx	r3
}
 80004f6:	e006      	b.n	8000506 <EXTI15_10_IRQHandler+0x62>
	else if (EXTI_CALLBACK[EXTI15_LINE] != NULL)
 80004f8:	4b04      	ldr	r3, [pc, #16]	; (800050c <EXTI15_10_IRQHandler+0x68>)
 80004fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d002      	beq.n	8000506 <EXTI15_10_IRQHandler+0x62>
		EXTI_CALLBACK[EXTI15_LINE]();
 8000500:	4b02      	ldr	r3, [pc, #8]	; (800050c <EXTI15_10_IRQHandler+0x68>)
 8000502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000504:	4798      	blx	r3
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000024 	.word	0x20000024

08000510 <MGPIO_enSetPinDirection>:
#include "MGPIO_int.h"
#include "MGPIO_config.h"
#include "MGPIO_priv.h"

ErrorState_t MGPIO_enSetPinDirection(PORT_t copy_u8port, PIN_t copy_u8pin, MODE_t copy_u8Mode)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
 800051a:	460b      	mov	r3, r1
 800051c:	71bb      	strb	r3, [r7, #6]
 800051e:	4613      	mov	r3, r2
 8000520:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 8000522:	2302      	movs	r3, #2
 8000524:	73fb      	strb	r3, [r7, #15]
	switch(copy_u8port)
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	2b03      	cmp	r3, #3
 800052a:	d07f      	beq.n	800062c <MGPIO_enSetPinDirection+0x11c>
 800052c:	2b03      	cmp	r3, #3
 800052e:	f300 80b9 	bgt.w	80006a4 <MGPIO_enSetPinDirection+0x194>
 8000532:	2b01      	cmp	r3, #1
 8000534:	d002      	beq.n	800053c <MGPIO_enSetPinDirection+0x2c>
 8000536:	2b02      	cmp	r3, #2
 8000538:	d03c      	beq.n	80005b4 <MGPIO_enSetPinDirection+0xa4>
 800053a:	e0b3      	b.n	80006a4 <MGPIO_enSetPinDirection+0x194>
	{
	case PORTA:
		if (copy_u8pin < GPIO_CRL_MAX)
 800053c:	79bb      	ldrb	r3, [r7, #6]
 800053e:	2b07      	cmp	r3, #7
 8000540:	d817      	bhi.n	8000572 <MGPIO_enSetPinDirection+0x62>
		{
			GPIOA->GPIO_CRL &= ~(GPIO_MASK << (copy_u8pin * GPIO_OFFSET)) ;
 8000542:	4b5d      	ldr	r3, [pc, #372]	; (80006b8 <MGPIO_enSetPinDirection+0x1a8>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	79ba      	ldrb	r2, [r7, #6]
 8000548:	0092      	lsls	r2, r2, #2
 800054a:	210f      	movs	r1, #15
 800054c:	fa01 f202 	lsl.w	r2, r1, r2
 8000550:	43d2      	mvns	r2, r2
 8000552:	4611      	mov	r1, r2
 8000554:	4a58      	ldr	r2, [pc, #352]	; (80006b8 <MGPIO_enSetPinDirection+0x1a8>)
 8000556:	400b      	ands	r3, r1
 8000558:	6013      	str	r3, [r2, #0]
			GPIOA->GPIO_CRL |= copy_u8Mode << (copy_u8pin * GPIO_OFFSET) ;
 800055a:	4b57      	ldr	r3, [pc, #348]	; (80006b8 <MGPIO_enSetPinDirection+0x1a8>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	7979      	ldrb	r1, [r7, #5]
 8000560:	79ba      	ldrb	r2, [r7, #6]
 8000562:	0092      	lsls	r2, r2, #2
 8000564:	fa01 f202 	lsl.w	r2, r1, r2
 8000568:	4611      	mov	r1, r2
 800056a:	4a53      	ldr	r2, [pc, #332]	; (80006b8 <MGPIO_enSetPinDirection+0x1a8>)
 800056c:	430b      	orrs	r3, r1
 800056e:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000570:	e09b      	b.n	80006aa <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < GPIO_CRH_MAX)
 8000572:	79bb      	ldrb	r3, [r7, #6]
 8000574:	2b0f      	cmp	r3, #15
 8000576:	d81a      	bhi.n	80005ae <MGPIO_enSetPinDirection+0x9e>
			copy_u8pin -= GPIO_CRL_MAX  ;
 8000578:	79bb      	ldrb	r3, [r7, #6]
 800057a:	3b08      	subs	r3, #8
 800057c:	71bb      	strb	r3, [r7, #6]
			GPIOA->GPIO_CRH &= ~(GPIO_MASK << (copy_u8pin * GPIO_OFFSET));
 800057e:	4b4e      	ldr	r3, [pc, #312]	; (80006b8 <MGPIO_enSetPinDirection+0x1a8>)
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	79ba      	ldrb	r2, [r7, #6]
 8000584:	0092      	lsls	r2, r2, #2
 8000586:	210f      	movs	r1, #15
 8000588:	fa01 f202 	lsl.w	r2, r1, r2
 800058c:	43d2      	mvns	r2, r2
 800058e:	4611      	mov	r1, r2
 8000590:	4a49      	ldr	r2, [pc, #292]	; (80006b8 <MGPIO_enSetPinDirection+0x1a8>)
 8000592:	400b      	ands	r3, r1
 8000594:	6053      	str	r3, [r2, #4]
			GPIOA->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * GPIO_OFFSET));
 8000596:	4b48      	ldr	r3, [pc, #288]	; (80006b8 <MGPIO_enSetPinDirection+0x1a8>)
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	7979      	ldrb	r1, [r7, #5]
 800059c:	79ba      	ldrb	r2, [r7, #6]
 800059e:	0092      	lsls	r2, r2, #2
 80005a0:	fa01 f202 	lsl.w	r2, r1, r2
 80005a4:	4611      	mov	r1, r2
 80005a6:	4a44      	ldr	r2, [pc, #272]	; (80006b8 <MGPIO_enSetPinDirection+0x1a8>)
 80005a8:	430b      	orrs	r3, r1
 80005aa:	6053      	str	r3, [r2, #4]
		break;
 80005ac:	e07d      	b.n	80006aa <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 80005ae:	2300      	movs	r3, #0
 80005b0:	73fb      	strb	r3, [r7, #15]
		break;
 80005b2:	e07a      	b.n	80006aa <MGPIO_enSetPinDirection+0x19a>

	case PORTB:
		if (copy_u8pin < GPIO_CRL_MAX)
 80005b4:	79bb      	ldrb	r3, [r7, #6]
 80005b6:	2b07      	cmp	r3, #7
 80005b8:	d817      	bhi.n	80005ea <MGPIO_enSetPinDirection+0xda>
		{
			GPIOB->GPIO_CRL &= ~(GPIO_MASK) << (copy_u8pin * GPIO_OFFSET) ;
 80005ba:	4b40      	ldr	r3, [pc, #256]	; (80006bc <MGPIO_enSetPinDirection+0x1ac>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	79ba      	ldrb	r2, [r7, #6]
 80005c0:	0092      	lsls	r2, r2, #2
 80005c2:	f06f 010f 	mvn.w	r1, #15
 80005c6:	fa01 f202 	lsl.w	r2, r1, r2
 80005ca:	4611      	mov	r1, r2
 80005cc:	4a3b      	ldr	r2, [pc, #236]	; (80006bc <MGPIO_enSetPinDirection+0x1ac>)
 80005ce:	400b      	ands	r3, r1
 80005d0:	6013      	str	r3, [r2, #0]
			GPIOB->GPIO_CRL |= (copy_u8Mode << (copy_u8pin * GPIO_OFFSET)) ;
 80005d2:	4b3a      	ldr	r3, [pc, #232]	; (80006bc <MGPIO_enSetPinDirection+0x1ac>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	7979      	ldrb	r1, [r7, #5]
 80005d8:	79ba      	ldrb	r2, [r7, #6]
 80005da:	0092      	lsls	r2, r2, #2
 80005dc:	fa01 f202 	lsl.w	r2, r1, r2
 80005e0:	4611      	mov	r1, r2
 80005e2:	4a36      	ldr	r2, [pc, #216]	; (80006bc <MGPIO_enSetPinDirection+0x1ac>)
 80005e4:	430b      	orrs	r3, r1
 80005e6:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 80005e8:	e05f      	b.n	80006aa <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < GPIO_CRH_MAX)
 80005ea:	79bb      	ldrb	r3, [r7, #6]
 80005ec:	2b0f      	cmp	r3, #15
 80005ee:	d81a      	bhi.n	8000626 <MGPIO_enSetPinDirection+0x116>
			copy_u8pin -= GPIO_CRL_MAX ;
 80005f0:	79bb      	ldrb	r3, [r7, #6]
 80005f2:	3b08      	subs	r3, #8
 80005f4:	71bb      	strb	r3, [r7, #6]
			GPIOB->GPIO_CRH &= ~(GPIO_MASK) << (copy_u8pin * GPIO_OFFSET) ;
 80005f6:	4b31      	ldr	r3, [pc, #196]	; (80006bc <MGPIO_enSetPinDirection+0x1ac>)
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	79ba      	ldrb	r2, [r7, #6]
 80005fc:	0092      	lsls	r2, r2, #2
 80005fe:	f06f 010f 	mvn.w	r1, #15
 8000602:	fa01 f202 	lsl.w	r2, r1, r2
 8000606:	4611      	mov	r1, r2
 8000608:	4a2c      	ldr	r2, [pc, #176]	; (80006bc <MGPIO_enSetPinDirection+0x1ac>)
 800060a:	400b      	ands	r3, r1
 800060c:	6053      	str	r3, [r2, #4]
			GPIOB->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * GPIO_OFFSET)) ;
 800060e:	4b2b      	ldr	r3, [pc, #172]	; (80006bc <MGPIO_enSetPinDirection+0x1ac>)
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	7979      	ldrb	r1, [r7, #5]
 8000614:	79ba      	ldrb	r2, [r7, #6]
 8000616:	0092      	lsls	r2, r2, #2
 8000618:	fa01 f202 	lsl.w	r2, r1, r2
 800061c:	4611      	mov	r1, r2
 800061e:	4a27      	ldr	r2, [pc, #156]	; (80006bc <MGPIO_enSetPinDirection+0x1ac>)
 8000620:	430b      	orrs	r3, r1
 8000622:	6053      	str	r3, [r2, #4]
		break;
 8000624:	e041      	b.n	80006aa <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 8000626:	2300      	movs	r3, #0
 8000628:	73fb      	strb	r3, [r7, #15]
		break;
 800062a:	e03e      	b.n	80006aa <MGPIO_enSetPinDirection+0x19a>

	case PORTC:
		if (copy_u8pin < GPIO_CRL_MAX)
 800062c:	79bb      	ldrb	r3, [r7, #6]
 800062e:	2b07      	cmp	r3, #7
 8000630:	d817      	bhi.n	8000662 <MGPIO_enSetPinDirection+0x152>
		{
			GPIOC->GPIO_CRL &= ~(GPIO_MASK << (copy_u8pin * GPIO_OFFSET)) ;
 8000632:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <MGPIO_enSetPinDirection+0x1b0>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	79ba      	ldrb	r2, [r7, #6]
 8000638:	0092      	lsls	r2, r2, #2
 800063a:	210f      	movs	r1, #15
 800063c:	fa01 f202 	lsl.w	r2, r1, r2
 8000640:	43d2      	mvns	r2, r2
 8000642:	4611      	mov	r1, r2
 8000644:	4a1e      	ldr	r2, [pc, #120]	; (80006c0 <MGPIO_enSetPinDirection+0x1b0>)
 8000646:	400b      	ands	r3, r1
 8000648:	6013      	str	r3, [r2, #0]
			GPIOC->GPIO_CRL |= (copy_u8Mode << (copy_u8pin * GPIO_OFFSET)) ;
 800064a:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <MGPIO_enSetPinDirection+0x1b0>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	7979      	ldrb	r1, [r7, #5]
 8000650:	79ba      	ldrb	r2, [r7, #6]
 8000652:	0092      	lsls	r2, r2, #2
 8000654:	fa01 f202 	lsl.w	r2, r1, r2
 8000658:	4611      	mov	r1, r2
 800065a:	4a19      	ldr	r2, [pc, #100]	; (80006c0 <MGPIO_enSetPinDirection+0x1b0>)
 800065c:	430b      	orrs	r3, r1
 800065e:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000660:	e023      	b.n	80006aa <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < GPIO_CRH_MAX)
 8000662:	79bb      	ldrb	r3, [r7, #6]
 8000664:	2b0f      	cmp	r3, #15
 8000666:	d81a      	bhi.n	800069e <MGPIO_enSetPinDirection+0x18e>
			copy_u8pin -= GPIO_CRL_MAX ;
 8000668:	79bb      	ldrb	r3, [r7, #6]
 800066a:	3b08      	subs	r3, #8
 800066c:	71bb      	strb	r3, [r7, #6]
			GPIOC->GPIO_CRH &= ~(GPIO_MASK) << (copy_u8pin * GPIO_OFFSET) ;
 800066e:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <MGPIO_enSetPinDirection+0x1b0>)
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	79ba      	ldrb	r2, [r7, #6]
 8000674:	0092      	lsls	r2, r2, #2
 8000676:	f06f 010f 	mvn.w	r1, #15
 800067a:	fa01 f202 	lsl.w	r2, r1, r2
 800067e:	4611      	mov	r1, r2
 8000680:	4a0f      	ldr	r2, [pc, #60]	; (80006c0 <MGPIO_enSetPinDirection+0x1b0>)
 8000682:	400b      	ands	r3, r1
 8000684:	6053      	str	r3, [r2, #4]
			GPIOC->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * GPIO_OFFSET)) ;
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MGPIO_enSetPinDirection+0x1b0>)
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	7979      	ldrb	r1, [r7, #5]
 800068c:	79ba      	ldrb	r2, [r7, #6]
 800068e:	0092      	lsls	r2, r2, #2
 8000690:	fa01 f202 	lsl.w	r2, r1, r2
 8000694:	4611      	mov	r1, r2
 8000696:	4a0a      	ldr	r2, [pc, #40]	; (80006c0 <MGPIO_enSetPinDirection+0x1b0>)
 8000698:	430b      	orrs	r3, r1
 800069a:	6053      	str	r3, [r2, #4]
		break;
 800069c:	e005      	b.n	80006aa <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 800069e:	2300      	movs	r3, #0
 80006a0:	73fb      	strb	r3, [r7, #15]
		break;
 80006a2:	e002      	b.n	80006aa <MGPIO_enSetPinDirection+0x19a>

	default:
		local_state = OUT_OF_RANG_ERR;
 80006a4:	2300      	movs	r3, #0
 80006a6:	73fb      	strb	r3, [r7, #15]
		break;
 80006a8:	bf00      	nop
	}
	return local_state;
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40010800 	.word	0x40010800
 80006bc:	40010c00 	.word	0x40010c00
 80006c0:	40011000 	.word	0x40011000

080006c4 <MGPIO_enSetPinValue>:

ErrorState_t MGPIO_enSetPinValue(PORT_t copy_u8port, PIN_t copy_u8pin, VALUE_t copy_u8Value)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
 80006ce:	460b      	mov	r3, r1
 80006d0:	71bb      	strb	r3, [r7, #6]
 80006d2:	4613      	mov	r3, r2
 80006d4:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 80006d6:	2302      	movs	r3, #2
 80006d8:	73fb      	strb	r3, [r7, #15]
	switch(copy_u8port)
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b03      	cmp	r3, #3
 80006de:	d046      	beq.n	800076e <MGPIO_enSetPinValue+0xaa>
 80006e0:	2b03      	cmp	r3, #3
 80006e2:	dc64      	bgt.n	80007ae <MGPIO_enSetPinValue+0xea>
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d002      	beq.n	80006ee <MGPIO_enSetPinValue+0x2a>
 80006e8:	2b02      	cmp	r3, #2
 80006ea:	d020      	beq.n	800072e <MGPIO_enSetPinValue+0x6a>
 80006ec:	e05f      	b.n	80007ae <MGPIO_enSetPinValue+0xea>
	{
	case PORTA:
		if (copy_u8Value == HIGH)
 80006ee:	797b      	ldrb	r3, [r7, #5]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d10a      	bne.n	800070a <MGPIO_enSetPinValue+0x46>
		{
			SET_BIT(GPIOA->GPIO_ODR, copy_u8pin);
 80006f4:	4b32      	ldr	r3, [pc, #200]	; (80007c0 <MGPIO_enSetPinValue+0xfc>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	79ba      	ldrb	r2, [r7, #6]
 80006fa:	2101      	movs	r1, #1
 80006fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000700:	4611      	mov	r1, r2
 8000702:	4a2f      	ldr	r2, [pc, #188]	; (80007c0 <MGPIO_enSetPinValue+0xfc>)
 8000704:	430b      	orrs	r3, r1
 8000706:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000708:	e054      	b.n	80007b4 <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 800070a:	797b      	ldrb	r3, [r7, #5]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d10b      	bne.n	8000728 <MGPIO_enSetPinValue+0x64>
			CLR_BIT(GPIOA->GPIO_ODR, copy_u8pin);
 8000710:	4b2b      	ldr	r3, [pc, #172]	; (80007c0 <MGPIO_enSetPinValue+0xfc>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	79ba      	ldrb	r2, [r7, #6]
 8000716:	2101      	movs	r1, #1
 8000718:	fa01 f202 	lsl.w	r2, r1, r2
 800071c:	43d2      	mvns	r2, r2
 800071e:	4611      	mov	r1, r2
 8000720:	4a27      	ldr	r2, [pc, #156]	; (80007c0 <MGPIO_enSetPinValue+0xfc>)
 8000722:	400b      	ands	r3, r1
 8000724:	60d3      	str	r3, [r2, #12]
		break;
 8000726:	e045      	b.n	80007b4 <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 8000728:	2300      	movs	r3, #0
 800072a:	73fb      	strb	r3, [r7, #15]
		break;
 800072c:	e042      	b.n	80007b4 <MGPIO_enSetPinValue+0xf0>

	case PORTB:
		if (copy_u8Value == HIGH)
 800072e:	797b      	ldrb	r3, [r7, #5]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d10a      	bne.n	800074a <MGPIO_enSetPinValue+0x86>
		{
			SET_BIT(GPIOB->GPIO_ODR, copy_u8pin);
 8000734:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <MGPIO_enSetPinValue+0x100>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	79ba      	ldrb	r2, [r7, #6]
 800073a:	2101      	movs	r1, #1
 800073c:	fa01 f202 	lsl.w	r2, r1, r2
 8000740:	4611      	mov	r1, r2
 8000742:	4a20      	ldr	r2, [pc, #128]	; (80007c4 <MGPIO_enSetPinValue+0x100>)
 8000744:	430b      	orrs	r3, r1
 8000746:	60d3      	str	r3, [r2, #12]
		else
		{
			local_state = OUT_OF_RANG_ERR;

		}
		break;
 8000748:	e034      	b.n	80007b4 <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 800074a:	797b      	ldrb	r3, [r7, #5]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d10b      	bne.n	8000768 <MGPIO_enSetPinValue+0xa4>
			CLR_BIT(GPIOB->GPIO_ODR, copy_u8pin);
 8000750:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <MGPIO_enSetPinValue+0x100>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	79ba      	ldrb	r2, [r7, #6]
 8000756:	2101      	movs	r1, #1
 8000758:	fa01 f202 	lsl.w	r2, r1, r2
 800075c:	43d2      	mvns	r2, r2
 800075e:	4611      	mov	r1, r2
 8000760:	4a18      	ldr	r2, [pc, #96]	; (80007c4 <MGPIO_enSetPinValue+0x100>)
 8000762:	400b      	ands	r3, r1
 8000764:	60d3      	str	r3, [r2, #12]
		break;
 8000766:	e025      	b.n	80007b4 <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 8000768:	2300      	movs	r3, #0
 800076a:	73fb      	strb	r3, [r7, #15]
		break;
 800076c:	e022      	b.n	80007b4 <MGPIO_enSetPinValue+0xf0>

	case PORTC:
		if (copy_u8Value == HIGH)
 800076e:	797b      	ldrb	r3, [r7, #5]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d10a      	bne.n	800078a <MGPIO_enSetPinValue+0xc6>
		{
			SET_BIT(GPIOC->GPIO_ODR, copy_u8pin);
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MGPIO_enSetPinValue+0x104>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	79ba      	ldrb	r2, [r7, #6]
 800077a:	2101      	movs	r1, #1
 800077c:	fa01 f202 	lsl.w	r2, r1, r2
 8000780:	4611      	mov	r1, r2
 8000782:	4a11      	ldr	r2, [pc, #68]	; (80007c8 <MGPIO_enSetPinValue+0x104>)
 8000784:	430b      	orrs	r3, r1
 8000786:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000788:	e014      	b.n	80007b4 <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 800078a:	797b      	ldrb	r3, [r7, #5]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d10b      	bne.n	80007a8 <MGPIO_enSetPinValue+0xe4>
			CLR_BIT(GPIOC->GPIO_ODR, copy_u8pin);
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <MGPIO_enSetPinValue+0x104>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	79ba      	ldrb	r2, [r7, #6]
 8000796:	2101      	movs	r1, #1
 8000798:	fa01 f202 	lsl.w	r2, r1, r2
 800079c:	43d2      	mvns	r2, r2
 800079e:	4611      	mov	r1, r2
 80007a0:	4a09      	ldr	r2, [pc, #36]	; (80007c8 <MGPIO_enSetPinValue+0x104>)
 80007a2:	400b      	ands	r3, r1
 80007a4:	60d3      	str	r3, [r2, #12]
		break;
 80007a6:	e005      	b.n	80007b4 <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 80007a8:	2300      	movs	r3, #0
 80007aa:	73fb      	strb	r3, [r7, #15]
		break;
 80007ac:	e002      	b.n	80007b4 <MGPIO_enSetPinValue+0xf0>

	default:
		local_state = OUT_OF_RANG_ERR;
 80007ae:	2300      	movs	r3, #0
 80007b0:	73fb      	strb	r3, [r7, #15]
		break;
 80007b2:	bf00      	nop
	}
	return local_state;
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	40010800 	.word	0x40010800
 80007c4:	40010c00 	.word	0x40010c00
 80007c8:	40011000 	.word	0x40011000

080007cc <MNVIC_enEnableNVIC>:
#include "MNVIC_int.h"
#include "MNVIC_config.h"
#include "MNVIC_priv.h"

ErrorState_t MNVIC_enEnableNVIC(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
	SCB_AIRCR = NVIC_GROUPSUB_PRI;
 80007d0:	4b03      	ldr	r3, [pc, #12]	; (80007e0 <MNVIC_enEnableNVIC+0x14>)
 80007d2:	4a04      	ldr	r2, [pc, #16]	; (80007e4 <MNVIC_enEnableNVIC+0x18>)
 80007d4:	601a      	str	r2, [r3, #0]

	return SUCCESS;
 80007d6:	2302      	movs	r3, #2
}
 80007d8:	4618      	mov	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	e000ed0c 	.word	0xe000ed0c
 80007e4:	05fa0600 	.word	0x05fa0600

080007e8 <MNVIC_enEnableInt>:


ErrorState_t MNVIC_enEnableInt(VectorTable_t copy_u8IRQnum)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
	ErrorState_t  local_state = SUCCESS;
 80007f2:	2302      	movs	r3, #2
 80007f4:	73fb      	strb	r3, [r7, #15]

	if (copy_u8IRQnum <= 31)
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2b1f      	cmp	r3, #31
 80007fa:	d805      	bhi.n	8000808 <MNVIC_enEnableInt+0x20>
	{
		NVIC->NVIC_ISER[0] = (1<<copy_u8IRQnum);
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	2201      	movs	r2, #1
 8000800:	409a      	lsls	r2, r3
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MNVIC_enEnableInt+0x48>)
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	e00d      	b.n	8000824 <MNVIC_enEnableInt+0x3c>
	}
	else if (copy_u8IRQnum <= 63)
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	2b3f      	cmp	r3, #63	; 0x3f
 800080c:	d808      	bhi.n	8000820 <MNVIC_enEnableInt+0x38>
	{
		copy_u8IRQnum -= 32;
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	3b20      	subs	r3, #32
 8000812:	71fb      	strb	r3, [r7, #7]
		NVIC->NVIC_ISER[1] = (1<<copy_u8IRQnum);
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	2201      	movs	r2, #1
 8000818:	409a      	lsls	r2, r3
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <MNVIC_enEnableInt+0x48>)
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	e001      	b.n	8000824 <MNVIC_enEnableInt+0x3c>
	}
	else
	{
		local_state = OUT_OF_RANG_ERR;
 8000820:	2300      	movs	r3, #0
 8000822:	73fb      	strb	r3, [r7, #15]
	}
	return local_state;
 8000824:	7bfb      	ldrb	r3, [r7, #15]
}
 8000826:	4618      	mov	r0, r3
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	e000e100 	.word	0xe000e100

08000834 <MRCC_enSysClkINIT>:
#include "MRCC_int.h"
#include "MRCC_config.h"
#include "MRCC_priv.h"

ErrorState_t MRCC_enSysClkINIT(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0


	/** CLK source is HSI **/
#elif(RCC_CLK_TYPE == RCC_HSI)
	/* 1. ENABLE the HSI */
	SET_BIT(RCC->RCC_CR, HSION);
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MRCC_enSysClkINIT+0x74>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a1a      	ldr	r2, [pc, #104]	; (80008a8 <MRCC_enSysClkINIT+0x74>)
 800083e:	f043 0301 	orr.w	r3, r3, #1
 8000842:	6013      	str	r3, [r2, #0]

	/* 2. wait till HSE is READY 'settling time finished', stable */
	while (!(GET_BIT(RCC->RCC_CR, HSIRDY)));
 8000844:	bf00      	nop
 8000846:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MRCC_enSysClkINIT+0x74>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	085b      	lsrs	r3, r3, #1
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	2b00      	cmp	r3, #0
 8000852:	d0f8      	beq.n	8000846 <MRCC_enSysClkINIT+0x12>

	/* 3. Enable System switch clock with HSI */
	CLR_BIT(RCC->RCC_CFGR, SWC);
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MRCC_enSysClkINIT+0x74>)
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	4a13      	ldr	r2, [pc, #76]	; (80008a8 <MRCC_enSysClkINIT+0x74>)
 800085a:	f023 0301 	bic.w	r3, r3, #1
 800085e:	6053      	str	r3, [r2, #4]

#else
#error("WRONG CLK TYPE");
#endif
	/* MASK the AHB and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= RCC_AHB_MASK;
 8000860:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MRCC_enSysClkINIT+0x74>)
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	4a10      	ldr	r2, [pc, #64]	; (80008a8 <MRCC_enSysClkINIT+0x74>)
 8000866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800086a:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= RCC_AHB_PRESCALER;
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MRCC_enSysClkINIT+0x74>)
 800086e:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <MRCC_enSysClkINIT+0x74>)
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	6053      	str	r3, [r2, #4]

	/* MASK the APB1 and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= RCC_APB1_MASK;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MRCC_enSysClkINIT+0x74>)
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <MRCC_enSysClkINIT+0x74>)
 800087a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800087e:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= RCC_APB1_PRESCALER_MODE;
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MRCC_enSysClkINIT+0x74>)
 8000882:	4a09      	ldr	r2, [pc, #36]	; (80008a8 <MRCC_enSysClkINIT+0x74>)
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	6053      	str	r3, [r2, #4]

	/* MASK the APB2 and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= RCC_APB2_MASK;
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <MRCC_enSysClkINIT+0x74>)
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	4a06      	ldr	r2, [pc, #24]	; (80008a8 <MRCC_enSysClkINIT+0x74>)
 800088e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000892:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= RCC_APB2_PRESCALER_MODE;
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <MRCC_enSysClkINIT+0x74>)
 8000896:	4a04      	ldr	r2, [pc, #16]	; (80008a8 <MRCC_enSysClkINIT+0x74>)
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	6053      	str	r3, [r2, #4]
		RCC->RCC_CFGR &= RCC_MCO_MASK;
		RCC->RCC_CFGR |= RCC_MCO_MODE ;
	}
#endif

	return SUCCESS;
 800089c:	2302      	movs	r3, #2
}
 800089e:	4618      	mov	r0, r3
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000

080008ac <MRCC_enEnablePeripheralCLK>:

ErrorState_t MRCC_enEnablePeripheralCLK(peripheral_ID copy_u8Peripheral)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
	ErrorState_t local_state = SUCCESS;
 80008b6:	2302      	movs	r3, #2
 80008b8:	73fb      	strb	r3, [r7, #15]

	/* based on predefined Peripheral, switch to corresponding Register, and Enabled it*/
	if (copy_u8Peripheral <= 31)
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	2b1f      	cmp	r3, #31
 80008be:	d80a      	bhi.n	80008d6 <MRCC_enEnablePeripheralCLK+0x2a>
		SET_BIT(RCC->RCC_AHBENR, copy_u8Peripheral);
 80008c0:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MRCC_enEnablePeripheralCLK+0x80>)
 80008c2:	695b      	ldr	r3, [r3, #20]
 80008c4:	79fa      	ldrb	r2, [r7, #7]
 80008c6:	2101      	movs	r1, #1
 80008c8:	fa01 f202 	lsl.w	r2, r1, r2
 80008cc:	4611      	mov	r1, r2
 80008ce:	4a17      	ldr	r2, [pc, #92]	; (800092c <MRCC_enEnablePeripheralCLK+0x80>)
 80008d0:	430b      	orrs	r3, r1
 80008d2:	6153      	str	r3, [r2, #20]
 80008d4:	e023      	b.n	800091e <MRCC_enEnablePeripheralCLK+0x72>

	else if (copy_u8Peripheral <= 63)
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	2b3f      	cmp	r3, #63	; 0x3f
 80008da:	d80d      	bhi.n	80008f8 <MRCC_enEnablePeripheralCLK+0x4c>
	{
		copy_u8Peripheral -= 32;
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	3b20      	subs	r3, #32
 80008e0:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->RCC_APB1ENR, copy_u8Peripheral);
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <MRCC_enEnablePeripheralCLK+0x80>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	79fa      	ldrb	r2, [r7, #7]
 80008e8:	2101      	movs	r1, #1
 80008ea:	fa01 f202 	lsl.w	r2, r1, r2
 80008ee:	4611      	mov	r1, r2
 80008f0:	4a0e      	ldr	r2, [pc, #56]	; (800092c <MRCC_enEnablePeripheralCLK+0x80>)
 80008f2:	430b      	orrs	r3, r1
 80008f4:	61d3      	str	r3, [r2, #28]
 80008f6:	e012      	b.n	800091e <MRCC_enEnablePeripheralCLK+0x72>
	}

	else if (copy_u8Peripheral <= 95)
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	2b5f      	cmp	r3, #95	; 0x5f
 80008fc:	d80d      	bhi.n	800091a <MRCC_enEnablePeripheralCLK+0x6e>
	{
		copy_u8Peripheral -= 64;
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	3b40      	subs	r3, #64	; 0x40
 8000902:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->RCC_APB2ENR, copy_u8Peripheral);
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MRCC_enEnablePeripheralCLK+0x80>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	79fa      	ldrb	r2, [r7, #7]
 800090a:	2101      	movs	r1, #1
 800090c:	fa01 f202 	lsl.w	r2, r1, r2
 8000910:	4611      	mov	r1, r2
 8000912:	4a06      	ldr	r2, [pc, #24]	; (800092c <MRCC_enEnablePeripheralCLK+0x80>)
 8000914:	430b      	orrs	r3, r1
 8000916:	6193      	str	r3, [r2, #24]
 8000918:	e001      	b.n	800091e <MRCC_enEnablePeripheralCLK+0x72>
	}

	else
	{
		local_state = OUT_OF_RANG_ERR;
 800091a:	2300      	movs	r3, #0
 800091c:	73fb      	strb	r3, [r7, #15]
	}
	return local_state;
 800091e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000920:	4618      	mov	r0, r3
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40021000 	.word	0x40021000

08000930 <main>:

PB_ST button1 = {PORTA, PIN0, PULL_UP};
PB_ST button2 = {PORTA, PIN1, PULL_UP};

int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0

	MRCC_enSysClkINIT();
 8000934:	f7ff ff7e 	bl	8000834 <MRCC_enSysClkINIT>
	MRCC_enEnablePeripheralCLK(IOPA);
 8000938:	2042      	movs	r0, #66	; 0x42
 800093a:	f7ff ffb7 	bl	80008ac <MRCC_enEnablePeripheralCLK>
	HLED_enInit(PORTA, PIN3);
 800093e:	2103      	movs	r1, #3
 8000940:	2001      	movs	r0, #1
 8000942:	f7ff fc15 	bl	8000170 <HLED_enInit>
	HPB_enInit(&button1);
 8000946:	4810      	ldr	r0, [pc, #64]	; (8000988 <main+0x58>)
 8000948:	f7ff fc4b 	bl	80001e2 <HPB_enInit>
	HPB_enInit(&button2);
 800094c:	480f      	ldr	r0, [pc, #60]	; (800098c <main+0x5c>)
 800094e:	f7ff fc48 	bl	80001e2 <HPB_enInit>

	MEXTI_enCallBack(EXTI0_LINE, Action1);
 8000952:	490f      	ldr	r1, [pc, #60]	; (8000990 <main+0x60>)
 8000954:	2000      	movs	r0, #0
 8000956:	f7ff fca5 	bl	80002a4 <MEXTI_enCallBack>
	MEXTI_enCallBack(EXTI1_LINE, Action2);
 800095a:	490e      	ldr	r1, [pc, #56]	; (8000994 <main+0x64>)
 800095c:	2001      	movs	r0, #1
 800095e:	f7ff fca1 	bl	80002a4 <MEXTI_enCallBack>
	MNVIC_enEnableNVIC();
 8000962:	f7ff ff33 	bl	80007cc <MNVIC_enEnableNVIC>

	MNVIC_enEnableInt(EXT0_INT);
 8000966:	2006      	movs	r0, #6
 8000968:	f7ff ff3e 	bl	80007e8 <MNVIC_enEnableInt>
	MNVIC_enEnableInt(EXT1_INT);
 800096c:	2007      	movs	r0, #7
 800096e:	f7ff ff3b 	bl	80007e8 <MNVIC_enEnableInt>
	MEXTI_enInit();
 8000972:	f7ff fc61 	bl	8000238 <MEXTI_enInit>
	MEXTI_enEnable(EXTI1_LINE);
 8000976:	2001      	movs	r0, #1
 8000978:	f7ff fc74 	bl	8000264 <MEXTI_enEnable>
	MEXTI_enSetLatch(EXTI1_LINE, EXTI_RISING_TRIG);
 800097c:	2101      	movs	r1, #1
 800097e:	2001      	movs	r0, #1
 8000980:	f7ff fccc 	bl	800031c <MEXTI_enSetLatch>

	while(1)
 8000984:	e7fe      	b.n	8000984 <main+0x54>
 8000986:	bf00      	nop
 8000988:	20000000 	.word	0x20000000
 800098c:	20000004 	.word	0x20000004
 8000990:	08000999 	.word	0x08000999
 8000994:	080009af 	.word	0x080009af

08000998 <Action1>:




void Action1(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	HLED_enSetON(PORTA, PIN3);
 800099c:	2103      	movs	r1, #3
 800099e:	2001      	movs	r0, #1
 80009a0:	f7ff fbf9 	bl	8000196 <HLED_enSetON>
	MEXTI_enClearPendingBit(EXTI0_LINE);
 80009a4:	2000      	movs	r0, #0
 80009a6:	f7ff fc99 	bl	80002dc <MEXTI_enClearPendingBit>
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}

080009ae <Action2>:

void Action2(void)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	af00      	add	r7, sp, #0
	HLED_enSetOFF(PORTA, PIN3);
 80009b2:	2103      	movs	r1, #3
 80009b4:	2001      	movs	r0, #1
 80009b6:	f7ff fc01 	bl	80001bc <HLED_enSetOFF>
	MEXTI_enClearPendingBit(EXTI1_LINE);
 80009ba:	2001      	movs	r0, #1
 80009bc:	f7ff fc8e 	bl	80002dc <MEXTI_enClearPendingBit>
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009c4:	480d      	ldr	r0, [pc, #52]	; (80009fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009c6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009cc:	480c      	ldr	r0, [pc, #48]	; (8000a00 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ce:	490d      	ldr	r1, [pc, #52]	; (8000a04 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009d0:	4a0d      	ldr	r2, [pc, #52]	; (8000a08 <LoopForever+0xe>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d4:	e002      	b.n	80009dc <LoopCopyDataInit>

080009d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009da:	3304      	adds	r3, #4

080009dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e0:	d3f9      	bcc.n	80009d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e2:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <LoopForever+0x12>)
  ldr r4, =_ebss
 80009e4:	4c0a      	ldr	r4, [pc, #40]	; (8000a10 <LoopForever+0x16>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e8:	e001      	b.n	80009ee <LoopFillZerobss>

080009ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ec:	3204      	adds	r2, #4

080009ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f0:	d3fb      	bcc.n	80009ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009f2:	f000 f811 	bl	8000a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009f6:	f7ff ff9b 	bl	8000930 <main>

080009fa <LoopForever>:

LoopForever:
    b LoopForever
 80009fa:	e7fe      	b.n	80009fa <LoopForever>
  ldr   r0, =_estack
 80009fc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a04:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000a08:	08000a80 	.word	0x08000a80
  ldr r2, =_sbss
 8000a0c:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000a10:	20000064 	.word	0x20000064

08000a14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <ADC1_2_IRQHandler>
	...

08000a18 <__libc_init_array>:
 8000a18:	b570      	push	{r4, r5, r6, lr}
 8000a1a:	2600      	movs	r6, #0
 8000a1c:	4d0c      	ldr	r5, [pc, #48]	; (8000a50 <__libc_init_array+0x38>)
 8000a1e:	4c0d      	ldr	r4, [pc, #52]	; (8000a54 <__libc_init_array+0x3c>)
 8000a20:	1b64      	subs	r4, r4, r5
 8000a22:	10a4      	asrs	r4, r4, #2
 8000a24:	42a6      	cmp	r6, r4
 8000a26:	d109      	bne.n	8000a3c <__libc_init_array+0x24>
 8000a28:	f000 f81a 	bl	8000a60 <_init>
 8000a2c:	2600      	movs	r6, #0
 8000a2e:	4d0a      	ldr	r5, [pc, #40]	; (8000a58 <__libc_init_array+0x40>)
 8000a30:	4c0a      	ldr	r4, [pc, #40]	; (8000a5c <__libc_init_array+0x44>)
 8000a32:	1b64      	subs	r4, r4, r5
 8000a34:	10a4      	asrs	r4, r4, #2
 8000a36:	42a6      	cmp	r6, r4
 8000a38:	d105      	bne.n	8000a46 <__libc_init_array+0x2e>
 8000a3a:	bd70      	pop	{r4, r5, r6, pc}
 8000a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a40:	4798      	blx	r3
 8000a42:	3601      	adds	r6, #1
 8000a44:	e7ee      	b.n	8000a24 <__libc_init_array+0xc>
 8000a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a4a:	4798      	blx	r3
 8000a4c:	3601      	adds	r6, #1
 8000a4e:	e7f2      	b.n	8000a36 <__libc_init_array+0x1e>
 8000a50:	08000a78 	.word	0x08000a78
 8000a54:	08000a78 	.word	0x08000a78
 8000a58:	08000a78 	.word	0x08000a78
 8000a5c:	08000a7c 	.word	0x08000a7c

08000a60 <_init>:
 8000a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a62:	bf00      	nop
 8000a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a66:	bc08      	pop	{r3}
 8000a68:	469e      	mov	lr, r3
 8000a6a:	4770      	bx	lr

08000a6c <_fini>:
 8000a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a6e:	bf00      	nop
 8000a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a72:	bc08      	pop	{r3}
 8000a74:	469e      	mov	lr, r3
 8000a76:	4770      	bx	lr
