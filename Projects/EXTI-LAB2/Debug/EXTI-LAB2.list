
EXTI-LAB2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a34  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b64  08000b64  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b64  08000b64  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000b64  08000b64  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b64  08000b64  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b64  08000b64  00010b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b68  08000b68  00010b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  2000000c  08000b78  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000b78  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c19  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000797  00000000  00000000  00021c4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000248  00000000  00000000  000223e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001c0  00000000  00000000  00022630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001127  00000000  00000000  000227f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001892  00000000  00000000  00023917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000047e1  00000000  00000000  000251a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0002998a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006d8  00000000  00000000  000299e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	08000b4c 	.word	0x08000b4c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	08000b4c 	.word	0x08000b4c

08000170 <HLED_enInit>:
#include "HLED_priv.h"
#include "HLED_config.h"


ErrorState_t HLED_enInit(u8 copyu8_LedPort, u8 copyu8_LedPin)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	460a      	mov	r2, r1
 800017a:	71fb      	strb	r3, [r7, #7]
 800017c:	4613      	mov	r3, r2
 800017e:	71bb      	strb	r3, [r7, #6]
	MGPIO_enSetPinDirection(copyu8_LedPort, copyu8_LedPin, OUT_2MHZ_PP);
 8000180:	79b9      	ldrb	r1, [r7, #6]
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	2202      	movs	r2, #2
 8000186:	4618      	mov	r0, r3
 8000188:	f000 fa06 	bl	8000598 <MGPIO_enSetPinDirection>

	return SUCCESS;
 800018c:	2302      	movs	r3, #2
}
 800018e:	4618      	mov	r0, r3
 8000190:	3708      	adds	r7, #8
 8000192:	46bd      	mov	sp, r7
 8000194:	bd80      	pop	{r7, pc}

08000196 <HLED_enSetON>:

ErrorState_t HLED_enSetON(u8 copyu8_LedPort, u8 copyu8_LedPin)
{
 8000196:	b580      	push	{r7, lr}
 8000198:	b082      	sub	sp, #8
 800019a:	af00      	add	r7, sp, #0
 800019c:	4603      	mov	r3, r0
 800019e:	460a      	mov	r2, r1
 80001a0:	71fb      	strb	r3, [r7, #7]
 80001a2:	4613      	mov	r3, r2
 80001a4:	71bb      	strb	r3, [r7, #6]
#if(HLED_DIR == HLED_DIR_FORWARD)
	MGPIO_enSetPinValue(copyu8_LedPort, copyu8_LedPin, HIGH);
 80001a6:	79b9      	ldrb	r1, [r7, #6]
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	2201      	movs	r2, #1
 80001ac:	4618      	mov	r0, r3
 80001ae:	f000 facd 	bl	800074c <MGPIO_enSetPinValue>
	MGPIO_enSetPinValue(copyu8_LedPort, copyu8_LedPin, LOW);
#else
#error ("WRONG LED DIRECTION")
#endif

	return SUCCESS;
 80001b2:	2302      	movs	r3, #2
}
 80001b4:	4618      	mov	r0, r3
 80001b6:	3708      	adds	r7, #8
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}

080001bc <HPB_enInit>:
#include "HPB_priv.h"
#include "HPB_config.h"


ErrorState_t HPB_enInit(PB_ST *ptrPB)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b084      	sub	sp, #16
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
	ErrorState_t Local_state = SUCCESS;
 80001c4:	2302      	movs	r3, #2
 80001c6:	73fb      	strb	r3, [r7, #15]

	if (ptrPB->PB_PORT >= PORTA && ptrPB->PB_PORT <= PORTC)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	781b      	ldrb	r3, [r3, #0]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d018      	beq.n	8000202 <HPB_enInit+0x46>
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	2b03      	cmp	r3, #3
 80001d6:	d814      	bhi.n	8000202 <HPB_enInit+0x46>
	{
		MGPIO_enSetPinDirection(ptrPB->PB_PORT, ptrPB->PB_PIN, IN_PU_PD);
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	7818      	ldrb	r0, [r3, #0]
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	785b      	ldrb	r3, [r3, #1]
 80001e0:	2208      	movs	r2, #8
 80001e2:	4619      	mov	r1, r3
 80001e4:	f000 f9d8 	bl	8000598 <MGPIO_enSetPinDirection>

		/* Activiate Internal PULL-UPS Resistors */
		if(ptrPB->PB_MODE== PULL_UP)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	789b      	ldrb	r3, [r3, #2]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d10a      	bne.n	8000206 <HPB_enInit+0x4a>
			MGPIO_enSetPinValue(ptrPB->PB_PORT, ptrPB->PB_PIN, HIGH);
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	7818      	ldrb	r0, [r3, #0]
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	785b      	ldrb	r3, [r3, #1]
 80001f8:	2201      	movs	r2, #1
 80001fa:	4619      	mov	r1, r3
 80001fc:	f000 faa6 	bl	800074c <MGPIO_enSetPinValue>
		if(ptrPB->PB_MODE== PULL_UP)
 8000200:	e001      	b.n	8000206 <HPB_enInit+0x4a>
	}

	else
	{
		Local_state = OUT_OF_RANG_ERR;
 8000202:	2300      	movs	r3, #0
 8000204:	73fb      	strb	r3, [r7, #15]
	}

	return Local_state;
 8000206:	7bfb      	ldrb	r3, [r7, #15]
}
 8000208:	4618      	mov	r0, r3
 800020a:	3710      	adds	r7, #16
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}

08000210 <MEXTI_enInit>:

void (*EXTI_CALLBACK[16])(void) = {0};


ErrorState_t MEXTI_enInit(void)
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
#if (EXTI_MODE == EXTI_RISING_TRIG)
	SET_BIT(EXTI->EXTI_RTSR,EXTI_LINE);
 8000214:	4b08      	ldr	r3, [pc, #32]	; (8000238 <MEXTI_enInit+0x28>)
 8000216:	689b      	ldr	r3, [r3, #8]
 8000218:	4a07      	ldr	r2, [pc, #28]	; (8000238 <MEXTI_enInit+0x28>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	6093      	str	r3, [r2, #8]

#else
#error("Wrong EXTI MODE!");
#endif

	SET_BIT(EXTI->EXTI_IMR, EXTI_LINE);
 8000220:	4b05      	ldr	r3, [pc, #20]	; (8000238 <MEXTI_enInit+0x28>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a04      	ldr	r2, [pc, #16]	; (8000238 <MEXTI_enInit+0x28>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	6013      	str	r3, [r2, #0]

	return SUCCESS;
 800022c:	2302      	movs	r3, #2
}
 800022e:	4618      	mov	r0, r3
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	40010400 	.word	0x40010400

0800023c <MEXTI_enEnable>:

ErrorState_t MEXTI_enEnable(u8 Copy_u8LineId)
{
 800023c:	b480      	push	{r7}
 800023e:	b085      	sub	sp, #20
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
	ErrorState_t local_state = SUCCESS ;
 8000246:	2302      	movs	r3, #2
 8000248:	73fb      	strb	r3, [r7, #15]

	if (Copy_u8LineId <= 15)
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	2b0f      	cmp	r3, #15
 800024e:	d80a      	bhi.n	8000266 <MEXTI_enEnable+0x2a>
	{
		SET_BIT(EXTI->EXTI_IMR, Copy_u8LineId);
 8000250:	4b09      	ldr	r3, [pc, #36]	; (8000278 <MEXTI_enEnable+0x3c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	79fa      	ldrb	r2, [r7, #7]
 8000256:	2101      	movs	r1, #1
 8000258:	fa01 f202 	lsl.w	r2, r1, r2
 800025c:	4611      	mov	r1, r2
 800025e:	4a06      	ldr	r2, [pc, #24]	; (8000278 <MEXTI_enEnable+0x3c>)
 8000260:	430b      	orrs	r3, r1
 8000262:	6013      	str	r3, [r2, #0]
 8000264:	e001      	b.n	800026a <MEXTI_enEnable+0x2e>
	}
	else
	{
		local_state = OUT_OF_RANG_ERR;
 8000266:	2300      	movs	r3, #0
 8000268:	73fb      	strb	r3, [r7, #15]
	}

	return local_state;
 800026a:	7bfb      	ldrb	r3, [r7, #15]
}
 800026c:	4618      	mov	r0, r3
 800026e:	3714      	adds	r7, #20
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40010400 	.word	0x40010400

0800027c <MEXTI_enCallBack>:

	return local_state;
}

ErrorState_t MEXTI_enCallBack(u8 Copy_u8LineId, void (*ptr) (void))
{
 800027c:	b480      	push	{r7}
 800027e:	b085      	sub	sp, #20
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	6039      	str	r1, [r7, #0]
 8000286:	71fb      	strb	r3, [r7, #7]
	ErrorState_t local_state = SUCCESS ;
 8000288:	2302      	movs	r3, #2
 800028a:	73fb      	strb	r3, [r7, #15]
	if (ptr == NULL)
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d102      	bne.n	8000298 <MEXTI_enCallBack+0x1c>
	{
		local_state = NULL_PTR_ERR;
 8000292:	2301      	movs	r3, #1
 8000294:	73fb      	strb	r3, [r7, #15]
 8000296:	e004      	b.n	80002a2 <MEXTI_enCallBack+0x26>
	}
	else
	{
		EXTI_CALLBACK[Copy_u8LineId] = ptr;
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	4905      	ldr	r1, [pc, #20]	; (80002b0 <MEXTI_enCallBack+0x34>)
 800029c:	683a      	ldr	r2, [r7, #0]
 800029e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	return local_state ;
 80002a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	3714      	adds	r7, #20
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bc80      	pop	{r7}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	20000028 	.word	0x20000028

080002b4 <MEXTI_enClearPendingBit>:

	return local_state;
}

ErrorState_t MEXTI_enClearPendingBit(u8 Copy_u8LineId)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
	ErrorState_t local_state = SUCCESS ;
 80002be:	2302      	movs	r3, #2
 80002c0:	73fb      	strb	r3, [r7, #15]

	if (Copy_u8LineId <= 15)
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	2b0f      	cmp	r3, #15
 80002c6:	d80a      	bhi.n	80002de <MEXTI_enClearPendingBit+0x2a>
	{
		SET_BIT(EXTI->EXTI_PR, Copy_u8LineId);
 80002c8:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <MEXTI_enClearPendingBit+0x3c>)
 80002ca:	695b      	ldr	r3, [r3, #20]
 80002cc:	79fa      	ldrb	r2, [r7, #7]
 80002ce:	2101      	movs	r1, #1
 80002d0:	fa01 f202 	lsl.w	r2, r1, r2
 80002d4:	4611      	mov	r1, r2
 80002d6:	4a06      	ldr	r2, [pc, #24]	; (80002f0 <MEXTI_enClearPendingBit+0x3c>)
 80002d8:	430b      	orrs	r3, r1
 80002da:	6153      	str	r3, [r2, #20]
 80002dc:	e001      	b.n	80002e2 <MEXTI_enClearPendingBit+0x2e>
	}
	else
	{
		local_state = OUT_OF_RANG_ERR;
 80002de:	2300      	movs	r3, #0
 80002e0:	73fb      	strb	r3, [r7, #15]
	}

	return local_state;
 80002e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	3714      	adds	r7, #20
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	40010400 	.word	0x40010400

080002f4 <MEXTI_enSetLatch>:

ErrorState_t MEXTI_enSetLatch(u8 Copy_u8LineId, u8 Copy_u8Mode)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	460a      	mov	r2, r1
 80002fe:	71fb      	strb	r3, [r7, #7]
 8000300:	4613      	mov	r3, r2
 8000302:	71bb      	strb	r3, [r7, #6]
	ErrorState_t local_state = SUCCESS ;
 8000304:	2302      	movs	r3, #2
 8000306:	73fb      	strb	r3, [r7, #15]

	if (Copy_u8LineId <= 15)
 8000308:	79fb      	ldrb	r3, [r7, #7]
 800030a:	2b0f      	cmp	r3, #15
 800030c:	d837      	bhi.n	800037e <MEXTI_enSetLatch+0x8a>
	{
		switch (Copy_u8Mode)
 800030e:	79bb      	ldrb	r3, [r7, #6]
 8000310:	2b03      	cmp	r3, #3
 8000312:	d01c      	beq.n	800034e <MEXTI_enSetLatch+0x5a>
 8000314:	2b03      	cmp	r3, #3
 8000316:	dc2f      	bgt.n	8000378 <MEXTI_enSetLatch+0x84>
 8000318:	2b01      	cmp	r3, #1
 800031a:	d002      	beq.n	8000322 <MEXTI_enSetLatch+0x2e>
 800031c:	2b02      	cmp	r3, #2
 800031e:	d00b      	beq.n	8000338 <MEXTI_enSetLatch+0x44>
 8000320:	e02a      	b.n	8000378 <MEXTI_enSetLatch+0x84>
		{
		case EXTI_RISING_TRIG:
			SET_BIT(EXTI->EXTI_RTSR,Copy_u8LineId);
 8000322:	4b1b      	ldr	r3, [pc, #108]	; (8000390 <MEXTI_enSetLatch+0x9c>)
 8000324:	689b      	ldr	r3, [r3, #8]
 8000326:	79fa      	ldrb	r2, [r7, #7]
 8000328:	2101      	movs	r1, #1
 800032a:	fa01 f202 	lsl.w	r2, r1, r2
 800032e:	4611      	mov	r1, r2
 8000330:	4a17      	ldr	r2, [pc, #92]	; (8000390 <MEXTI_enSetLatch+0x9c>)
 8000332:	430b      	orrs	r3, r1
 8000334:	6093      	str	r3, [r2, #8]
			break;
 8000336:	e024      	b.n	8000382 <MEXTI_enSetLatch+0x8e>

		case EXTI_FAILING_TRIG:
			SET_BIT(EXTI->EXTI_FTSR,Copy_u8LineId);
 8000338:	4b15      	ldr	r3, [pc, #84]	; (8000390 <MEXTI_enSetLatch+0x9c>)
 800033a:	68db      	ldr	r3, [r3, #12]
 800033c:	79fa      	ldrb	r2, [r7, #7]
 800033e:	2101      	movs	r1, #1
 8000340:	fa01 f202 	lsl.w	r2, r1, r2
 8000344:	4611      	mov	r1, r2
 8000346:	4a12      	ldr	r2, [pc, #72]	; (8000390 <MEXTI_enSetLatch+0x9c>)
 8000348:	430b      	orrs	r3, r1
 800034a:	60d3      	str	r3, [r2, #12]
			break;
 800034c:	e019      	b.n	8000382 <MEXTI_enSetLatch+0x8e>

		case EXTI_LOGIC_CHANGE:
			SET_BIT(EXTI->EXTI_RTSR,Copy_u8LineId);
 800034e:	4b10      	ldr	r3, [pc, #64]	; (8000390 <MEXTI_enSetLatch+0x9c>)
 8000350:	689b      	ldr	r3, [r3, #8]
 8000352:	79fa      	ldrb	r2, [r7, #7]
 8000354:	2101      	movs	r1, #1
 8000356:	fa01 f202 	lsl.w	r2, r1, r2
 800035a:	4611      	mov	r1, r2
 800035c:	4a0c      	ldr	r2, [pc, #48]	; (8000390 <MEXTI_enSetLatch+0x9c>)
 800035e:	430b      	orrs	r3, r1
 8000360:	6093      	str	r3, [r2, #8]
			SET_BIT(EXTI->EXTI_FTSR,Copy_u8LineId);
 8000362:	4b0b      	ldr	r3, [pc, #44]	; (8000390 <MEXTI_enSetLatch+0x9c>)
 8000364:	68db      	ldr	r3, [r3, #12]
 8000366:	79fa      	ldrb	r2, [r7, #7]
 8000368:	2101      	movs	r1, #1
 800036a:	fa01 f202 	lsl.w	r2, r1, r2
 800036e:	4611      	mov	r1, r2
 8000370:	4a07      	ldr	r2, [pc, #28]	; (8000390 <MEXTI_enSetLatch+0x9c>)
 8000372:	430b      	orrs	r3, r1
 8000374:	60d3      	str	r3, [r2, #12]
			break;
 8000376:	e004      	b.n	8000382 <MEXTI_enSetLatch+0x8e>

		default:
			local_state = OUT_OF_RANG_ERR;
 8000378:	2300      	movs	r3, #0
 800037a:	73fb      	strb	r3, [r7, #15]
			break;
 800037c:	e001      	b.n	8000382 <MEXTI_enSetLatch+0x8e>
		}
	}
	else
	{
		local_state = OUT_OF_RANG_ERR;
 800037e:	2300      	movs	r3, #0
 8000380:	73fb      	strb	r3, [r7, #15]
	}

	return local_state;
 8000382:	7bfb      	ldrb	r3, [r7, #15]
}
 8000384:	4618      	mov	r0, r3
 8000386:	3714      	adds	r7, #20
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40010400 	.word	0x40010400

08000394 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
	if (EXTI_CALLBACK[EXTI0_LINE] != NULL)
 8000398:	4b04      	ldr	r3, [pc, #16]	; (80003ac <EXTI0_IRQHandler+0x18>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d002      	beq.n	80003a6 <EXTI0_IRQHandler+0x12>
	{
		EXTI_CALLBACK[EXTI0_LINE]();
 80003a0:	4b02      	ldr	r3, [pc, #8]	; (80003ac <EXTI0_IRQHandler+0x18>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4798      	blx	r3
	}

}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	20000028 	.word	0x20000028

080003b0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	if (EXTI_CALLBACK[EXTI1_LINE] != NULL)
 80003b4:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <EXTI1_IRQHandler+0x18>)
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d002      	beq.n	80003c2 <EXTI1_IRQHandler+0x12>
	{
		EXTI_CALLBACK[EXTI1_LINE]();
 80003bc:	4b02      	ldr	r3, [pc, #8]	; (80003c8 <EXTI1_IRQHandler+0x18>)
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4798      	blx	r3
	}

}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000028 	.word	0x20000028

080003cc <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	if (EXTI_CALLBACK[EXTI2_LINE] != NULL)
 80003d0:	4b04      	ldr	r3, [pc, #16]	; (80003e4 <EXTI2_IRQHandler+0x18>)
 80003d2:	689b      	ldr	r3, [r3, #8]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d002      	beq.n	80003de <EXTI2_IRQHandler+0x12>
	{
		EXTI_CALLBACK[EXTI2_LINE]();
 80003d8:	4b02      	ldr	r3, [pc, #8]	; (80003e4 <EXTI2_IRQHandler+0x18>)
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	4798      	blx	r3
	}
}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	20000028 	.word	0x20000028

080003e8 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	if (EXTI_CALLBACK[EXTI3_LINE] != NULL)
 80003ec:	4b04      	ldr	r3, [pc, #16]	; (8000400 <EXTI3_IRQHandler+0x18>)
 80003ee:	68db      	ldr	r3, [r3, #12]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d002      	beq.n	80003fa <EXTI3_IRQHandler+0x12>
	{
		EXTI_CALLBACK[EXTI3_LINE]();
 80003f4:	4b02      	ldr	r3, [pc, #8]	; (8000400 <EXTI3_IRQHandler+0x18>)
 80003f6:	68db      	ldr	r3, [r3, #12]
 80003f8:	4798      	blx	r3
	}
}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000028 	.word	0x20000028

08000404 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	if (EXTI_CALLBACK[EXTI4_LINE] != NULL)
 8000408:	4b04      	ldr	r3, [pc, #16]	; (800041c <EXTI4_IRQHandler+0x18>)
 800040a:	691b      	ldr	r3, [r3, #16]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d002      	beq.n	8000416 <EXTI4_IRQHandler+0x12>
	{
		EXTI_CALLBACK[EXTI4_LINE]();
 8000410:	4b02      	ldr	r3, [pc, #8]	; (800041c <EXTI4_IRQHandler+0x18>)
 8000412:	691b      	ldr	r3, [r3, #16]
 8000414:	4798      	blx	r3
	}
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	20000028 	.word	0x20000028

08000420 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	if (EXTI_CALLBACK[EXTI5_LINE] != NULL)
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <EXTI9_5_IRQHandler+0x58>)
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d003      	beq.n	8000434 <EXTI9_5_IRQHandler+0x14>
	{
		EXTI_CALLBACK[EXTI5_LINE]();
 800042c:	4b12      	ldr	r3, [pc, #72]	; (8000478 <EXTI9_5_IRQHandler+0x58>)
 800042e:	695b      	ldr	r3, [r3, #20]
 8000430:	4798      	blx	r3
	else if (EXTI_CALLBACK[EXTI9_LINE] != NULL)
	{
		EXTI_CALLBACK[EXTI9_LINE]();

	}
}
 8000432:	e01e      	b.n	8000472 <EXTI9_5_IRQHandler+0x52>
	else if (EXTI_CALLBACK[EXTI6_LINE] != NULL)
 8000434:	4b10      	ldr	r3, [pc, #64]	; (8000478 <EXTI9_5_IRQHandler+0x58>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d003      	beq.n	8000444 <EXTI9_5_IRQHandler+0x24>
		EXTI_CALLBACK[EXTI6_LINE]();
 800043c:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <EXTI9_5_IRQHandler+0x58>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4798      	blx	r3
}
 8000442:	e016      	b.n	8000472 <EXTI9_5_IRQHandler+0x52>
	else if (EXTI_CALLBACK[EXTI7_LINE] != NULL)
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <EXTI9_5_IRQHandler+0x58>)
 8000446:	69db      	ldr	r3, [r3, #28]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d003      	beq.n	8000454 <EXTI9_5_IRQHandler+0x34>
		EXTI_CALLBACK[EXTI7_LINE]();
 800044c:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <EXTI9_5_IRQHandler+0x58>)
 800044e:	69db      	ldr	r3, [r3, #28]
 8000450:	4798      	blx	r3
}
 8000452:	e00e      	b.n	8000472 <EXTI9_5_IRQHandler+0x52>
	else if (EXTI_CALLBACK[EXTI8_LINE] != NULL)
 8000454:	4b08      	ldr	r3, [pc, #32]	; (8000478 <EXTI9_5_IRQHandler+0x58>)
 8000456:	6a1b      	ldr	r3, [r3, #32]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d003      	beq.n	8000464 <EXTI9_5_IRQHandler+0x44>
		EXTI_CALLBACK[EXTI8_LINE]();
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <EXTI9_5_IRQHandler+0x58>)
 800045e:	6a1b      	ldr	r3, [r3, #32]
 8000460:	4798      	blx	r3
}
 8000462:	e006      	b.n	8000472 <EXTI9_5_IRQHandler+0x52>
	else if (EXTI_CALLBACK[EXTI9_LINE] != NULL)
 8000464:	4b04      	ldr	r3, [pc, #16]	; (8000478 <EXTI9_5_IRQHandler+0x58>)
 8000466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000468:	2b00      	cmp	r3, #0
 800046a:	d002      	beq.n	8000472 <EXTI9_5_IRQHandler+0x52>
		EXTI_CALLBACK[EXTI9_LINE]();
 800046c:	4b02      	ldr	r3, [pc, #8]	; (8000478 <EXTI9_5_IRQHandler+0x58>)
 800046e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000470:	4798      	blx	r3
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	20000028 	.word	0x20000028

0800047c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	if (EXTI_CALLBACK[EXTI10_LINE] != NULL)
 8000480:	4b18      	ldr	r3, [pc, #96]	; (80004e4 <EXTI15_10_IRQHandler+0x68>)
 8000482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000484:	2b00      	cmp	r3, #0
 8000486:	d003      	beq.n	8000490 <EXTI15_10_IRQHandler+0x14>
	{
		EXTI_CALLBACK[EXTI10_LINE]();
 8000488:	4b16      	ldr	r3, [pc, #88]	; (80004e4 <EXTI15_10_IRQHandler+0x68>)
 800048a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800048c:	4798      	blx	r3
	else if (EXTI_CALLBACK[EXTI15_LINE] != NULL)
	{
		EXTI_CALLBACK[EXTI15_LINE]();

	}
}
 800048e:	e026      	b.n	80004de <EXTI15_10_IRQHandler+0x62>
	else if (EXTI_CALLBACK[EXTI11_LINE] != NULL)
 8000490:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <EXTI15_10_IRQHandler+0x68>)
 8000492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000494:	2b00      	cmp	r3, #0
 8000496:	d003      	beq.n	80004a0 <EXTI15_10_IRQHandler+0x24>
		EXTI_CALLBACK[EXTI11_LINE]();
 8000498:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <EXTI15_10_IRQHandler+0x68>)
 800049a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800049c:	4798      	blx	r3
}
 800049e:	e01e      	b.n	80004de <EXTI15_10_IRQHandler+0x62>
	else if (EXTI_CALLBACK[EXTI12_LINE] != NULL)
 80004a0:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <EXTI15_10_IRQHandler+0x68>)
 80004a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d003      	beq.n	80004b0 <EXTI15_10_IRQHandler+0x34>
		EXTI_CALLBACK[EXTI12_LINE]();
 80004a8:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <EXTI15_10_IRQHandler+0x68>)
 80004aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ac:	4798      	blx	r3
}
 80004ae:	e016      	b.n	80004de <EXTI15_10_IRQHandler+0x62>
	else if (EXTI_CALLBACK[EXTI13_LINE] != NULL)
 80004b0:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <EXTI15_10_IRQHandler+0x68>)
 80004b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d003      	beq.n	80004c0 <EXTI15_10_IRQHandler+0x44>
		EXTI_CALLBACK[EXTI13_LINE]();
 80004b8:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <EXTI15_10_IRQHandler+0x68>)
 80004ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004bc:	4798      	blx	r3
}
 80004be:	e00e      	b.n	80004de <EXTI15_10_IRQHandler+0x62>
	else if (EXTI_CALLBACK[EXTI14_LINE] != NULL)
 80004c0:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <EXTI15_10_IRQHandler+0x68>)
 80004c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d003      	beq.n	80004d0 <EXTI15_10_IRQHandler+0x54>
		EXTI_CALLBACK[EXTI14_LINE]();
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <EXTI15_10_IRQHandler+0x68>)
 80004ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004cc:	4798      	blx	r3
}
 80004ce:	e006      	b.n	80004de <EXTI15_10_IRQHandler+0x62>
	else if (EXTI_CALLBACK[EXTI15_LINE] != NULL)
 80004d0:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <EXTI15_10_IRQHandler+0x68>)
 80004d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d002      	beq.n	80004de <EXTI15_10_IRQHandler+0x62>
		EXTI_CALLBACK[EXTI15_LINE]();
 80004d8:	4b02      	ldr	r3, [pc, #8]	; (80004e4 <EXTI15_10_IRQHandler+0x68>)
 80004da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004dc:	4798      	blx	r3
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20000028 	.word	0x20000028

080004e8 <MAFIO_enSetEXTIConfig>:
#include "MAFIO_int.h"
#include "MAFIO_config.h"
#include "MAFIO_priv.h"

ErrorState_t MAFIO_enSetEXTIConfig(u8 copy_u8EXTILineId, AFIOEXTI_t copy_u8PortMap)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	460a      	mov	r2, r1
 80004f2:	71fb      	strb	r3, [r7, #7]
 80004f4:	4613      	mov	r3, r2
 80004f6:	71bb      	strb	r3, [r7, #6]
	ErrorState_t local_state ;

	u8 local_u8RegIndex = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	73bb      	strb	r3, [r7, #14]
	if (copy_u8EXTILineId <= 3)
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	2b03      	cmp	r3, #3
 8000500:	d802      	bhi.n	8000508 <MAFIO_enSetEXTIConfig+0x20>
	{
		local_u8RegIndex = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	73bb      	strb	r3, [r7, #14]
 8000506:	e01c      	b.n	8000542 <MAFIO_enSetEXTIConfig+0x5a>
	}
	else if (copy_u8EXTILineId <= 7)
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	2b07      	cmp	r3, #7
 800050c:	d805      	bhi.n	800051a <MAFIO_enSetEXTIConfig+0x32>
	{
		local_u8RegIndex = 1;
 800050e:	2301      	movs	r3, #1
 8000510:	73bb      	strb	r3, [r7, #14]
		copy_u8EXTILineId -= 4;
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	3b04      	subs	r3, #4
 8000516:	71fb      	strb	r3, [r7, #7]
 8000518:	e013      	b.n	8000542 <MAFIO_enSetEXTIConfig+0x5a>
	}
	else if (copy_u8EXTILineId <= 11)
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	2b0b      	cmp	r3, #11
 800051e:	d805      	bhi.n	800052c <MAFIO_enSetEXTIConfig+0x44>
	{
		local_u8RegIndex = 2;
 8000520:	2302      	movs	r3, #2
 8000522:	73bb      	strb	r3, [r7, #14]
		copy_u8EXTILineId -= 8;
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	3b08      	subs	r3, #8
 8000528:	71fb      	strb	r3, [r7, #7]
 800052a:	e00a      	b.n	8000542 <MAFIO_enSetEXTIConfig+0x5a>
	}
	else if (copy_u8EXTILineId <= 15)
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	2b0f      	cmp	r3, #15
 8000530:	d805      	bhi.n	800053e <MAFIO_enSetEXTIConfig+0x56>
	{
		local_u8RegIndex = 3;
 8000532:	2303      	movs	r3, #3
 8000534:	73bb      	strb	r3, [r7, #14]
		copy_u8EXTILineId -= 12;
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	3b0c      	subs	r3, #12
 800053a:	71fb      	strb	r3, [r7, #7]
 800053c:	e001      	b.n	8000542 <MAFIO_enSetEXTIConfig+0x5a>
	}
	else
	{
		local_state = OUT_OF_RANG_ERR;
 800053e:	2300      	movs	r3, #0
 8000540:	73fb      	strb	r3, [r7, #15]
	}

	AFIO->AFIO_EXTICR[local_u8RegIndex] &= ~((0xF) <<(copy_u8EXTILineId*4));
 8000542:	4a14      	ldr	r2, [pc, #80]	; (8000594 <MAFIO_enSetEXTIConfig+0xac>)
 8000544:	7bbb      	ldrb	r3, [r7, #14]
 8000546:	3302      	adds	r3, #2
 8000548:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	009b      	lsls	r3, r3, #2
 8000550:	210f      	movs	r1, #15
 8000552:	fa01 f303 	lsl.w	r3, r1, r3
 8000556:	43db      	mvns	r3, r3
 8000558:	4618      	mov	r0, r3
 800055a:	490e      	ldr	r1, [pc, #56]	; (8000594 <MAFIO_enSetEXTIConfig+0xac>)
 800055c:	7bbb      	ldrb	r3, [r7, #14]
 800055e:	4002      	ands	r2, r0
 8000560:	3302      	adds	r3, #2
 8000562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->AFIO_EXTICR[local_u8RegIndex] |=  (copy_u8PortMap << (copy_u8EXTILineId * 4));
 8000566:	4a0b      	ldr	r2, [pc, #44]	; (8000594 <MAFIO_enSetEXTIConfig+0xac>)
 8000568:	7bbb      	ldrb	r3, [r7, #14]
 800056a:	3302      	adds	r3, #2
 800056c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000570:	79b9      	ldrb	r1, [r7, #6]
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	fa01 f303 	lsl.w	r3, r1, r3
 800057a:	4618      	mov	r0, r3
 800057c:	4905      	ldr	r1, [pc, #20]	; (8000594 <MAFIO_enSetEXTIConfig+0xac>)
 800057e:	7bbb      	ldrb	r3, [r7, #14]
 8000580:	4302      	orrs	r2, r0
 8000582:	3302      	adds	r3, #2
 8000584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return local_state;
 8000588:	7bfb      	ldrb	r3, [r7, #15]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	40010000 	.word	0x40010000

08000598 <MGPIO_enSetPinDirection>:
#include "MGPIO_int.h"
#include "MGPIO_config.h"
#include "MGPIO_priv.h"

ErrorState_t MGPIO_enSetPinDirection(PORT_t copy_u8port, PIN_t copy_u8pin, MODE_t copy_u8Mode)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
 80005a2:	460b      	mov	r3, r1
 80005a4:	71bb      	strb	r3, [r7, #6]
 80005a6:	4613      	mov	r3, r2
 80005a8:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 80005aa:	2302      	movs	r3, #2
 80005ac:	73fb      	strb	r3, [r7, #15]
	switch(copy_u8port)
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	d07f      	beq.n	80006b4 <MGPIO_enSetPinDirection+0x11c>
 80005b4:	2b03      	cmp	r3, #3
 80005b6:	f300 80b9 	bgt.w	800072c <MGPIO_enSetPinDirection+0x194>
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d002      	beq.n	80005c4 <MGPIO_enSetPinDirection+0x2c>
 80005be:	2b02      	cmp	r3, #2
 80005c0:	d03c      	beq.n	800063c <MGPIO_enSetPinDirection+0xa4>
 80005c2:	e0b3      	b.n	800072c <MGPIO_enSetPinDirection+0x194>
	{
	case PORTA:
		if (copy_u8pin < GPIO_CRL_MAX)
 80005c4:	79bb      	ldrb	r3, [r7, #6]
 80005c6:	2b07      	cmp	r3, #7
 80005c8:	d817      	bhi.n	80005fa <MGPIO_enSetPinDirection+0x62>
		{
			GPIOA->GPIO_CRL &= ~(GPIO_MASK << (copy_u8pin * GPIO_OFFSET)) ;
 80005ca:	4b5d      	ldr	r3, [pc, #372]	; (8000740 <MGPIO_enSetPinDirection+0x1a8>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	79ba      	ldrb	r2, [r7, #6]
 80005d0:	0092      	lsls	r2, r2, #2
 80005d2:	210f      	movs	r1, #15
 80005d4:	fa01 f202 	lsl.w	r2, r1, r2
 80005d8:	43d2      	mvns	r2, r2
 80005da:	4611      	mov	r1, r2
 80005dc:	4a58      	ldr	r2, [pc, #352]	; (8000740 <MGPIO_enSetPinDirection+0x1a8>)
 80005de:	400b      	ands	r3, r1
 80005e0:	6013      	str	r3, [r2, #0]
			GPIOA->GPIO_CRL |= copy_u8Mode << (copy_u8pin * GPIO_OFFSET) ;
 80005e2:	4b57      	ldr	r3, [pc, #348]	; (8000740 <MGPIO_enSetPinDirection+0x1a8>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	7979      	ldrb	r1, [r7, #5]
 80005e8:	79ba      	ldrb	r2, [r7, #6]
 80005ea:	0092      	lsls	r2, r2, #2
 80005ec:	fa01 f202 	lsl.w	r2, r1, r2
 80005f0:	4611      	mov	r1, r2
 80005f2:	4a53      	ldr	r2, [pc, #332]	; (8000740 <MGPIO_enSetPinDirection+0x1a8>)
 80005f4:	430b      	orrs	r3, r1
 80005f6:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 80005f8:	e09b      	b.n	8000732 <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < GPIO_CRH_MAX)
 80005fa:	79bb      	ldrb	r3, [r7, #6]
 80005fc:	2b0f      	cmp	r3, #15
 80005fe:	d81a      	bhi.n	8000636 <MGPIO_enSetPinDirection+0x9e>
			copy_u8pin -= GPIO_CRL_MAX  ;
 8000600:	79bb      	ldrb	r3, [r7, #6]
 8000602:	3b08      	subs	r3, #8
 8000604:	71bb      	strb	r3, [r7, #6]
			GPIOA->GPIO_CRH &= ~(GPIO_MASK << (copy_u8pin * GPIO_OFFSET));
 8000606:	4b4e      	ldr	r3, [pc, #312]	; (8000740 <MGPIO_enSetPinDirection+0x1a8>)
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	79ba      	ldrb	r2, [r7, #6]
 800060c:	0092      	lsls	r2, r2, #2
 800060e:	210f      	movs	r1, #15
 8000610:	fa01 f202 	lsl.w	r2, r1, r2
 8000614:	43d2      	mvns	r2, r2
 8000616:	4611      	mov	r1, r2
 8000618:	4a49      	ldr	r2, [pc, #292]	; (8000740 <MGPIO_enSetPinDirection+0x1a8>)
 800061a:	400b      	ands	r3, r1
 800061c:	6053      	str	r3, [r2, #4]
			GPIOA->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * GPIO_OFFSET));
 800061e:	4b48      	ldr	r3, [pc, #288]	; (8000740 <MGPIO_enSetPinDirection+0x1a8>)
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	7979      	ldrb	r1, [r7, #5]
 8000624:	79ba      	ldrb	r2, [r7, #6]
 8000626:	0092      	lsls	r2, r2, #2
 8000628:	fa01 f202 	lsl.w	r2, r1, r2
 800062c:	4611      	mov	r1, r2
 800062e:	4a44      	ldr	r2, [pc, #272]	; (8000740 <MGPIO_enSetPinDirection+0x1a8>)
 8000630:	430b      	orrs	r3, r1
 8000632:	6053      	str	r3, [r2, #4]
		break;
 8000634:	e07d      	b.n	8000732 <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 8000636:	2300      	movs	r3, #0
 8000638:	73fb      	strb	r3, [r7, #15]
		break;
 800063a:	e07a      	b.n	8000732 <MGPIO_enSetPinDirection+0x19a>

	case PORTB:
		if (copy_u8pin < GPIO_CRL_MAX)
 800063c:	79bb      	ldrb	r3, [r7, #6]
 800063e:	2b07      	cmp	r3, #7
 8000640:	d817      	bhi.n	8000672 <MGPIO_enSetPinDirection+0xda>
		{
			GPIOB->GPIO_CRL &= ~(GPIO_MASK) << (copy_u8pin * GPIO_OFFSET) ;
 8000642:	4b40      	ldr	r3, [pc, #256]	; (8000744 <MGPIO_enSetPinDirection+0x1ac>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	79ba      	ldrb	r2, [r7, #6]
 8000648:	0092      	lsls	r2, r2, #2
 800064a:	f06f 010f 	mvn.w	r1, #15
 800064e:	fa01 f202 	lsl.w	r2, r1, r2
 8000652:	4611      	mov	r1, r2
 8000654:	4a3b      	ldr	r2, [pc, #236]	; (8000744 <MGPIO_enSetPinDirection+0x1ac>)
 8000656:	400b      	ands	r3, r1
 8000658:	6013      	str	r3, [r2, #0]
			GPIOB->GPIO_CRL |= (copy_u8Mode << (copy_u8pin * GPIO_OFFSET)) ;
 800065a:	4b3a      	ldr	r3, [pc, #232]	; (8000744 <MGPIO_enSetPinDirection+0x1ac>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	7979      	ldrb	r1, [r7, #5]
 8000660:	79ba      	ldrb	r2, [r7, #6]
 8000662:	0092      	lsls	r2, r2, #2
 8000664:	fa01 f202 	lsl.w	r2, r1, r2
 8000668:	4611      	mov	r1, r2
 800066a:	4a36      	ldr	r2, [pc, #216]	; (8000744 <MGPIO_enSetPinDirection+0x1ac>)
 800066c:	430b      	orrs	r3, r1
 800066e:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000670:	e05f      	b.n	8000732 <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < GPIO_CRH_MAX)
 8000672:	79bb      	ldrb	r3, [r7, #6]
 8000674:	2b0f      	cmp	r3, #15
 8000676:	d81a      	bhi.n	80006ae <MGPIO_enSetPinDirection+0x116>
			copy_u8pin -= GPIO_CRL_MAX ;
 8000678:	79bb      	ldrb	r3, [r7, #6]
 800067a:	3b08      	subs	r3, #8
 800067c:	71bb      	strb	r3, [r7, #6]
			GPIOB->GPIO_CRH &= ~(GPIO_MASK) << (copy_u8pin * GPIO_OFFSET) ;
 800067e:	4b31      	ldr	r3, [pc, #196]	; (8000744 <MGPIO_enSetPinDirection+0x1ac>)
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	79ba      	ldrb	r2, [r7, #6]
 8000684:	0092      	lsls	r2, r2, #2
 8000686:	f06f 010f 	mvn.w	r1, #15
 800068a:	fa01 f202 	lsl.w	r2, r1, r2
 800068e:	4611      	mov	r1, r2
 8000690:	4a2c      	ldr	r2, [pc, #176]	; (8000744 <MGPIO_enSetPinDirection+0x1ac>)
 8000692:	400b      	ands	r3, r1
 8000694:	6053      	str	r3, [r2, #4]
			GPIOB->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * GPIO_OFFSET)) ;
 8000696:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <MGPIO_enSetPinDirection+0x1ac>)
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	7979      	ldrb	r1, [r7, #5]
 800069c:	79ba      	ldrb	r2, [r7, #6]
 800069e:	0092      	lsls	r2, r2, #2
 80006a0:	fa01 f202 	lsl.w	r2, r1, r2
 80006a4:	4611      	mov	r1, r2
 80006a6:	4a27      	ldr	r2, [pc, #156]	; (8000744 <MGPIO_enSetPinDirection+0x1ac>)
 80006a8:	430b      	orrs	r3, r1
 80006aa:	6053      	str	r3, [r2, #4]
		break;
 80006ac:	e041      	b.n	8000732 <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 80006ae:	2300      	movs	r3, #0
 80006b0:	73fb      	strb	r3, [r7, #15]
		break;
 80006b2:	e03e      	b.n	8000732 <MGPIO_enSetPinDirection+0x19a>

	case PORTC:
		if (copy_u8pin < GPIO_CRL_MAX)
 80006b4:	79bb      	ldrb	r3, [r7, #6]
 80006b6:	2b07      	cmp	r3, #7
 80006b8:	d817      	bhi.n	80006ea <MGPIO_enSetPinDirection+0x152>
		{
			GPIOC->GPIO_CRL &= ~(GPIO_MASK << (copy_u8pin * GPIO_OFFSET)) ;
 80006ba:	4b23      	ldr	r3, [pc, #140]	; (8000748 <MGPIO_enSetPinDirection+0x1b0>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	79ba      	ldrb	r2, [r7, #6]
 80006c0:	0092      	lsls	r2, r2, #2
 80006c2:	210f      	movs	r1, #15
 80006c4:	fa01 f202 	lsl.w	r2, r1, r2
 80006c8:	43d2      	mvns	r2, r2
 80006ca:	4611      	mov	r1, r2
 80006cc:	4a1e      	ldr	r2, [pc, #120]	; (8000748 <MGPIO_enSetPinDirection+0x1b0>)
 80006ce:	400b      	ands	r3, r1
 80006d0:	6013      	str	r3, [r2, #0]
			GPIOC->GPIO_CRL |= (copy_u8Mode << (copy_u8pin * GPIO_OFFSET)) ;
 80006d2:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <MGPIO_enSetPinDirection+0x1b0>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	7979      	ldrb	r1, [r7, #5]
 80006d8:	79ba      	ldrb	r2, [r7, #6]
 80006da:	0092      	lsls	r2, r2, #2
 80006dc:	fa01 f202 	lsl.w	r2, r1, r2
 80006e0:	4611      	mov	r1, r2
 80006e2:	4a19      	ldr	r2, [pc, #100]	; (8000748 <MGPIO_enSetPinDirection+0x1b0>)
 80006e4:	430b      	orrs	r3, r1
 80006e6:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 80006e8:	e023      	b.n	8000732 <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < GPIO_CRH_MAX)
 80006ea:	79bb      	ldrb	r3, [r7, #6]
 80006ec:	2b0f      	cmp	r3, #15
 80006ee:	d81a      	bhi.n	8000726 <MGPIO_enSetPinDirection+0x18e>
			copy_u8pin -= GPIO_CRL_MAX ;
 80006f0:	79bb      	ldrb	r3, [r7, #6]
 80006f2:	3b08      	subs	r3, #8
 80006f4:	71bb      	strb	r3, [r7, #6]
			GPIOC->GPIO_CRH &= ~(GPIO_MASK) << (copy_u8pin * GPIO_OFFSET) ;
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MGPIO_enSetPinDirection+0x1b0>)
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	79ba      	ldrb	r2, [r7, #6]
 80006fc:	0092      	lsls	r2, r2, #2
 80006fe:	f06f 010f 	mvn.w	r1, #15
 8000702:	fa01 f202 	lsl.w	r2, r1, r2
 8000706:	4611      	mov	r1, r2
 8000708:	4a0f      	ldr	r2, [pc, #60]	; (8000748 <MGPIO_enSetPinDirection+0x1b0>)
 800070a:	400b      	ands	r3, r1
 800070c:	6053      	str	r3, [r2, #4]
			GPIOC->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * GPIO_OFFSET)) ;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MGPIO_enSetPinDirection+0x1b0>)
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	7979      	ldrb	r1, [r7, #5]
 8000714:	79ba      	ldrb	r2, [r7, #6]
 8000716:	0092      	lsls	r2, r2, #2
 8000718:	fa01 f202 	lsl.w	r2, r1, r2
 800071c:	4611      	mov	r1, r2
 800071e:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <MGPIO_enSetPinDirection+0x1b0>)
 8000720:	430b      	orrs	r3, r1
 8000722:	6053      	str	r3, [r2, #4]
		break;
 8000724:	e005      	b.n	8000732 <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 8000726:	2300      	movs	r3, #0
 8000728:	73fb      	strb	r3, [r7, #15]
		break;
 800072a:	e002      	b.n	8000732 <MGPIO_enSetPinDirection+0x19a>

	default:
		local_state = OUT_OF_RANG_ERR;
 800072c:	2300      	movs	r3, #0
 800072e:	73fb      	strb	r3, [r7, #15]
		break;
 8000730:	bf00      	nop
	}
	return local_state;
 8000732:	7bfb      	ldrb	r3, [r7, #15]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	40010800 	.word	0x40010800
 8000744:	40010c00 	.word	0x40010c00
 8000748:	40011000 	.word	0x40011000

0800074c <MGPIO_enSetPinValue>:

ErrorState_t MGPIO_enSetPinValue(PORT_t copy_u8port, PIN_t copy_u8pin, VALUE_t copy_u8Value)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
 8000756:	460b      	mov	r3, r1
 8000758:	71bb      	strb	r3, [r7, #6]
 800075a:	4613      	mov	r3, r2
 800075c:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 800075e:	2302      	movs	r3, #2
 8000760:	73fb      	strb	r3, [r7, #15]
	switch(copy_u8port)
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	2b03      	cmp	r3, #3
 8000766:	d046      	beq.n	80007f6 <MGPIO_enSetPinValue+0xaa>
 8000768:	2b03      	cmp	r3, #3
 800076a:	dc64      	bgt.n	8000836 <MGPIO_enSetPinValue+0xea>
 800076c:	2b01      	cmp	r3, #1
 800076e:	d002      	beq.n	8000776 <MGPIO_enSetPinValue+0x2a>
 8000770:	2b02      	cmp	r3, #2
 8000772:	d020      	beq.n	80007b6 <MGPIO_enSetPinValue+0x6a>
 8000774:	e05f      	b.n	8000836 <MGPIO_enSetPinValue+0xea>
	{
	case PORTA:
		if (copy_u8Value == HIGH)
 8000776:	797b      	ldrb	r3, [r7, #5]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d10a      	bne.n	8000792 <MGPIO_enSetPinValue+0x46>
		{
			SET_BIT(GPIOA->GPIO_ODR, copy_u8pin);
 800077c:	4b32      	ldr	r3, [pc, #200]	; (8000848 <MGPIO_enSetPinValue+0xfc>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	79ba      	ldrb	r2, [r7, #6]
 8000782:	2101      	movs	r1, #1
 8000784:	fa01 f202 	lsl.w	r2, r1, r2
 8000788:	4611      	mov	r1, r2
 800078a:	4a2f      	ldr	r2, [pc, #188]	; (8000848 <MGPIO_enSetPinValue+0xfc>)
 800078c:	430b      	orrs	r3, r1
 800078e:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000790:	e054      	b.n	800083c <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 8000792:	797b      	ldrb	r3, [r7, #5]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d10b      	bne.n	80007b0 <MGPIO_enSetPinValue+0x64>
			CLR_BIT(GPIOA->GPIO_ODR, copy_u8pin);
 8000798:	4b2b      	ldr	r3, [pc, #172]	; (8000848 <MGPIO_enSetPinValue+0xfc>)
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	79ba      	ldrb	r2, [r7, #6]
 800079e:	2101      	movs	r1, #1
 80007a0:	fa01 f202 	lsl.w	r2, r1, r2
 80007a4:	43d2      	mvns	r2, r2
 80007a6:	4611      	mov	r1, r2
 80007a8:	4a27      	ldr	r2, [pc, #156]	; (8000848 <MGPIO_enSetPinValue+0xfc>)
 80007aa:	400b      	ands	r3, r1
 80007ac:	60d3      	str	r3, [r2, #12]
		break;
 80007ae:	e045      	b.n	800083c <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 80007b0:	2300      	movs	r3, #0
 80007b2:	73fb      	strb	r3, [r7, #15]
		break;
 80007b4:	e042      	b.n	800083c <MGPIO_enSetPinValue+0xf0>

	case PORTB:
		if (copy_u8Value == HIGH)
 80007b6:	797b      	ldrb	r3, [r7, #5]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d10a      	bne.n	80007d2 <MGPIO_enSetPinValue+0x86>
		{
			SET_BIT(GPIOB->GPIO_ODR, copy_u8pin);
 80007bc:	4b23      	ldr	r3, [pc, #140]	; (800084c <MGPIO_enSetPinValue+0x100>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	79ba      	ldrb	r2, [r7, #6]
 80007c2:	2101      	movs	r1, #1
 80007c4:	fa01 f202 	lsl.w	r2, r1, r2
 80007c8:	4611      	mov	r1, r2
 80007ca:	4a20      	ldr	r2, [pc, #128]	; (800084c <MGPIO_enSetPinValue+0x100>)
 80007cc:	430b      	orrs	r3, r1
 80007ce:	60d3      	str	r3, [r2, #12]
		else
		{
			local_state = OUT_OF_RANG_ERR;

		}
		break;
 80007d0:	e034      	b.n	800083c <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 80007d2:	797b      	ldrb	r3, [r7, #5]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d10b      	bne.n	80007f0 <MGPIO_enSetPinValue+0xa4>
			CLR_BIT(GPIOB->GPIO_ODR, copy_u8pin);
 80007d8:	4b1c      	ldr	r3, [pc, #112]	; (800084c <MGPIO_enSetPinValue+0x100>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	79ba      	ldrb	r2, [r7, #6]
 80007de:	2101      	movs	r1, #1
 80007e0:	fa01 f202 	lsl.w	r2, r1, r2
 80007e4:	43d2      	mvns	r2, r2
 80007e6:	4611      	mov	r1, r2
 80007e8:	4a18      	ldr	r2, [pc, #96]	; (800084c <MGPIO_enSetPinValue+0x100>)
 80007ea:	400b      	ands	r3, r1
 80007ec:	60d3      	str	r3, [r2, #12]
		break;
 80007ee:	e025      	b.n	800083c <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 80007f0:	2300      	movs	r3, #0
 80007f2:	73fb      	strb	r3, [r7, #15]
		break;
 80007f4:	e022      	b.n	800083c <MGPIO_enSetPinValue+0xf0>

	case PORTC:
		if (copy_u8Value == HIGH)
 80007f6:	797b      	ldrb	r3, [r7, #5]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d10a      	bne.n	8000812 <MGPIO_enSetPinValue+0xc6>
		{
			SET_BIT(GPIOC->GPIO_ODR, copy_u8pin);
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MGPIO_enSetPinValue+0x104>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	79ba      	ldrb	r2, [r7, #6]
 8000802:	2101      	movs	r1, #1
 8000804:	fa01 f202 	lsl.w	r2, r1, r2
 8000808:	4611      	mov	r1, r2
 800080a:	4a11      	ldr	r2, [pc, #68]	; (8000850 <MGPIO_enSetPinValue+0x104>)
 800080c:	430b      	orrs	r3, r1
 800080e:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000810:	e014      	b.n	800083c <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 8000812:	797b      	ldrb	r3, [r7, #5]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d10b      	bne.n	8000830 <MGPIO_enSetPinValue+0xe4>
			CLR_BIT(GPIOC->GPIO_ODR, copy_u8pin);
 8000818:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <MGPIO_enSetPinValue+0x104>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	79ba      	ldrb	r2, [r7, #6]
 800081e:	2101      	movs	r1, #1
 8000820:	fa01 f202 	lsl.w	r2, r1, r2
 8000824:	43d2      	mvns	r2, r2
 8000826:	4611      	mov	r1, r2
 8000828:	4a09      	ldr	r2, [pc, #36]	; (8000850 <MGPIO_enSetPinValue+0x104>)
 800082a:	400b      	ands	r3, r1
 800082c:	60d3      	str	r3, [r2, #12]
		break;
 800082e:	e005      	b.n	800083c <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 8000830:	2300      	movs	r3, #0
 8000832:	73fb      	strb	r3, [r7, #15]
		break;
 8000834:	e002      	b.n	800083c <MGPIO_enSetPinValue+0xf0>

	default:
		local_state = OUT_OF_RANG_ERR;
 8000836:	2300      	movs	r3, #0
 8000838:	73fb      	strb	r3, [r7, #15]
		break;
 800083a:	bf00      	nop
	}
	return local_state;
 800083c:	7bfb      	ldrb	r3, [r7, #15]
}
 800083e:	4618      	mov	r0, r3
 8000840:	3714      	adds	r7, #20
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	40010800 	.word	0x40010800
 800084c:	40010c00 	.word	0x40010c00
 8000850:	40011000 	.word	0x40011000

08000854 <MNVIC_enEnableNVIC>:
#include "MNVIC_int.h"
#include "MNVIC_config.h"
#include "MNVIC_priv.h"

ErrorState_t MNVIC_enEnableNVIC(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
	SCB_AIRCR = NVIC_GROUPSUB_PRI;
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <MNVIC_enEnableNVIC+0x14>)
 800085a:	4a04      	ldr	r2, [pc, #16]	; (800086c <MNVIC_enEnableNVIC+0x18>)
 800085c:	601a      	str	r2, [r3, #0]

	return SUCCESS;
 800085e:	2302      	movs	r3, #2
}
 8000860:	4618      	mov	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	e000ed0c 	.word	0xe000ed0c
 800086c:	05fa0600 	.word	0x05fa0600

08000870 <MNVIC_enEnableInt>:


ErrorState_t MNVIC_enEnableInt(VectorTable_t copy_u8IRQnum)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
	ErrorState_t  local_state = SUCCESS;
 800087a:	2302      	movs	r3, #2
 800087c:	73fb      	strb	r3, [r7, #15]

	if (copy_u8IRQnum <= 31)
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	2b1f      	cmp	r3, #31
 8000882:	d805      	bhi.n	8000890 <MNVIC_enEnableInt+0x20>
	{
		NVIC->NVIC_ISER[0] = (1<<copy_u8IRQnum);
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	2201      	movs	r2, #1
 8000888:	409a      	lsls	r2, r3
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MNVIC_enEnableInt+0x48>)
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	e00d      	b.n	80008ac <MNVIC_enEnableInt+0x3c>
	}
	else if (copy_u8IRQnum <= 63)
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	2b3f      	cmp	r3, #63	; 0x3f
 8000894:	d808      	bhi.n	80008a8 <MNVIC_enEnableInt+0x38>
	{
		copy_u8IRQnum -= 32;
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	3b20      	subs	r3, #32
 800089a:	71fb      	strb	r3, [r7, #7]
		NVIC->NVIC_ISER[1] = (1<<copy_u8IRQnum);
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	2201      	movs	r2, #1
 80008a0:	409a      	lsls	r2, r3
 80008a2:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <MNVIC_enEnableInt+0x48>)
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	e001      	b.n	80008ac <MNVIC_enEnableInt+0x3c>
	}
	else
	{
		local_state = OUT_OF_RANG_ERR;
 80008a8:	2300      	movs	r3, #0
 80008aa:	73fb      	strb	r3, [r7, #15]
	}
	return local_state;
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr
 80008b8:	e000e100 	.word	0xe000e100

080008bc <MRCC_enSysClkINIT>:
#include "MRCC_int.h"
#include "MRCC_config.h"
#include "MRCC_priv.h"

ErrorState_t MRCC_enSysClkINIT(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0


	/** CLK source is HSI **/
#elif(RCC_CLK_TYPE == RCC_HSI)
	/* 1. ENABLE the HSI */
	SET_BIT(RCC->RCC_CR, HSION);
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MRCC_enSysClkINIT+0x74>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a1a      	ldr	r2, [pc, #104]	; (8000930 <MRCC_enSysClkINIT+0x74>)
 80008c6:	f043 0301 	orr.w	r3, r3, #1
 80008ca:	6013      	str	r3, [r2, #0]

	/* 2. wait till HSE is READY 'settling time finished', stable */
	while (!(GET_BIT(RCC->RCC_CR, HSIRDY)));
 80008cc:	bf00      	nop
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MRCC_enSysClkINIT+0x74>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	085b      	lsrs	r3, r3, #1
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d0f8      	beq.n	80008ce <MRCC_enSysClkINIT+0x12>

	/* 3. Enable System switch clock with HSI */
	CLR_BIT(RCC->RCC_CFGR, SWC);
 80008dc:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MRCC_enSysClkINIT+0x74>)
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	4a13      	ldr	r2, [pc, #76]	; (8000930 <MRCC_enSysClkINIT+0x74>)
 80008e2:	f023 0301 	bic.w	r3, r3, #1
 80008e6:	6053      	str	r3, [r2, #4]

#else
#error("WRONG CLK TYPE");
#endif
	/* MASK the AHB and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= RCC_AHB_MASK;
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MRCC_enSysClkINIT+0x74>)
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	4a10      	ldr	r2, [pc, #64]	; (8000930 <MRCC_enSysClkINIT+0x74>)
 80008ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80008f2:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= RCC_AHB_PRESCALER;
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MRCC_enSysClkINIT+0x74>)
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <MRCC_enSysClkINIT+0x74>)
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	6053      	str	r3, [r2, #4]

	/* MASK the APB1 and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= RCC_APB1_MASK;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MRCC_enSysClkINIT+0x74>)
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	4a0b      	ldr	r2, [pc, #44]	; (8000930 <MRCC_enSysClkINIT+0x74>)
 8000902:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000906:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= RCC_APB1_PRESCALER_MODE;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MRCC_enSysClkINIT+0x74>)
 800090a:	4a09      	ldr	r2, [pc, #36]	; (8000930 <MRCC_enSysClkINIT+0x74>)
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	6053      	str	r3, [r2, #4]

	/* MASK the APB2 and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= RCC_APB2_MASK;
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <MRCC_enSysClkINIT+0x74>)
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	4a06      	ldr	r2, [pc, #24]	; (8000930 <MRCC_enSysClkINIT+0x74>)
 8000916:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800091a:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= RCC_APB2_PRESCALER_MODE;
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <MRCC_enSysClkINIT+0x74>)
 800091e:	4a04      	ldr	r2, [pc, #16]	; (8000930 <MRCC_enSysClkINIT+0x74>)
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	6053      	str	r3, [r2, #4]
		RCC->RCC_CFGR &= RCC_MCO_MASK;
		RCC->RCC_CFGR |= RCC_MCO_MODE ;
	}
#endif

	return SUCCESS;
 8000924:	2302      	movs	r3, #2
}
 8000926:	4618      	mov	r0, r3
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40021000 	.word	0x40021000

08000934 <MRCC_enEnablePeripheralCLK>:

ErrorState_t MRCC_enEnablePeripheralCLK(peripheral_ID copy_u8Peripheral)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
	ErrorState_t local_state = SUCCESS;
 800093e:	2302      	movs	r3, #2
 8000940:	73fb      	strb	r3, [r7, #15]

	/* based on predefined Peripheral, switch to corresponding Register, and Enabled it*/
	if (copy_u8Peripheral <= 31)
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	2b1f      	cmp	r3, #31
 8000946:	d80a      	bhi.n	800095e <MRCC_enEnablePeripheralCLK+0x2a>
		SET_BIT(RCC->RCC_AHBENR, copy_u8Peripheral);
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MRCC_enEnablePeripheralCLK+0x80>)
 800094a:	695b      	ldr	r3, [r3, #20]
 800094c:	79fa      	ldrb	r2, [r7, #7]
 800094e:	2101      	movs	r1, #1
 8000950:	fa01 f202 	lsl.w	r2, r1, r2
 8000954:	4611      	mov	r1, r2
 8000956:	4a17      	ldr	r2, [pc, #92]	; (80009b4 <MRCC_enEnablePeripheralCLK+0x80>)
 8000958:	430b      	orrs	r3, r1
 800095a:	6153      	str	r3, [r2, #20]
 800095c:	e023      	b.n	80009a6 <MRCC_enEnablePeripheralCLK+0x72>

	else if (copy_u8Peripheral <= 63)
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	2b3f      	cmp	r3, #63	; 0x3f
 8000962:	d80d      	bhi.n	8000980 <MRCC_enEnablePeripheralCLK+0x4c>
	{
		copy_u8Peripheral -= 32;
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	3b20      	subs	r3, #32
 8000968:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->RCC_APB1ENR, copy_u8Peripheral);
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MRCC_enEnablePeripheralCLK+0x80>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	79fa      	ldrb	r2, [r7, #7]
 8000970:	2101      	movs	r1, #1
 8000972:	fa01 f202 	lsl.w	r2, r1, r2
 8000976:	4611      	mov	r1, r2
 8000978:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <MRCC_enEnablePeripheralCLK+0x80>)
 800097a:	430b      	orrs	r3, r1
 800097c:	61d3      	str	r3, [r2, #28]
 800097e:	e012      	b.n	80009a6 <MRCC_enEnablePeripheralCLK+0x72>
	}

	else if (copy_u8Peripheral <= 95)
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	2b5f      	cmp	r3, #95	; 0x5f
 8000984:	d80d      	bhi.n	80009a2 <MRCC_enEnablePeripheralCLK+0x6e>
	{
		copy_u8Peripheral -= 64;
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	3b40      	subs	r3, #64	; 0x40
 800098a:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->RCC_APB2ENR, copy_u8Peripheral);
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MRCC_enEnablePeripheralCLK+0x80>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	79fa      	ldrb	r2, [r7, #7]
 8000992:	2101      	movs	r1, #1
 8000994:	fa01 f202 	lsl.w	r2, r1, r2
 8000998:	4611      	mov	r1, r2
 800099a:	4a06      	ldr	r2, [pc, #24]	; (80009b4 <MRCC_enEnablePeripheralCLK+0x80>)
 800099c:	430b      	orrs	r3, r1
 800099e:	6193      	str	r3, [r2, #24]
 80009a0:	e001      	b.n	80009a6 <MRCC_enEnablePeripheralCLK+0x72>
	}

	else
	{
		local_state = OUT_OF_RANG_ERR;
 80009a2:	2300      	movs	r3, #0
 80009a4:	73fb      	strb	r3, [r7, #15]
	}
	return local_state;
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3714      	adds	r7, #20
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000

080009b8 <main>:
PB_ST button1 = {PORTA, PIN0, PULL_UP};
PB_ST button2 = {PORTA, PIN1, PULL_UP};
PB_ST button3 = {PORTB, PIN3, PULL_UP};

int main(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0

	MRCC_enSysClkINIT();
 80009bc:	f7ff ff7e 	bl	80008bc <MRCC_enSysClkINIT>
	MRCC_enEnablePeripheralCLK(IOPA);
 80009c0:	2042      	movs	r0, #66	; 0x42
 80009c2:	f7ff ffb7 	bl	8000934 <MRCC_enEnablePeripheralCLK>
	MRCC_enEnablePeripheralCLK(IOPB);
 80009c6:	2043      	movs	r0, #67	; 0x43
 80009c8:	f7ff ffb4 	bl	8000934 <MRCC_enEnablePeripheralCLK>
	MRCC_enEnablePeripheralCLK(MAFIO);
 80009cc:	2040      	movs	r0, #64	; 0x40
 80009ce:	f7ff ffb1 	bl	8000934 <MRCC_enEnablePeripheralCLK>

	HLED_enInit(PORTA, PIN3);
 80009d2:	2103      	movs	r1, #3
 80009d4:	2001      	movs	r0, #1
 80009d6:	f7ff fbcb 	bl	8000170 <HLED_enInit>
	HLED_enInit(PORTA, PIN4);
 80009da:	2104      	movs	r1, #4
 80009dc:	2001      	movs	r0, #1
 80009de:	f7ff fbc7 	bl	8000170 <HLED_enInit>
	HLED_enInit(PORTA, PIN5);
 80009e2:	2105      	movs	r1, #5
 80009e4:	2001      	movs	r0, #1
 80009e6:	f7ff fbc3 	bl	8000170 <HLED_enInit>

	HPB_enInit(&button1);
 80009ea:	481a      	ldr	r0, [pc, #104]	; (8000a54 <main+0x9c>)
 80009ec:	f7ff fbe6 	bl	80001bc <HPB_enInit>
	HPB_enInit(&button2);
 80009f0:	4819      	ldr	r0, [pc, #100]	; (8000a58 <main+0xa0>)
 80009f2:	f7ff fbe3 	bl	80001bc <HPB_enInit>
	HPB_enInit(&button3);
 80009f6:	4819      	ldr	r0, [pc, #100]	; (8000a5c <main+0xa4>)
 80009f8:	f7ff fbe0 	bl	80001bc <HPB_enInit>

	MAFIO_enSetEXTIConfig(EXTI3_LINE, AFIO_GPIOB);
 80009fc:	2101      	movs	r1, #1
 80009fe:	2003      	movs	r0, #3
 8000a00:	f7ff fd72 	bl	80004e8 <MAFIO_enSetEXTIConfig>
	MEXTI_enCallBack(EXTI0_LINE, Action1);
 8000a04:	4916      	ldr	r1, [pc, #88]	; (8000a60 <main+0xa8>)
 8000a06:	2000      	movs	r0, #0
 8000a08:	f7ff fc38 	bl	800027c <MEXTI_enCallBack>
	MEXTI_enCallBack(EXTI1_LINE, Action2);
 8000a0c:	4915      	ldr	r1, [pc, #84]	; (8000a64 <main+0xac>)
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f7ff fc34 	bl	800027c <MEXTI_enCallBack>
	MEXTI_enCallBack(EXTI3_LINE, Action3);
 8000a14:	4914      	ldr	r1, [pc, #80]	; (8000a68 <main+0xb0>)
 8000a16:	2003      	movs	r0, #3
 8000a18:	f7ff fc30 	bl	800027c <MEXTI_enCallBack>

	MNVIC_enEnableNVIC();
 8000a1c:	f7ff ff1a 	bl	8000854 <MNVIC_enEnableNVIC>
	MNVIC_enEnableInt(EXT0_INT);
 8000a20:	2006      	movs	r0, #6
 8000a22:	f7ff ff25 	bl	8000870 <MNVIC_enEnableInt>
	MNVIC_enEnableInt(EXT1_INT);
 8000a26:	2007      	movs	r0, #7
 8000a28:	f7ff ff22 	bl	8000870 <MNVIC_enEnableInt>
	MNVIC_enEnableInt(EXT3_INT);
 8000a2c:	2009      	movs	r0, #9
 8000a2e:	f7ff ff1f 	bl	8000870 <MNVIC_enEnableInt>

	MEXTI_enInit();
 8000a32:	f7ff fbed 	bl	8000210 <MEXTI_enInit>
	MEXTI_enEnable(EXTI1_LINE);
 8000a36:	2001      	movs	r0, #1
 8000a38:	f7ff fc00 	bl	800023c <MEXTI_enEnable>
	MEXTI_enEnable(EXTI3_LINE);
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	f7ff fbfd 	bl	800023c <MEXTI_enEnable>
	MEXTI_enSetLatch(EXTI1_LINE, EXTI_RISING_TRIG);
 8000a42:	2101      	movs	r1, #1
 8000a44:	2001      	movs	r0, #1
 8000a46:	f7ff fc55 	bl	80002f4 <MEXTI_enSetLatch>
	MEXTI_enSetLatch(EXTI3_LINE, EXTI_RISING_TRIG);
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f7ff fc51 	bl	80002f4 <MEXTI_enSetLatch>


	while(1)
 8000a52:	e7fe      	b.n	8000a52 <main+0x9a>
 8000a54:	20000000 	.word	0x20000000
 8000a58:	20000004 	.word	0x20000004
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	08000a6d 	.word	0x08000a6d
 8000a64:	08000a83 	.word	0x08000a83
 8000a68:	08000a99 	.word	0x08000a99

08000a6c <Action1>:




void Action1(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	HLED_enSetON(PORTA, PIN3);
 8000a70:	2103      	movs	r1, #3
 8000a72:	2001      	movs	r0, #1
 8000a74:	f7ff fb8f 	bl	8000196 <HLED_enSetON>
	MEXTI_enClearPendingBit(EXTI0_LINE);
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f7ff fc1b 	bl	80002b4 <MEXTI_enClearPendingBit>
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <Action2>:

void Action2(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0
	HLED_enSetON(PORTA, PIN4);
 8000a86:	2104      	movs	r1, #4
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f7ff fb84 	bl	8000196 <HLED_enSetON>
	MEXTI_enClearPendingBit(EXTI1_LINE);
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f7ff fc10 	bl	80002b4 <MEXTI_enClearPendingBit>
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <Action3>:

void Action3(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	HLED_enSetON(PORTA, PIN5);
 8000a9c:	2105      	movs	r1, #5
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	f7ff fb79 	bl	8000196 <HLED_enSetON>
	MEXTI_enClearPendingBit(EXTI3_LINE);
 8000aa4:	2003      	movs	r0, #3
 8000aa6:	f7ff fc05 	bl	80002b4 <MEXTI_enClearPendingBit>
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <Reset_Handler>:
 8000ab0:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <LoopForever+0x2>)
 8000ab2:	4685      	mov	sp, r0
 8000ab4:	f3af 8000 	nop.w
 8000ab8:	480c      	ldr	r0, [pc, #48]	; (8000aec <LoopForever+0x6>)
 8000aba:	490d      	ldr	r1, [pc, #52]	; (8000af0 <LoopForever+0xa>)
 8000abc:	4a0d      	ldr	r2, [pc, #52]	; (8000af4 <LoopForever+0xe>)
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e002      	b.n	8000ac8 <LoopCopyDataInit>

08000ac2 <CopyDataInit>:
 8000ac2:	58d4      	ldr	r4, [r2, r3]
 8000ac4:	50c4      	str	r4, [r0, r3]
 8000ac6:	3304      	adds	r3, #4

08000ac8 <LoopCopyDataInit>:
 8000ac8:	18c4      	adds	r4, r0, r3
 8000aca:	428c      	cmp	r4, r1
 8000acc:	d3f9      	bcc.n	8000ac2 <CopyDataInit>
 8000ace:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <LoopForever+0x12>)
 8000ad0:	4c0a      	ldr	r4, [pc, #40]	; (8000afc <LoopForever+0x16>)
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e001      	b.n	8000ada <LoopFillZerobss>

08000ad6 <FillZerobss>:
 8000ad6:	6013      	str	r3, [r2, #0]
 8000ad8:	3204      	adds	r2, #4

08000ada <LoopFillZerobss>:
 8000ada:	42a2      	cmp	r2, r4
 8000adc:	d3fb      	bcc.n	8000ad6 <FillZerobss>
 8000ade:	f000 f811 	bl	8000b04 <__libc_init_array>
 8000ae2:	f7ff ff69 	bl	80009b8 <main>

08000ae6 <LoopForever>:
 8000ae6:	e7fe      	b.n	8000ae6 <LoopForever>
 8000ae8:	20005000 	.word	0x20005000
 8000aec:	20000000 	.word	0x20000000
 8000af0:	2000000c 	.word	0x2000000c
 8000af4:	08000b6c 	.word	0x08000b6c
 8000af8:	2000000c 	.word	0x2000000c
 8000afc:	20000068 	.word	0x20000068

08000b00 <ADC1_2_IRQHandler>:
 8000b00:	e7fe      	b.n	8000b00 <ADC1_2_IRQHandler>
	...

08000b04 <__libc_init_array>:
 8000b04:	b570      	push	{r4, r5, r6, lr}
 8000b06:	2600      	movs	r6, #0
 8000b08:	4d0c      	ldr	r5, [pc, #48]	; (8000b3c <__libc_init_array+0x38>)
 8000b0a:	4c0d      	ldr	r4, [pc, #52]	; (8000b40 <__libc_init_array+0x3c>)
 8000b0c:	1b64      	subs	r4, r4, r5
 8000b0e:	10a4      	asrs	r4, r4, #2
 8000b10:	42a6      	cmp	r6, r4
 8000b12:	d109      	bne.n	8000b28 <__libc_init_array+0x24>
 8000b14:	f000 f81a 	bl	8000b4c <_init>
 8000b18:	2600      	movs	r6, #0
 8000b1a:	4d0a      	ldr	r5, [pc, #40]	; (8000b44 <__libc_init_array+0x40>)
 8000b1c:	4c0a      	ldr	r4, [pc, #40]	; (8000b48 <__libc_init_array+0x44>)
 8000b1e:	1b64      	subs	r4, r4, r5
 8000b20:	10a4      	asrs	r4, r4, #2
 8000b22:	42a6      	cmp	r6, r4
 8000b24:	d105      	bne.n	8000b32 <__libc_init_array+0x2e>
 8000b26:	bd70      	pop	{r4, r5, r6, pc}
 8000b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b2c:	4798      	blx	r3
 8000b2e:	3601      	adds	r6, #1
 8000b30:	e7ee      	b.n	8000b10 <__libc_init_array+0xc>
 8000b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b36:	4798      	blx	r3
 8000b38:	3601      	adds	r6, #1
 8000b3a:	e7f2      	b.n	8000b22 <__libc_init_array+0x1e>
 8000b3c:	08000b64 	.word	0x08000b64
 8000b40:	08000b64 	.word	0x08000b64
 8000b44:	08000b64 	.word	0x08000b64
 8000b48:	08000b68 	.word	0x08000b68

08000b4c <_init>:
 8000b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b4e:	bf00      	nop
 8000b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b52:	bc08      	pop	{r3}
 8000b54:	469e      	mov	lr, r3
 8000b56:	4770      	bx	lr

08000b58 <_fini>:
 8000b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b5a:	bf00      	nop
 8000b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b5e:	bc08      	pop	{r3}
 8000b60:	469e      	mov	lr, r3
 8000b62:	4770      	bx	lr
