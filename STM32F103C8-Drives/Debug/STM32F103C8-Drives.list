
STM32F103C8-Drives.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b44  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c74  08000c74  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c74  08000c74  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08000c74  08000c74  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c74  08000c74  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c74  08000c74  00010c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c78  08000c78  00010c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08000c7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000014  08000c90  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08000c90  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000029d4  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c54  00000000  00000000  00022a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000408  00000000  00000000  00023668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000350  00000000  00000000  00023a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000181f  00000000  00000000  00023dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002a01  00000000  00000000  000255df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00006a58  00000000  00000000  00027fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0002ea38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dac  00000000  00000000  0002ea8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000014 	.word	0x20000014
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c5c 	.word	0x08000c5c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000018 	.word	0x20000018
 800016c:	08000c5c 	.word	0x08000c5c

08000170 <App_voidstartApp>:
 * \Parameters (in) : None
 *
 * \Return value:   : None
 *******************************************************************************/
void App_voidstartApp(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	}
	/*****************************************************************************************************************/
#elif(APPLICATION == MGPIO_TEST)
	/*****************************************************************************************************************/

	MRCC_enSysClkINIT();
 8000174:	f000 fa9e 	bl	80006b4 <MRCC_enSysClkINIT>
	MRCC_enEnablePeripheralCLK(MRCC_IOPA);
 8000178:	2042      	movs	r0, #66	; 0x42
 800017a:	f000 fae3 	bl	8000744 <MRCC_enEnablePeripheralCLK>
	MRCC_enEnablePeripheralCLK(MRCC_IOPB);
 800017e:	2043      	movs	r0, #67	; 0x43
 8000180:	f000 fae0 	bl	8000744 <MRCC_enEnablePeripheralCLK>
	MRCC_enEnablePeripheralCLK(MRCC_IOPC);
 8000184:	2044      	movs	r0, #68	; 0x44
 8000186:	f000 fadd 	bl	8000744 <MRCC_enEnablePeripheralCLK>

#if 1
	u8 pinvalue ;
	/* testing SetPinDirection, SetPinValue,GetpinValue and LOCKpin */
	MGPIO_enSetPinDirection(PORTA, PIN0, OUT_2MHZ_PUSH_PULL);
 800018a:	2202      	movs	r2, #2
 800018c:	2100      	movs	r1, #0
 800018e:	2000      	movs	r0, #0
 8000190:	f000 f932 	bl	80003f8 <MGPIO_enSetPinDirection>
	MGPIO_enSetPinDirection(PORTA, PIN1, OUT_2MHZ_PUSH_PULL);
 8000194:	2202      	movs	r2, #2
 8000196:	2101      	movs	r1, #1
 8000198:	2000      	movs	r0, #0
 800019a:	f000 f92d 	bl	80003f8 <MGPIO_enSetPinDirection>
//	MGPIO_enSetPinDirection(PORTA, PIN2, IN_ANALOG);
//	MGPIO_enSetPinDirection(PORTB, PIN8, IN_FLOATING);
//	MGPIO_enSetPinDirection(PORTB, PIN0, IN_PULL_UP_PULL_DOWN);

	/* GetPinValue use debugger to see the vari or use setpin value fn */
	MGPIO_enSetPinValue(PORTA, PIN0, HIGH);
 800019e:	2201      	movs	r2, #1
 80001a0:	2100      	movs	r1, #0
 80001a2:	2000      	movs	r0, #0
 80001a4:	f000 fa02 	bl	80005ac <MGPIO_enSetPinValue>
//	MGPIO_enGetPinValue(PORTA, PIN0, &pinvalue);
	MGPIO_enSetPinValue(PORTA, PIN1, HIGH);
 80001a8:	2201      	movs	r2, #1
 80001aa:	2101      	movs	r1, #1
 80001ac:	2000      	movs	r0, #0
 80001ae:	f000 f9fd 	bl	80005ac <MGPIO_enSetPinValue>
	MGPIO_enSetResetPin(PORTA, PIN0, GPIO_PIN_SET);
	MGPIO_enSetResetPin(PORTA, PIN1, GPIO_PIN_RESET);

#endif

	while(1)
 80001b2:	e7fe      	b.n	80001b2 <App_voidstartApp+0x42>

080001b4 <ADC1_2_IRQHandler>:
/********************************************************************************
 * HANDLEAR IMPLEMENTATION
 ********************************************************************************/

void ADC1_2_IRQHandler(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
	if (ADC_CallBack != NULL)
 80001b8:	4b07      	ldr	r3, [pc, #28]	; (80001d8 <ADC1_2_IRQHandler+0x24>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d008      	beq.n	80001d2 <ADC1_2_IRQHandler+0x1e>
	{
		if (GET_BIT(ADC->ADC_SR, EOC))
 80001c0:	4b06      	ldr	r3, [pc, #24]	; (80001dc <ADC1_2_IRQHandler+0x28>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	085b      	lsrs	r3, r3, #1
 80001c6:	f003 0301 	and.w	r3, r3, #1
 80001ca:	2b00      	cmp	r3, #0
		}
		else if (GET_BIT(ADC->ADC_SR, JEOC))
		{

		}
		ADC_CallBack();
 80001cc:	4b02      	ldr	r3, [pc, #8]	; (80001d8 <ADC1_2_IRQHandler+0x24>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4798      	blx	r3
	}
}
 80001d2:	bf00      	nop
 80001d4:	bd80      	pop	{r7, pc}
 80001d6:	bf00      	nop
 80001d8:	20000030 	.word	0x20000030
 80001dc:	40012400 	.word	0x40012400

080001e0 <DMA1_Channel1_IRQHandler>:
}



void DMA1_Channel1_IRQHandler(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	if (DMA_CallBack[Channel1] != NULL)
 80001e4:	4b04      	ldr	r3, [pc, #16]	; (80001f8 <DMA1_Channel1_IRQHandler+0x18>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d002      	beq.n	80001f2 <DMA1_Channel1_IRQHandler+0x12>
	{
		DMA_CallBack[Channel1]();
 80001ec:	4b02      	ldr	r3, [pc, #8]	; (80001f8 <DMA1_Channel1_IRQHandler+0x18>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4798      	blx	r3
	}
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	20000034 	.word	0x20000034

080001fc <DMA1_Channel2_IRQHandler>:

void DMA1_Channel2_IRQHandler(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	if (DMA_CallBack[Channel2] != NULL)
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <DMA1_Channel2_IRQHandler+0x18>)
 8000202:	685b      	ldr	r3, [r3, #4]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d002      	beq.n	800020e <DMA1_Channel2_IRQHandler+0x12>
	{
		DMA_CallBack[Channel2]();
 8000208:	4b02      	ldr	r3, [pc, #8]	; (8000214 <DMA1_Channel2_IRQHandler+0x18>)
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	4798      	blx	r3
	}
}
 800020e:	bf00      	nop
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	20000034 	.word	0x20000034

08000218 <DMA1_Channel3_IRQHandler>:

void DMA1_Channel3_IRQHandler(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	if (DMA_CallBack[Channel3] != NULL)
 800021c:	4b04      	ldr	r3, [pc, #16]	; (8000230 <DMA1_Channel3_IRQHandler+0x18>)
 800021e:	689b      	ldr	r3, [r3, #8]
 8000220:	2b00      	cmp	r3, #0
 8000222:	d002      	beq.n	800022a <DMA1_Channel3_IRQHandler+0x12>
	{
		DMA_CallBack[Channel3]();
 8000224:	4b02      	ldr	r3, [pc, #8]	; (8000230 <DMA1_Channel3_IRQHandler+0x18>)
 8000226:	689b      	ldr	r3, [r3, #8]
 8000228:	4798      	blx	r3
	}
}
 800022a:	bf00      	nop
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	20000034 	.word	0x20000034

08000234 <DMA1_Channel4_IRQHandler>:

void DMA1_Channel4_IRQHandler(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	if (DMA_CallBack[Channel4] != NULL)
 8000238:	4b04      	ldr	r3, [pc, #16]	; (800024c <DMA1_Channel4_IRQHandler+0x18>)
 800023a:	68db      	ldr	r3, [r3, #12]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d002      	beq.n	8000246 <DMA1_Channel4_IRQHandler+0x12>
	{
		DMA_CallBack[Channel4]();
 8000240:	4b02      	ldr	r3, [pc, #8]	; (800024c <DMA1_Channel4_IRQHandler+0x18>)
 8000242:	68db      	ldr	r3, [r3, #12]
 8000244:	4798      	blx	r3
	}
}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	20000034 	.word	0x20000034

08000250 <DMA1_Channel5_IRQHandler>:

void DMA1_Channel5_IRQHandler(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	if (DMA_CallBack[Channel5] != NULL)
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <DMA1_Channel5_IRQHandler+0x18>)
 8000256:	691b      	ldr	r3, [r3, #16]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d002      	beq.n	8000262 <DMA1_Channel5_IRQHandler+0x12>
	{
		DMA_CallBack[Channel5]();
 800025c:	4b02      	ldr	r3, [pc, #8]	; (8000268 <DMA1_Channel5_IRQHandler+0x18>)
 800025e:	691b      	ldr	r3, [r3, #16]
 8000260:	4798      	blx	r3
	}
}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	20000034 	.word	0x20000034

0800026c <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	if (DMA_CallBack[Channel6] != NULL)
 8000270:	4b04      	ldr	r3, [pc, #16]	; (8000284 <DMA1_Channel6_IRQHandler+0x18>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d002      	beq.n	800027e <DMA1_Channel6_IRQHandler+0x12>
	{
		DMA_CallBack[Channel6]();
 8000278:	4b02      	ldr	r3, [pc, #8]	; (8000284 <DMA1_Channel6_IRQHandler+0x18>)
 800027a:	695b      	ldr	r3, [r3, #20]
 800027c:	4798      	blx	r3
	}
}
 800027e:	bf00      	nop
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	20000034 	.word	0x20000034

08000288 <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	if (DMA_CallBack[Channel7] != NULL)
 800028c:	4b04      	ldr	r3, [pc, #16]	; (80002a0 <DMA1_Channel7_IRQHandler+0x18>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d002      	beq.n	800029a <DMA1_Channel7_IRQHandler+0x12>
	{
		DMA_CallBack[Channel7]();
 8000294:	4b02      	ldr	r3, [pc, #8]	; (80002a0 <DMA1_Channel7_IRQHandler+0x18>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4798      	blx	r3
	}
}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	20000034 	.word	0x20000034

080002a4 <EXTI0_IRQHandler>:
 *********************************************************************************************************************/
/*	@brief 	Handlear has an callback fun from the App layer and Excecuted based on
 * 			the Selected Line on the Callback fun. */

void EXTI0_IRQHandler(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI0_LINE] != NULL)
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <EXTI0_IRQHandler+0x18>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d002      	beq.n	80002b6 <EXTI0_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI0_LINE]();
 80002b0:	4b02      	ldr	r3, [pc, #8]	; (80002bc <EXTI0_IRQHandler+0x18>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4798      	blx	r3
	}
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	20000050 	.word	0x20000050

080002c0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI1_LINE] != NULL)
 80002c4:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <EXTI1_IRQHandler+0x18>)
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d002      	beq.n	80002d2 <EXTI1_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI1_LINE]();
 80002cc:	4b02      	ldr	r3, [pc, #8]	; (80002d8 <EXTI1_IRQHandler+0x18>)
 80002ce:	685b      	ldr	r3, [r3, #4]
 80002d0:	4798      	blx	r3
	}

}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	20000050 	.word	0x20000050

080002dc <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI2_LINE] != NULL)
 80002e0:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <EXTI2_IRQHandler+0x18>)
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d002      	beq.n	80002ee <EXTI2_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI2_LINE]();
 80002e8:	4b02      	ldr	r3, [pc, #8]	; (80002f4 <EXTI2_IRQHandler+0x18>)
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	4798      	blx	r3
	}
}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000050 	.word	0x20000050

080002f8 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI3_LINE] != NULL)
 80002fc:	4b04      	ldr	r3, [pc, #16]	; (8000310 <EXTI3_IRQHandler+0x18>)
 80002fe:	68db      	ldr	r3, [r3, #12]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d002      	beq.n	800030a <EXTI3_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI3_LINE]();
 8000304:	4b02      	ldr	r3, [pc, #8]	; (8000310 <EXTI3_IRQHandler+0x18>)
 8000306:	68db      	ldr	r3, [r3, #12]
 8000308:	4798      	blx	r3
	}
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	20000050 	.word	0x20000050

08000314 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI4_LINE] != NULL)
 8000318:	4b04      	ldr	r3, [pc, #16]	; (800032c <EXTI4_IRQHandler+0x18>)
 800031a:	691b      	ldr	r3, [r3, #16]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d002      	beq.n	8000326 <EXTI4_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI4_LINE]();
 8000320:	4b02      	ldr	r3, [pc, #8]	; (800032c <EXTI4_IRQHandler+0x18>)
 8000322:	691b      	ldr	r3, [r3, #16]
 8000324:	4798      	blx	r3
	}
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000050 	.word	0x20000050

08000330 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI5_LINE] != NULL)
 8000334:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI9_5_IRQHandler+0x58>)
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d003      	beq.n	8000344 <EXTI9_5_IRQHandler+0x14>
	{
		MEXTI_CALLBACK[MEXTI5_LINE]();
 800033c:	4b12      	ldr	r3, [pc, #72]	; (8000388 <EXTI9_5_IRQHandler+0x58>)
 800033e:	695b      	ldr	r3, [r3, #20]
 8000340:	4798      	blx	r3
	else if (MEXTI_CALLBACK[MEXTI9_LINE] != NULL)
	{
		MEXTI_CALLBACK[MEXTI9_LINE]();

	}
}
 8000342:	e01e      	b.n	8000382 <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI6_LINE] != NULL)
 8000344:	4b10      	ldr	r3, [pc, #64]	; (8000388 <EXTI9_5_IRQHandler+0x58>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d003      	beq.n	8000354 <EXTI9_5_IRQHandler+0x24>
		MEXTI_CALLBACK[MEXTI6_LINE]();
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <EXTI9_5_IRQHandler+0x58>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4798      	blx	r3
}
 8000352:	e016      	b.n	8000382 <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI7_LINE] != NULL)
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI9_5_IRQHandler+0x58>)
 8000356:	69db      	ldr	r3, [r3, #28]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d003      	beq.n	8000364 <EXTI9_5_IRQHandler+0x34>
		MEXTI_CALLBACK[MEXTI7_LINE]();
 800035c:	4b0a      	ldr	r3, [pc, #40]	; (8000388 <EXTI9_5_IRQHandler+0x58>)
 800035e:	69db      	ldr	r3, [r3, #28]
 8000360:	4798      	blx	r3
}
 8000362:	e00e      	b.n	8000382 <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI8_LINE] != NULL)
 8000364:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI9_5_IRQHandler+0x58>)
 8000366:	6a1b      	ldr	r3, [r3, #32]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d003      	beq.n	8000374 <EXTI9_5_IRQHandler+0x44>
		MEXTI_CALLBACK[MEXTI8_LINE]();
 800036c:	4b06      	ldr	r3, [pc, #24]	; (8000388 <EXTI9_5_IRQHandler+0x58>)
 800036e:	6a1b      	ldr	r3, [r3, #32]
 8000370:	4798      	blx	r3
}
 8000372:	e006      	b.n	8000382 <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI9_LINE] != NULL)
 8000374:	4b04      	ldr	r3, [pc, #16]	; (8000388 <EXTI9_5_IRQHandler+0x58>)
 8000376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000378:	2b00      	cmp	r3, #0
 800037a:	d002      	beq.n	8000382 <EXTI9_5_IRQHandler+0x52>
		MEXTI_CALLBACK[MEXTI9_LINE]();
 800037c:	4b02      	ldr	r3, [pc, #8]	; (8000388 <EXTI9_5_IRQHandler+0x58>)
 800037e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000380:	4798      	blx	r3
}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	20000050 	.word	0x20000050

0800038c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI10_LINE] != NULL)
 8000390:	4b18      	ldr	r3, [pc, #96]	; (80003f4 <EXTI15_10_IRQHandler+0x68>)
 8000392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000394:	2b00      	cmp	r3, #0
 8000396:	d003      	beq.n	80003a0 <EXTI15_10_IRQHandler+0x14>
	{
		MEXTI_CALLBACK[MEXTI10_LINE]();
 8000398:	4b16      	ldr	r3, [pc, #88]	; (80003f4 <EXTI15_10_IRQHandler+0x68>)
 800039a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800039c:	4798      	blx	r3
	else if (MEXTI_CALLBACK[MEXTI15_LINE] != NULL)
	{
		MEXTI_CALLBACK[MEXTI15_LINE]();

	}
}
 800039e:	e026      	b.n	80003ee <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI11_LINE] != NULL)
 80003a0:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <EXTI15_10_IRQHandler+0x68>)
 80003a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d003      	beq.n	80003b0 <EXTI15_10_IRQHandler+0x24>
		MEXTI_CALLBACK[MEXTI11_LINE]();
 80003a8:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <EXTI15_10_IRQHandler+0x68>)
 80003aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ac:	4798      	blx	r3
}
 80003ae:	e01e      	b.n	80003ee <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI12_LINE] != NULL)
 80003b0:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <EXTI15_10_IRQHandler+0x68>)
 80003b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d003      	beq.n	80003c0 <EXTI15_10_IRQHandler+0x34>
		MEXTI_CALLBACK[MEXTI12_LINE]();
 80003b8:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <EXTI15_10_IRQHandler+0x68>)
 80003ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003bc:	4798      	blx	r3
}
 80003be:	e016      	b.n	80003ee <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI13_LINE] != NULL)
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <EXTI15_10_IRQHandler+0x68>)
 80003c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d003      	beq.n	80003d0 <EXTI15_10_IRQHandler+0x44>
		MEXTI_CALLBACK[MEXTI13_LINE]();
 80003c8:	4b0a      	ldr	r3, [pc, #40]	; (80003f4 <EXTI15_10_IRQHandler+0x68>)
 80003ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003cc:	4798      	blx	r3
}
 80003ce:	e00e      	b.n	80003ee <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI14_LINE] != NULL)
 80003d0:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <EXTI15_10_IRQHandler+0x68>)
 80003d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d003      	beq.n	80003e0 <EXTI15_10_IRQHandler+0x54>
		MEXTI_CALLBACK[MEXTI14_LINE]();
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <EXTI15_10_IRQHandler+0x68>)
 80003da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003dc:	4798      	blx	r3
}
 80003de:	e006      	b.n	80003ee <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI15_LINE] != NULL)
 80003e0:	4b04      	ldr	r3, [pc, #16]	; (80003f4 <EXTI15_10_IRQHandler+0x68>)
 80003e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d002      	beq.n	80003ee <EXTI15_10_IRQHandler+0x62>
		MEXTI_CALLBACK[MEXTI15_LINE]();
 80003e8:	4b02      	ldr	r3, [pc, #8]	; (80003f4 <EXTI15_10_IRQHandler+0x68>)
 80003ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003ec:	4798      	blx	r3
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	20000050 	.word	0x20000050

080003f8 <MGPIO_enSetPinDirection>:
 *
 * \Return value:   : ErrorState_t  -> SUCEESS
 * 								   -> OUT_OF_RANG_ERR
 *******************************************************************************/
ErrorState_t MGPIO_enSetPinDirection(MGPIO_PORT_t copy_u8port, MGPIO_PIN_t copy_u8pin, u8 copy_u8Mode)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	71fb      	strb	r3, [r7, #7]
 8000402:	460b      	mov	r3, r1
 8000404:	71bb      	strb	r3, [r7, #6]
 8000406:	4613      	mov	r3, r2
 8000408:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 800040a:	2302      	movs	r3, #2
 800040c:	73fb      	strb	r3, [r7, #15]
	 * 	3. Set the 4bit Configuration with the Selected Mode
	 *
	 * 	@اhint 	use 4bit Masked pins to clear and shifting it correspoinding with
	 * 			the Gpio pin and use that offest when setting the Mode
	 * */
	switch(copy_u8port)
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	2b02      	cmp	r3, #2
 8000412:	d07f      	beq.n	8000514 <MGPIO_enSetPinDirection+0x11c>
 8000414:	2b02      	cmp	r3, #2
 8000416:	f300 80b9 	bgt.w	800058c <MGPIO_enSetPinDirection+0x194>
 800041a:	2b00      	cmp	r3, #0
 800041c:	d002      	beq.n	8000424 <MGPIO_enSetPinDirection+0x2c>
 800041e:	2b01      	cmp	r3, #1
 8000420:	d03c      	beq.n	800049c <MGPIO_enSetPinDirection+0xa4>
 8000422:	e0b3      	b.n	800058c <MGPIO_enSetPinDirection+0x194>
	{
	case PORTA:
		if (copy_u8pin < MGPIO_CRL_MAX)
 8000424:	79bb      	ldrb	r3, [r7, #6]
 8000426:	2b07      	cmp	r3, #7
 8000428:	d817      	bhi.n	800045a <MGPIO_enSetPinDirection+0x62>
		{
			GPIOA->GPIO_CRL &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET)) ;
 800042a:	4b5d      	ldr	r3, [pc, #372]	; (80005a0 <MGPIO_enSetPinDirection+0x1a8>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	79ba      	ldrb	r2, [r7, #6]
 8000430:	0092      	lsls	r2, r2, #2
 8000432:	210f      	movs	r1, #15
 8000434:	fa01 f202 	lsl.w	r2, r1, r2
 8000438:	43d2      	mvns	r2, r2
 800043a:	4611      	mov	r1, r2
 800043c:	4a58      	ldr	r2, [pc, #352]	; (80005a0 <MGPIO_enSetPinDirection+0x1a8>)
 800043e:	400b      	ands	r3, r1
 8000440:	6013      	str	r3, [r2, #0]
			GPIOA->GPIO_CRL |= copy_u8Mode << (copy_u8pin * MGPIO_OFFSET) ;
 8000442:	4b57      	ldr	r3, [pc, #348]	; (80005a0 <MGPIO_enSetPinDirection+0x1a8>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	7979      	ldrb	r1, [r7, #5]
 8000448:	79ba      	ldrb	r2, [r7, #6]
 800044a:	0092      	lsls	r2, r2, #2
 800044c:	fa01 f202 	lsl.w	r2, r1, r2
 8000450:	4611      	mov	r1, r2
 8000452:	4a53      	ldr	r2, [pc, #332]	; (80005a0 <MGPIO_enSetPinDirection+0x1a8>)
 8000454:	430b      	orrs	r3, r1
 8000456:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000458:	e09b      	b.n	8000592 <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < MGPIO_CRH_MAX)
 800045a:	79bb      	ldrb	r3, [r7, #6]
 800045c:	2b0f      	cmp	r3, #15
 800045e:	d81a      	bhi.n	8000496 <MGPIO_enSetPinDirection+0x9e>
			copy_u8pin -= MGPIO_CRL_MAX  ;
 8000460:	79bb      	ldrb	r3, [r7, #6]
 8000462:	3b08      	subs	r3, #8
 8000464:	71bb      	strb	r3, [r7, #6]
			GPIOA->GPIO_CRH &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET));
 8000466:	4b4e      	ldr	r3, [pc, #312]	; (80005a0 <MGPIO_enSetPinDirection+0x1a8>)
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	79ba      	ldrb	r2, [r7, #6]
 800046c:	0092      	lsls	r2, r2, #2
 800046e:	210f      	movs	r1, #15
 8000470:	fa01 f202 	lsl.w	r2, r1, r2
 8000474:	43d2      	mvns	r2, r2
 8000476:	4611      	mov	r1, r2
 8000478:	4a49      	ldr	r2, [pc, #292]	; (80005a0 <MGPIO_enSetPinDirection+0x1a8>)
 800047a:	400b      	ands	r3, r1
 800047c:	6053      	str	r3, [r2, #4]
			GPIOA->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET));
 800047e:	4b48      	ldr	r3, [pc, #288]	; (80005a0 <MGPIO_enSetPinDirection+0x1a8>)
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	7979      	ldrb	r1, [r7, #5]
 8000484:	79ba      	ldrb	r2, [r7, #6]
 8000486:	0092      	lsls	r2, r2, #2
 8000488:	fa01 f202 	lsl.w	r2, r1, r2
 800048c:	4611      	mov	r1, r2
 800048e:	4a44      	ldr	r2, [pc, #272]	; (80005a0 <MGPIO_enSetPinDirection+0x1a8>)
 8000490:	430b      	orrs	r3, r1
 8000492:	6053      	str	r3, [r2, #4]
		break;
 8000494:	e07d      	b.n	8000592 <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 8000496:	2300      	movs	r3, #0
 8000498:	73fb      	strb	r3, [r7, #15]
		break;
 800049a:	e07a      	b.n	8000592 <MGPIO_enSetPinDirection+0x19a>

	case PORTB:
		if (copy_u8pin < MGPIO_CRL_MAX)
 800049c:	79bb      	ldrb	r3, [r7, #6]
 800049e:	2b07      	cmp	r3, #7
 80004a0:	d817      	bhi.n	80004d2 <MGPIO_enSetPinDirection+0xda>
		{
			GPIOB->GPIO_CRL &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET)) ;
 80004a2:	4b40      	ldr	r3, [pc, #256]	; (80005a4 <MGPIO_enSetPinDirection+0x1ac>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	79ba      	ldrb	r2, [r7, #6]
 80004a8:	0092      	lsls	r2, r2, #2
 80004aa:	210f      	movs	r1, #15
 80004ac:	fa01 f202 	lsl.w	r2, r1, r2
 80004b0:	43d2      	mvns	r2, r2
 80004b2:	4611      	mov	r1, r2
 80004b4:	4a3b      	ldr	r2, [pc, #236]	; (80005a4 <MGPIO_enSetPinDirection+0x1ac>)
 80004b6:	400b      	ands	r3, r1
 80004b8:	6013      	str	r3, [r2, #0]
			GPIOB->GPIO_CRL |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET)) ;
 80004ba:	4b3a      	ldr	r3, [pc, #232]	; (80005a4 <MGPIO_enSetPinDirection+0x1ac>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	7979      	ldrb	r1, [r7, #5]
 80004c0:	79ba      	ldrb	r2, [r7, #6]
 80004c2:	0092      	lsls	r2, r2, #2
 80004c4:	fa01 f202 	lsl.w	r2, r1, r2
 80004c8:	4611      	mov	r1, r2
 80004ca:	4a36      	ldr	r2, [pc, #216]	; (80005a4 <MGPIO_enSetPinDirection+0x1ac>)
 80004cc:	430b      	orrs	r3, r1
 80004ce:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 80004d0:	e05f      	b.n	8000592 <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < MGPIO_CRH_MAX)
 80004d2:	79bb      	ldrb	r3, [r7, #6]
 80004d4:	2b0f      	cmp	r3, #15
 80004d6:	d81a      	bhi.n	800050e <MGPIO_enSetPinDirection+0x116>
			copy_u8pin -= MGPIO_CRL_MAX ;
 80004d8:	79bb      	ldrb	r3, [r7, #6]
 80004da:	3b08      	subs	r3, #8
 80004dc:	71bb      	strb	r3, [r7, #6]
			GPIOB->GPIO_CRH &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET)) ;
 80004de:	4b31      	ldr	r3, [pc, #196]	; (80005a4 <MGPIO_enSetPinDirection+0x1ac>)
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	79ba      	ldrb	r2, [r7, #6]
 80004e4:	0092      	lsls	r2, r2, #2
 80004e6:	210f      	movs	r1, #15
 80004e8:	fa01 f202 	lsl.w	r2, r1, r2
 80004ec:	43d2      	mvns	r2, r2
 80004ee:	4611      	mov	r1, r2
 80004f0:	4a2c      	ldr	r2, [pc, #176]	; (80005a4 <MGPIO_enSetPinDirection+0x1ac>)
 80004f2:	400b      	ands	r3, r1
 80004f4:	6053      	str	r3, [r2, #4]
			GPIOB->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET)) ;
 80004f6:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <MGPIO_enSetPinDirection+0x1ac>)
 80004f8:	685b      	ldr	r3, [r3, #4]
 80004fa:	7979      	ldrb	r1, [r7, #5]
 80004fc:	79ba      	ldrb	r2, [r7, #6]
 80004fe:	0092      	lsls	r2, r2, #2
 8000500:	fa01 f202 	lsl.w	r2, r1, r2
 8000504:	4611      	mov	r1, r2
 8000506:	4a27      	ldr	r2, [pc, #156]	; (80005a4 <MGPIO_enSetPinDirection+0x1ac>)
 8000508:	430b      	orrs	r3, r1
 800050a:	6053      	str	r3, [r2, #4]
		break;
 800050c:	e041      	b.n	8000592 <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 800050e:	2300      	movs	r3, #0
 8000510:	73fb      	strb	r3, [r7, #15]
		break;
 8000512:	e03e      	b.n	8000592 <MGPIO_enSetPinDirection+0x19a>

	case PORTC:
		if (copy_u8pin < MGPIO_CRL_MAX)
 8000514:	79bb      	ldrb	r3, [r7, #6]
 8000516:	2b07      	cmp	r3, #7
 8000518:	d817      	bhi.n	800054a <MGPIO_enSetPinDirection+0x152>
		{
			GPIOC->GPIO_CRL &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET)) ;
 800051a:	4b23      	ldr	r3, [pc, #140]	; (80005a8 <MGPIO_enSetPinDirection+0x1b0>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	79ba      	ldrb	r2, [r7, #6]
 8000520:	0092      	lsls	r2, r2, #2
 8000522:	210f      	movs	r1, #15
 8000524:	fa01 f202 	lsl.w	r2, r1, r2
 8000528:	43d2      	mvns	r2, r2
 800052a:	4611      	mov	r1, r2
 800052c:	4a1e      	ldr	r2, [pc, #120]	; (80005a8 <MGPIO_enSetPinDirection+0x1b0>)
 800052e:	400b      	ands	r3, r1
 8000530:	6013      	str	r3, [r2, #0]
			GPIOC->GPIO_CRL |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET)) ;
 8000532:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <MGPIO_enSetPinDirection+0x1b0>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	7979      	ldrb	r1, [r7, #5]
 8000538:	79ba      	ldrb	r2, [r7, #6]
 800053a:	0092      	lsls	r2, r2, #2
 800053c:	fa01 f202 	lsl.w	r2, r1, r2
 8000540:	4611      	mov	r1, r2
 8000542:	4a19      	ldr	r2, [pc, #100]	; (80005a8 <MGPIO_enSetPinDirection+0x1b0>)
 8000544:	430b      	orrs	r3, r1
 8000546:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000548:	e023      	b.n	8000592 <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < MGPIO_CRH_MAX)
 800054a:	79bb      	ldrb	r3, [r7, #6]
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d81a      	bhi.n	8000586 <MGPIO_enSetPinDirection+0x18e>
			copy_u8pin -= MGPIO_CRL_MAX ;
 8000550:	79bb      	ldrb	r3, [r7, #6]
 8000552:	3b08      	subs	r3, #8
 8000554:	71bb      	strb	r3, [r7, #6]
			GPIOC->GPIO_CRH &= ~(MGPIO_MASK) << (copy_u8pin * MGPIO_OFFSET) ;
 8000556:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <MGPIO_enSetPinDirection+0x1b0>)
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	79ba      	ldrb	r2, [r7, #6]
 800055c:	0092      	lsls	r2, r2, #2
 800055e:	f06f 010f 	mvn.w	r1, #15
 8000562:	fa01 f202 	lsl.w	r2, r1, r2
 8000566:	4611      	mov	r1, r2
 8000568:	4a0f      	ldr	r2, [pc, #60]	; (80005a8 <MGPIO_enSetPinDirection+0x1b0>)
 800056a:	400b      	ands	r3, r1
 800056c:	6053      	str	r3, [r2, #4]
			GPIOC->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET)) ;
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <MGPIO_enSetPinDirection+0x1b0>)
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	7979      	ldrb	r1, [r7, #5]
 8000574:	79ba      	ldrb	r2, [r7, #6]
 8000576:	0092      	lsls	r2, r2, #2
 8000578:	fa01 f202 	lsl.w	r2, r1, r2
 800057c:	4611      	mov	r1, r2
 800057e:	4a0a      	ldr	r2, [pc, #40]	; (80005a8 <MGPIO_enSetPinDirection+0x1b0>)
 8000580:	430b      	orrs	r3, r1
 8000582:	6053      	str	r3, [r2, #4]
		break;
 8000584:	e005      	b.n	8000592 <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 8000586:	2300      	movs	r3, #0
 8000588:	73fb      	strb	r3, [r7, #15]
		break;
 800058a:	e002      	b.n	8000592 <MGPIO_enSetPinDirection+0x19a>

	default:
		local_state = OUT_OF_RANG_ERR;
 800058c:	2300      	movs	r3, #0
 800058e:	73fb      	strb	r3, [r7, #15]
		break;
 8000590:	bf00      	nop
	}
	return local_state;
 8000592:	7bfb      	ldrb	r3, [r7, #15]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	40010800 	.word	0x40010800
 80005a4:	40010c00 	.word	0x40010c00
 80005a8:	40011000 	.word	0x40011000

080005ac <MGPIO_enSetPinValue>:
 *
 * \Return value:   : ErrorState_t  -> SUCEESS
 * 								   -> OUT_OF_RANG_ERR
 *******************************************************************************/
ErrorState_t MGPIO_enSetPinValue(MGPIO_PORT_t copy_u8port, MGPIO_PIN_t copy_u8pin, MGPIO_VALUE_t copy_u8Value)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
 80005b6:	460b      	mov	r3, r1
 80005b8:	71bb      	strb	r3, [r7, #6]
 80005ba:	4613      	mov	r3, r2
 80005bc:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 80005be:	2302      	movs	r3, #2
 80005c0:	73fb      	strb	r3, [r7, #15]
	/*	@beief 		This APIs use to set the GPIO PIN
	 *  choose between High and Low Value state and set it in ODR
	 * */
	switch(copy_u8port)
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	2b02      	cmp	r3, #2
 80005c6:	d046      	beq.n	8000656 <MGPIO_enSetPinValue+0xaa>
 80005c8:	2b02      	cmp	r3, #2
 80005ca:	dc64      	bgt.n	8000696 <MGPIO_enSetPinValue+0xea>
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d002      	beq.n	80005d6 <MGPIO_enSetPinValue+0x2a>
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d020      	beq.n	8000616 <MGPIO_enSetPinValue+0x6a>
 80005d4:	e05f      	b.n	8000696 <MGPIO_enSetPinValue+0xea>
	{
	case PORTA:
		if (copy_u8Value == HIGH)
 80005d6:	797b      	ldrb	r3, [r7, #5]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d10a      	bne.n	80005f2 <MGPIO_enSetPinValue+0x46>
		{
			SET_BIT(GPIOA->GPIO_ODR, copy_u8pin);
 80005dc:	4b32      	ldr	r3, [pc, #200]	; (80006a8 <MGPIO_enSetPinValue+0xfc>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	79ba      	ldrb	r2, [r7, #6]
 80005e2:	2101      	movs	r1, #1
 80005e4:	fa01 f202 	lsl.w	r2, r1, r2
 80005e8:	4611      	mov	r1, r2
 80005ea:	4a2f      	ldr	r2, [pc, #188]	; (80006a8 <MGPIO_enSetPinValue+0xfc>)
 80005ec:	430b      	orrs	r3, r1
 80005ee:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 80005f0:	e054      	b.n	800069c <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 80005f2:	797b      	ldrb	r3, [r7, #5]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d10b      	bne.n	8000610 <MGPIO_enSetPinValue+0x64>
			CLR_BIT(GPIOA->GPIO_ODR, copy_u8pin);
 80005f8:	4b2b      	ldr	r3, [pc, #172]	; (80006a8 <MGPIO_enSetPinValue+0xfc>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	79ba      	ldrb	r2, [r7, #6]
 80005fe:	2101      	movs	r1, #1
 8000600:	fa01 f202 	lsl.w	r2, r1, r2
 8000604:	43d2      	mvns	r2, r2
 8000606:	4611      	mov	r1, r2
 8000608:	4a27      	ldr	r2, [pc, #156]	; (80006a8 <MGPIO_enSetPinValue+0xfc>)
 800060a:	400b      	ands	r3, r1
 800060c:	60d3      	str	r3, [r2, #12]
		break;
 800060e:	e045      	b.n	800069c <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 8000610:	2300      	movs	r3, #0
 8000612:	73fb      	strb	r3, [r7, #15]
		break;
 8000614:	e042      	b.n	800069c <MGPIO_enSetPinValue+0xf0>

	case PORTB:
		if (copy_u8Value == HIGH)
 8000616:	797b      	ldrb	r3, [r7, #5]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d10a      	bne.n	8000632 <MGPIO_enSetPinValue+0x86>
		{
			SET_BIT(GPIOB->GPIO_ODR, copy_u8pin);
 800061c:	4b23      	ldr	r3, [pc, #140]	; (80006ac <MGPIO_enSetPinValue+0x100>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	79ba      	ldrb	r2, [r7, #6]
 8000622:	2101      	movs	r1, #1
 8000624:	fa01 f202 	lsl.w	r2, r1, r2
 8000628:	4611      	mov	r1, r2
 800062a:	4a20      	ldr	r2, [pc, #128]	; (80006ac <MGPIO_enSetPinValue+0x100>)
 800062c:	430b      	orrs	r3, r1
 800062e:	60d3      	str	r3, [r2, #12]
		else
		{
			local_state = OUT_OF_RANG_ERR;

		}
		break;
 8000630:	e034      	b.n	800069c <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 8000632:	797b      	ldrb	r3, [r7, #5]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d10b      	bne.n	8000650 <MGPIO_enSetPinValue+0xa4>
			CLR_BIT(GPIOB->GPIO_ODR, copy_u8pin);
 8000638:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <MGPIO_enSetPinValue+0x100>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	79ba      	ldrb	r2, [r7, #6]
 800063e:	2101      	movs	r1, #1
 8000640:	fa01 f202 	lsl.w	r2, r1, r2
 8000644:	43d2      	mvns	r2, r2
 8000646:	4611      	mov	r1, r2
 8000648:	4a18      	ldr	r2, [pc, #96]	; (80006ac <MGPIO_enSetPinValue+0x100>)
 800064a:	400b      	ands	r3, r1
 800064c:	60d3      	str	r3, [r2, #12]
		break;
 800064e:	e025      	b.n	800069c <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 8000650:	2300      	movs	r3, #0
 8000652:	73fb      	strb	r3, [r7, #15]
		break;
 8000654:	e022      	b.n	800069c <MGPIO_enSetPinValue+0xf0>

	case PORTC:
		if (copy_u8Value == HIGH)
 8000656:	797b      	ldrb	r3, [r7, #5]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d10a      	bne.n	8000672 <MGPIO_enSetPinValue+0xc6>
		{
			SET_BIT(GPIOC->GPIO_ODR, copy_u8pin);
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MGPIO_enSetPinValue+0x104>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	79ba      	ldrb	r2, [r7, #6]
 8000662:	2101      	movs	r1, #1
 8000664:	fa01 f202 	lsl.w	r2, r1, r2
 8000668:	4611      	mov	r1, r2
 800066a:	4a11      	ldr	r2, [pc, #68]	; (80006b0 <MGPIO_enSetPinValue+0x104>)
 800066c:	430b      	orrs	r3, r1
 800066e:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000670:	e014      	b.n	800069c <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 8000672:	797b      	ldrb	r3, [r7, #5]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d10b      	bne.n	8000690 <MGPIO_enSetPinValue+0xe4>
			CLR_BIT(GPIOC->GPIO_ODR, copy_u8pin);
 8000678:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <MGPIO_enSetPinValue+0x104>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	79ba      	ldrb	r2, [r7, #6]
 800067e:	2101      	movs	r1, #1
 8000680:	fa01 f202 	lsl.w	r2, r1, r2
 8000684:	43d2      	mvns	r2, r2
 8000686:	4611      	mov	r1, r2
 8000688:	4a09      	ldr	r2, [pc, #36]	; (80006b0 <MGPIO_enSetPinValue+0x104>)
 800068a:	400b      	ands	r3, r1
 800068c:	60d3      	str	r3, [r2, #12]
		break;
 800068e:	e005      	b.n	800069c <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 8000690:	2300      	movs	r3, #0
 8000692:	73fb      	strb	r3, [r7, #15]
		break;
 8000694:	e002      	b.n	800069c <MGPIO_enSetPinValue+0xf0>

	default:
		local_state = OUT_OF_RANG_ERR;
 8000696:	2300      	movs	r3, #0
 8000698:	73fb      	strb	r3, [r7, #15]
		break;
 800069a:	bf00      	nop
	}
	return local_state;
 800069c:	7bfb      	ldrb	r3, [r7, #15]
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	40010800 	.word	0x40010800
 80006ac:	40010c00 	.word	0x40010c00
 80006b0:	40011000 	.word	0x40011000

080006b4 <MRCC_enSysClkINIT>:
 * \Parameters (in) : None
 * \Return value:   : ErrorState_t  SUCEESS
 *
 *******************************************************************************/
ErrorState_t MRCC_enSysClkINIT(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0


	/** CLK source is HSI **/
#elif(MRCC_CLK_TYPE == MRCC_HSI)
	/* 1. ENABLE the HSI */
	SET_BIT(RCC->RCC_CR, HSION);
 80006b8:	4b21      	ldr	r3, [pc, #132]	; (8000740 <MRCC_enSysClkINIT+0x8c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a20      	ldr	r2, [pc, #128]	; (8000740 <MRCC_enSysClkINIT+0x8c>)
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	6013      	str	r3, [r2, #0]

	/* 2. wait till HSE is READY 'settling time finished', stable */
	while (!(GET_BIT(RCC->RCC_CR, HSIRDY)));
 80006c4:	bf00      	nop
 80006c6:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <MRCC_enSysClkINIT+0x8c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	085b      	lsrs	r3, r3, #1
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d0f8      	beq.n	80006c6 <MRCC_enSysClkINIT+0x12>

	/* 3. Enable System switch clock with HSI */
	CLR_BIT(RCC->RCC_CFGR, SWC);
 80006d4:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <MRCC_enSysClkINIT+0x8c>)
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	4a19      	ldr	r2, [pc, #100]	; (8000740 <MRCC_enSysClkINIT+0x8c>)
 80006da:	f023 0301 	bic.w	r3, r3, #1
 80006de:	6053      	str	r3, [r2, #4]

#else
#error("WRONG CLK TYPE");
#endif
	/* MASK the AHB and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= MRCC_AHB_MASK;
 80006e0:	4b17      	ldr	r3, [pc, #92]	; (8000740 <MRCC_enSysClkINIT+0x8c>)
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	4a16      	ldr	r2, [pc, #88]	; (8000740 <MRCC_enSysClkINIT+0x8c>)
 80006e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80006ea:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= MRCC_AHB_PRESCALER;
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <MRCC_enSysClkINIT+0x8c>)
 80006ee:	4a14      	ldr	r2, [pc, #80]	; (8000740 <MRCC_enSysClkINIT+0x8c>)
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	6053      	str	r3, [r2, #4]

	/* MASK the APB1 and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= MRCC_APB1_MASK;
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MRCC_enSysClkINIT+0x8c>)
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	4a11      	ldr	r2, [pc, #68]	; (8000740 <MRCC_enSysClkINIT+0x8c>)
 80006fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006fe:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= MRCC_APB1_PRESCALER_MODE;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MRCC_enSysClkINIT+0x8c>)
 8000702:	4a0f      	ldr	r2, [pc, #60]	; (8000740 <MRCC_enSysClkINIT+0x8c>)
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	6053      	str	r3, [r2, #4]

	/* MASK the APB2 and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= MRCC_APB2_MASK;
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <MRCC_enSysClkINIT+0x8c>)
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	4a0c      	ldr	r2, [pc, #48]	; (8000740 <MRCC_enSysClkINIT+0x8c>)
 800070e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000712:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= MRCC_APB2_PRESCALER_MODE;
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <MRCC_enSysClkINIT+0x8c>)
 8000716:	4a0a      	ldr	r2, [pc, #40]	; (8000740 <MRCC_enSysClkINIT+0x8c>)
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	6053      	str	r3, [r2, #4]

	/*MASK the ADC clk and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= MRCC_ADC_MASK;
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MRCC_enSysClkINIT+0x8c>)
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	4a07      	ldr	r2, [pc, #28]	; (8000740 <MRCC_enSysClkINIT+0x8c>)
 8000722:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000726:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= MRCC_ADC_PRESCALER_MODE;
 8000728:	4b05      	ldr	r3, [pc, #20]	; (8000740 <MRCC_enSysClkINIT+0x8c>)
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	4a04      	ldr	r2, [pc, #16]	; (8000740 <MRCC_enSysClkINIT+0x8c>)
 800072e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000732:	6053      	str	r3, [r2, #4]
		RCC->RCC_CFGR &= MRCC_MCO_MASK;
		RCC->RCC_CFGR |= MRCC_MCO_MODE ;
	}
#endif

	return SUCCESS;
 8000734:	2302      	movs	r3, #2
}
 8000736:	4618      	mov	r0, r3
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	40021000 	.word	0x40021000

08000744 <MRCC_enEnablePeripheralCLK>:
 * \Return value:   : ErrorState_t  -> SUCEESS
 * 								   -> OUT_OF_RANG_ERR
 *******************************************************************************/

ErrorState_t MRCC_enEnablePeripheralCLK(u8 copy_u8Peripheral)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
	ErrorState_t local_state = SUCCESS;
 800074e:	2302      	movs	r3, #2
 8000750:	73fb      	strb	r3, [r7, #15]

	/* based on predefined Peripheral, switch to corresponding Register, and Enabled it*/
	if (copy_u8Peripheral < MRCC_AHB_REG)
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b1f      	cmp	r3, #31
 8000756:	d80a      	bhi.n	800076e <MRCC_enEnablePeripheralCLK+0x2a>
		SET_BIT(RCC->RCC_AHBENR, copy_u8Peripheral);
 8000758:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MRCC_enEnablePeripheralCLK+0x80>)
 800075a:	695b      	ldr	r3, [r3, #20]
 800075c:	79fa      	ldrb	r2, [r7, #7]
 800075e:	2101      	movs	r1, #1
 8000760:	fa01 f202 	lsl.w	r2, r1, r2
 8000764:	4611      	mov	r1, r2
 8000766:	4a17      	ldr	r2, [pc, #92]	; (80007c4 <MRCC_enEnablePeripheralCLK+0x80>)
 8000768:	430b      	orrs	r3, r1
 800076a:	6153      	str	r3, [r2, #20]
 800076c:	e023      	b.n	80007b6 <MRCC_enEnablePeripheralCLK+0x72>

	else if (copy_u8Peripheral < MRCC_APB1_REG)
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b3f      	cmp	r3, #63	; 0x3f
 8000772:	d80d      	bhi.n	8000790 <MRCC_enEnablePeripheralCLK+0x4c>
	{
		copy_u8Peripheral -= MRCC_AHB_REG;
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	3b20      	subs	r3, #32
 8000778:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->RCC_APB1ENR, copy_u8Peripheral);
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MRCC_enEnablePeripheralCLK+0x80>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	79fa      	ldrb	r2, [r7, #7]
 8000780:	2101      	movs	r1, #1
 8000782:	fa01 f202 	lsl.w	r2, r1, r2
 8000786:	4611      	mov	r1, r2
 8000788:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <MRCC_enEnablePeripheralCLK+0x80>)
 800078a:	430b      	orrs	r3, r1
 800078c:	61d3      	str	r3, [r2, #28]
 800078e:	e012      	b.n	80007b6 <MRCC_enEnablePeripheralCLK+0x72>
	}

	else if (copy_u8Peripheral < MRCC_APB2_REG)
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2b5f      	cmp	r3, #95	; 0x5f
 8000794:	d80d      	bhi.n	80007b2 <MRCC_enEnablePeripheralCLK+0x6e>
	{
		copy_u8Peripheral -= MRCC_APB1_REG;
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	3b40      	subs	r3, #64	; 0x40
 800079a:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->RCC_APB2ENR, copy_u8Peripheral);
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MRCC_enEnablePeripheralCLK+0x80>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	79fa      	ldrb	r2, [r7, #7]
 80007a2:	2101      	movs	r1, #1
 80007a4:	fa01 f202 	lsl.w	r2, r1, r2
 80007a8:	4611      	mov	r1, r2
 80007aa:	4a06      	ldr	r2, [pc, #24]	; (80007c4 <MRCC_enEnablePeripheralCLK+0x80>)
 80007ac:	430b      	orrs	r3, r1
 80007ae:	6193      	str	r3, [r2, #24]
 80007b0:	e001      	b.n	80007b6 <MRCC_enEnablePeripheralCLK+0x72>
	}

	else
	{
		local_state = OUT_OF_RANG_ERR;
 80007b2:	2300      	movs	r3, #0
 80007b4:	73fb      	strb	r3, [r7, #15]
	}
	return local_state;
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3714      	adds	r7, #20
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000

080007c8 <SPI1_IRQHandler>:
 * @param	void
 * @retval	void
 */

void SPI1_IRQHandler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	if (MSPI_CALLBACK[MSPI1].callback_TxRx!= NULL)
 80007cc:	4b27      	ldr	r3, [pc, #156]	; (800086c <SPI1_IRQHandler+0xa4>)
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d046      	beq.n	8000862 <SPI1_IRQHandler+0x9a>
	{
		/* check if the Tx Buffer empty is fired, so copy the data and transmit it  */
		if ((GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_SR, TXE))&&(GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_CR2, MSPI_TXE_INT)))
 80007d4:	4b26      	ldr	r3, [pc, #152]	; (8000870 <SPI1_IRQHandler+0xa8>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	085b      	lsrs	r3, r3, #1
 80007dc:	f003 0301 	and.w	r3, r3, #1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d00d      	beq.n	8000800 <SPI1_IRQHandler+0x38>
 80007e4:	4b22      	ldr	r3, [pc, #136]	; (8000870 <SPI1_IRQHandler+0xa8>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	09db      	lsrs	r3, r3, #7
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d005      	beq.n	8000800 <SPI1_IRQHandler+0x38>
		{
			MSPI_CHANNELS[MSPI1]->SPI_DR = MSPI_CALLBACK[MSPI1].copy_u16Txdata;
 80007f4:	4b1d      	ldr	r3, [pc, #116]	; (800086c <SPI1_IRQHandler+0xa4>)
 80007f6:	881a      	ldrh	r2, [r3, #0]
 80007f8:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <SPI1_IRQHandler+0xa8>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	e030      	b.n	8000862 <SPI1_IRQHandler+0x9a>
		}

		/* check if the Rx buffer Not empty is fired and ready to receive,so return the data  */
		else if ((GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_SR, RXN))&&(GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_CR2, MSPI_RXNE_INT)))
 8000800:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <SPI1_IRQHandler+0xa8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	2b00      	cmp	r3, #0
 800080c:	d00e      	beq.n	800082c <SPI1_IRQHandler+0x64>
 800080e:	4b18      	ldr	r3, [pc, #96]	; (8000870 <SPI1_IRQHandler+0xa8>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	099b      	lsrs	r3, r3, #6
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	2b00      	cmp	r3, #0
 800081c:	d006      	beq.n	800082c <SPI1_IRQHandler+0x64>
		{
			MSPI_CALLBACK[MSPI1].ptr_u16Rxdata = (u16*)MSPI_CHANNELS[MSPI1]->SPI_DR ;
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <SPI1_IRQHandler+0xa8>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	461a      	mov	r2, r3
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <SPI1_IRQHandler+0xa4>)
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	e01a      	b.n	8000862 <SPI1_IRQHandler+0x9a>
		}

		/* check if the Mode Fault interrupt is fired, and notify it  */
		else if ((GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_SR, MODF))&&(GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_CR2, MSPI_ERR_INT)))
 800082c:	4b10      	ldr	r3, [pc, #64]	; (8000870 <SPI1_IRQHandler+0xa8>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	095b      	lsrs	r3, r3, #5
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	2b00      	cmp	r3, #0
 800083a:	d007      	beq.n	800084c <SPI1_IRQHandler+0x84>
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <SPI1_IRQHandler+0xa8>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	095b      	lsrs	r3, r3, #5
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	2b00      	cmp	r3, #0
 800084a:	d10a      	bne.n	8000862 <SPI1_IRQHandler+0x9a>
		{

		}

		/* check if the Mode Fault interrupt is fired, and notify it  */
		else if ((GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_SR, OVR))&&(GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_CR2, MSPI_ERR_INT)))
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <SPI1_IRQHandler+0xa8>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	689b      	ldr	r3, [r3, #8]
 8000852:	099b      	lsrs	r3, r3, #6
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	2b00      	cmp	r3, #0
 800085a:	d002      	beq.n	8000862 <SPI1_IRQHandler+0x9a>
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <SPI1_IRQHandler+0xa8>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
		{

		}
	}
	/* perform the Callback fun from the App */
	MSPI_CALLBACK[MSPI1].callback_TxRx();
 8000862:	4b02      	ldr	r3, [pc, #8]	; (800086c <SPI1_IRQHandler+0xa4>)
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	4798      	blx	r3
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000090 	.word	0x20000090
 8000870:	20000000 	.word	0x20000000

08000874 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	if (MSPI_CALLBACK[MSPI2].callback_TxRx!= NULL)
 8000878:	4b27      	ldr	r3, [pc, #156]	; (8000918 <SPI2_IRQHandler+0xa4>)
 800087a:	695b      	ldr	r3, [r3, #20]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d046      	beq.n	800090e <SPI2_IRQHandler+0x9a>
	{
		/* check if the Tx Buffer empty is fired, so copy the data and transmit it  */
		if ((GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_SR, TXE))&&(GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_CR2, MSPI_TXE_INT)))
 8000880:	4b26      	ldr	r3, [pc, #152]	; (800091c <SPI2_IRQHandler+0xa8>)
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	689b      	ldr	r3, [r3, #8]
 8000886:	085b      	lsrs	r3, r3, #1
 8000888:	f003 0301 	and.w	r3, r3, #1
 800088c:	2b00      	cmp	r3, #0
 800088e:	d00d      	beq.n	80008ac <SPI2_IRQHandler+0x38>
 8000890:	4b22      	ldr	r3, [pc, #136]	; (800091c <SPI2_IRQHandler+0xa8>)
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	09db      	lsrs	r3, r3, #7
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	2b00      	cmp	r3, #0
 800089e:	d005      	beq.n	80008ac <SPI2_IRQHandler+0x38>
		{
			MSPI_CHANNELS[MSPI2]->SPI_DR = MSPI_CALLBACK[MSPI2].copy_u16Txdata;
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <SPI2_IRQHandler+0xa4>)
 80008a2:	899a      	ldrh	r2, [r3, #12]
 80008a4:	4b1d      	ldr	r3, [pc, #116]	; (800091c <SPI2_IRQHandler+0xa8>)
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	e030      	b.n	800090e <SPI2_IRQHandler+0x9a>
		}

		/* check if the Rx buffer Not empty is fired and ready to receive,so return the data  */
		else if ((GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_SR, RXN))&&(GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_CR2, MSPI_RXNE_INT)))
 80008ac:	4b1b      	ldr	r3, [pc, #108]	; (800091c <SPI2_IRQHandler+0xa8>)
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d00e      	beq.n	80008d8 <SPI2_IRQHandler+0x64>
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <SPI2_IRQHandler+0xa8>)
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	099b      	lsrs	r3, r3, #6
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d006      	beq.n	80008d8 <SPI2_IRQHandler+0x64>
		{
			MSPI_CALLBACK[MSPI2].ptr_u16Rxdata = (u16*)MSPI_CHANNELS[MSPI2]->SPI_DR ;
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <SPI2_IRQHandler+0xa8>)
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	461a      	mov	r2, r3
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <SPI2_IRQHandler+0xa4>)
 80008d4:	611a      	str	r2, [r3, #16]
 80008d6:	e01a      	b.n	800090e <SPI2_IRQHandler+0x9a>
		}

		/* check if the Mode Fault interrupt is fired, and notify it  */
		else if ((GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_SR, MODF))&&(GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_CR2, MSPI_ERR_INT)))
 80008d8:	4b10      	ldr	r3, [pc, #64]	; (800091c <SPI2_IRQHandler+0xa8>)
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	095b      	lsrs	r3, r3, #5
 80008e0:	f003 0301 	and.w	r3, r3, #1
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d007      	beq.n	80008f8 <SPI2_IRQHandler+0x84>
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <SPI2_IRQHandler+0xa8>)
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	095b      	lsrs	r3, r3, #5
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d10a      	bne.n	800090e <SPI2_IRQHandler+0x9a>
		{

		}

		/* check if the Mode Fault interrupt is fired, and notify it  */
		else if ((GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_SR, OVR))&&(GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_CR2, MSPI_ERR_INT)))
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <SPI2_IRQHandler+0xa8>)
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	099b      	lsrs	r3, r3, #6
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	2b00      	cmp	r3, #0
 8000906:	d002      	beq.n	800090e <SPI2_IRQHandler+0x9a>
 8000908:	4b04      	ldr	r3, [pc, #16]	; (800091c <SPI2_IRQHandler+0xa8>)
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	685b      	ldr	r3, [r3, #4]
		{

		}
	}
	/* perform the Callback fun from the App */
	MSPI_CALLBACK[MSPI2].callback_TxRx();
 800090e:	4b02      	ldr	r3, [pc, #8]	; (8000918 <SPI2_IRQHandler+0xa4>)
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	4798      	blx	r3
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000090 	.word	0x20000090
 800091c:	20000000 	.word	0x20000000

08000920 <SysTick_Handler>:

/**********************************************************************************************************************
 * HANDLER
 *********************************************************************************************************************/
void SysTick_Handler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	 * 1. clear the temp var to ba able to set the INT flag by reading it
	 * 2. disable the TICK INT
	 * 3. disable the systick
	 * 4. clear the value register
	 * 5. call the APP call back function from MCAL Layer */
	local_u8temp = 0;
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <SysTick_Handler+0x54>)
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]
	if (global_u8flag == 1)
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <SysTick_Handler+0x58>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d10e      	bne.n	8000950 <SysTick_Handler+0x30>
	{
		CLR_BIT(STK->STK_CTRL, TICKINT);
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <SysTick_Handler+0x5c>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a11      	ldr	r2, [pc, #68]	; (800097c <SysTick_Handler+0x5c>)
 8000938:	f023 0302 	bic.w	r3, r3, #2
 800093c:	6013      	str	r3, [r2, #0]
		CLR_BIT(STK->STK_CTRL, ENABLE);
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <SysTick_Handler+0x5c>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a0e      	ldr	r2, [pc, #56]	; (800097c <SysTick_Handler+0x5c>)
 8000944:	f023 0301 	bic.w	r3, r3, #1
 8000948:	6013      	str	r3, [r2, #0]
		STK->STK_VAL = MSYSTICK_REG_CLEAR;
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <SysTick_Handler+0x5c>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
	}

	if (MSYSTICK_Callback != NULL)
 8000950:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <SysTick_Handler+0x60>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <SysTick_Handler+0x3e>
	{
		MSYSTICK_Callback();
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <SysTick_Handler+0x60>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4798      	blx	r3
	}

	local_u8temp = GET_BIT(STK->STK_CTRL,COUNTFLAG);
 800095e:	4b07      	ldr	r3, [pc, #28]	; (800097c <SysTick_Handler+0x5c>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	0c1b      	lsrs	r3, r3, #16
 8000964:	b2db      	uxtb	r3, r3
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	b2da      	uxtb	r2, r3
 800096c:	4b01      	ldr	r3, [pc, #4]	; (8000974 <SysTick_Handler+0x54>)
 800096e:	701a      	strb	r2, [r3, #0]
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	200000b7 	.word	0x200000b7
 8000978:	200000ac 	.word	0x200000ac
 800097c:	e000e010 	.word	0xe000e010
 8000980:	200000a8 	.word	0x200000a8

08000984 <TIM1_CC_IRQHandler>:
	}
	return SUCCESS;
}

void TIM1_CC_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	if (ICU_callback != NULL)
 8000988:	4b04      	ldr	r3, [pc, #16]	; (800099c <TIM1_CC_IRQHandler+0x18>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d002      	beq.n	8000996 <TIM1_CC_IRQHandler+0x12>
	{
		ICU_callback();
 8000990:	4b02      	ldr	r3, [pc, #8]	; (800099c <TIM1_CC_IRQHandler+0x18>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4798      	blx	r3
	}

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200000b0 	.word	0x200000b0

080009a0 <USART1_IRQHandler>:
 * 			when receiving data by interrupt, 1. get the first byte from the data register
 * 			2. check if that byte the ENDline byte, if so then reset the index and set the Rec_flag
 * 			3. if was not update the index to receieve the next byte */

void USART1_IRQHandler (void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
	if ((GET_BIT(USART_CH[MUSART1]->USART_SR, TXE)))
 80009a4:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <USART1_IRQHandler+0x98>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	09db      	lsrs	r3, r3, #7
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d018      	beq.n	80009e6 <USART1_IRQHandler+0x46>
	{
		uart_TxBufferIndex++;
 80009b4:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <USART1_IRQHandler+0x9c>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	3301      	adds	r3, #1
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <USART1_IRQHandler+0x9c>)
 80009be:	701a      	strb	r2, [r3, #0]
		if (uart_TxBUFFER[uart_TxBufferIndex] == MUSART_NULL_CHR)
 80009c0:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <USART1_IRQHandler+0x9c>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <USART1_IRQHandler+0xa0>)
 80009c8:	5c9b      	ldrb	r3, [r3, r2]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d103      	bne.n	80009d6 <USART1_IRQHandler+0x36>
		{
			uart_TxBufferIndex = 0;
 80009ce:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <USART1_IRQHandler+0x9c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
 80009d4:	e007      	b.n	80009e6 <USART1_IRQHandler+0x46>
		}
		else
		{
			USART_CH[MUSART1]->USART_DR =  uart_TxBUFFER[uart_TxBufferIndex];
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <USART1_IRQHandler+0x9c>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	461a      	mov	r2, r3
 80009dc:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <USART1_IRQHandler+0xa0>)
 80009de:	5c9a      	ldrb	r2, [r3, r2]
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <USART1_IRQHandler+0x98>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]

		}
	}

	if (GET_BIT(USART_CH[MUSART1]->USART_SR, RXNE))
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <USART1_IRQHandler+0x98>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	095b      	lsrs	r3, r3, #5
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d01c      	beq.n	8000a30 <USART1_IRQHandler+0x90>
	{
		uart_RxBUFFER[uart_RxBufferIndex] = USART_CH[MUSART1]->USART_DR ;
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <USART1_IRQHandler+0x98>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	6859      	ldr	r1, [r3, #4]
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <USART1_IRQHandler+0xa4>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	b2c9      	uxtb	r1, r1
 8000a04:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <USART1_IRQHandler+0xa8>)
 8000a06:	5499      	strb	r1, [r3, r2]

		if (uart_RxBUFFER[uart_RxBufferIndex] == MUSART_END_LINE)
 8000a08:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <USART1_IRQHandler+0xa4>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <USART1_IRQHandler+0xa8>)
 8000a10:	5c9b      	ldrb	r3, [r3, r2]
 8000a12:	2b23      	cmp	r3, #35	; 0x23
 8000a14:	d106      	bne.n	8000a24 <USART1_IRQHandler+0x84>
		{
			uart_RxBufferIndex = 0;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <USART1_IRQHandler+0xa4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
			Receive_Flag = 1;
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <USART1_IRQHandler+0xac>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	701a      	strb	r2, [r3, #0]
		else
		{
			uart_RxBufferIndex++;
		}
	}
}
 8000a22:	e005      	b.n	8000a30 <USART1_IRQHandler+0x90>
			uart_RxBufferIndex++;
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <USART1_IRQHandler+0xa4>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <USART1_IRQHandler+0xa4>)
 8000a2e:	701a      	strb	r2, [r3, #0]
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	200000b5 	.word	0x200000b5
 8000a40:	200000d4 	.word	0x200000d4
 8000a44:	200000b6 	.word	0x200000b6
 8000a48:	200000b8 	.word	0x200000b8
 8000a4c:	200000b4 	.word	0x200000b4

08000a50 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

	if ((GET_BIT(USART_CH[MUSART2]->USART_SR, TXE)))
 8000a54:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <USART2_IRQHandler+0x98>)
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	09db      	lsrs	r3, r3, #7
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d018      	beq.n	8000a96 <USART2_IRQHandler+0x46>
	{
		uart_TxBufferIndex++;
 8000a64:	4b21      	ldr	r3, [pc, #132]	; (8000aec <USART2_IRQHandler+0x9c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <USART2_IRQHandler+0x9c>)
 8000a6e:	701a      	strb	r2, [r3, #0]
		if (uart_TxBUFFER[uart_TxBufferIndex] == MUSART_NULL_CHR)
 8000a70:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <USART2_IRQHandler+0x9c>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b1e      	ldr	r3, [pc, #120]	; (8000af0 <USART2_IRQHandler+0xa0>)
 8000a78:	5c9b      	ldrb	r3, [r3, r2]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d103      	bne.n	8000a86 <USART2_IRQHandler+0x36>
		{
			uart_TxBufferIndex = 0;
 8000a7e:	4b1b      	ldr	r3, [pc, #108]	; (8000aec <USART2_IRQHandler+0x9c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]
 8000a84:	e007      	b.n	8000a96 <USART2_IRQHandler+0x46>
		}
		else
		{
			USART_CH[MUSART2]->USART_DR =  uart_TxBUFFER[uart_TxBufferIndex];
 8000a86:	4b19      	ldr	r3, [pc, #100]	; (8000aec <USART2_IRQHandler+0x9c>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <USART2_IRQHandler+0xa0>)
 8000a8e:	5c9a      	ldrb	r2, [r3, r2]
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <USART2_IRQHandler+0x98>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	605a      	str	r2, [r3, #4]

		}
	}

	if (GET_BIT(USART_CH[MUSART2]->USART_SR, RXNE))
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <USART2_IRQHandler+0x98>)
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	095b      	lsrs	r3, r3, #5
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d01c      	beq.n	8000ae0 <USART2_IRQHandler+0x90>
	{
		uart_RxBUFFER[uart_RxBufferIndex] = USART_CH[MUSART1]->USART_DR ;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <USART2_IRQHandler+0x98>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	6859      	ldr	r1, [r3, #4]
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <USART2_IRQHandler+0xa4>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	b2c9      	uxtb	r1, r1
 8000ab4:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <USART2_IRQHandler+0xa8>)
 8000ab6:	5499      	strb	r1, [r3, r2]

		if (uart_RxBUFFER[uart_RxBufferIndex] == MUSART_END_LINE)
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <USART2_IRQHandler+0xa4>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <USART2_IRQHandler+0xa8>)
 8000ac0:	5c9b      	ldrb	r3, [r3, r2]
 8000ac2:	2b23      	cmp	r3, #35	; 0x23
 8000ac4:	d106      	bne.n	8000ad4 <USART2_IRQHandler+0x84>
		{
			uart_RxBufferIndex = 0;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <USART2_IRQHandler+0xa4>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
			Receive_Flag = 1;
 8000acc:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <USART2_IRQHandler+0xac>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	701a      	strb	r2, [r3, #0]
		else
		{
			uart_RxBufferIndex++;
		}
	}
}
 8000ad2:	e005      	b.n	8000ae0 <USART2_IRQHandler+0x90>
			uart_RxBufferIndex++;
 8000ad4:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <USART2_IRQHandler+0xa4>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <USART2_IRQHandler+0xa4>)
 8000ade:	701a      	strb	r2, [r3, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	200000b5 	.word	0x200000b5
 8000af0:	200000d4 	.word	0x200000d4
 8000af4:	200000b6 	.word	0x200000b6
 8000af8:	200000b8 	.word	0x200000b8
 8000afc:	200000b4 	.word	0x200000b4

08000b00 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
	if ((GET_BIT(USART_CH[MUSART3]->USART_SR, TXE)))
 8000b04:	4b24      	ldr	r3, [pc, #144]	; (8000b98 <USART3_IRQHandler+0x98>)
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	09db      	lsrs	r3, r3, #7
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d018      	beq.n	8000b46 <USART3_IRQHandler+0x46>
	{
		uart_TxBufferIndex++;
 8000b14:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <USART3_IRQHandler+0x9c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <USART3_IRQHandler+0x9c>)
 8000b1e:	701a      	strb	r2, [r3, #0]
		if (uart_TxBUFFER[uart_TxBufferIndex] == MUSART_NULL_CHR)
 8000b20:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <USART3_IRQHandler+0x9c>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b1e      	ldr	r3, [pc, #120]	; (8000ba0 <USART3_IRQHandler+0xa0>)
 8000b28:	5c9b      	ldrb	r3, [r3, r2]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d103      	bne.n	8000b36 <USART3_IRQHandler+0x36>
		{
			uart_TxBufferIndex = 0;
 8000b2e:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <USART3_IRQHandler+0x9c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]
 8000b34:	e007      	b.n	8000b46 <USART3_IRQHandler+0x46>
		}
		else
		{
			USART_CH[MUSART3]->USART_DR =  uart_TxBUFFER[uart_TxBufferIndex];
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <USART3_IRQHandler+0x9c>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <USART3_IRQHandler+0xa0>)
 8000b3e:	5c9a      	ldrb	r2, [r3, r2]
 8000b40:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <USART3_IRQHandler+0x98>)
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	605a      	str	r2, [r3, #4]
		}
	}

	if (GET_BIT(USART_CH[MUSART3]->USART_SR, RXNE))
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <USART3_IRQHandler+0x98>)
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	095b      	lsrs	r3, r3, #5
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d01c      	beq.n	8000b90 <USART3_IRQHandler+0x90>
	{
		uart_RxBUFFER[uart_RxBufferIndex] = USART_CH[MUSART3]->USART_DR ;
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <USART3_IRQHandler+0x98>)
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	6859      	ldr	r1, [r3, #4]
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <USART3_IRQHandler+0xa4>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	b2c9      	uxtb	r1, r1
 8000b64:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <USART3_IRQHandler+0xa8>)
 8000b66:	5499      	strb	r1, [r3, r2]

		if (uart_RxBUFFER[uart_RxBufferIndex] == MUSART_END_LINE)
 8000b68:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <USART3_IRQHandler+0xa4>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <USART3_IRQHandler+0xa8>)
 8000b70:	5c9b      	ldrb	r3, [r3, r2]
 8000b72:	2b23      	cmp	r3, #35	; 0x23
 8000b74:	d106      	bne.n	8000b84 <USART3_IRQHandler+0x84>
		{
			uart_RxBufferIndex = 0;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <USART3_IRQHandler+0xa4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
			Receive_Flag = 1;
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <USART3_IRQHandler+0xac>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	701a      	strb	r2, [r3, #0]
		else
		{
			uart_RxBufferIndex++;
		}
	}
}
 8000b82:	e005      	b.n	8000b90 <USART3_IRQHandler+0x90>
			uart_RxBufferIndex++;
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <USART3_IRQHandler+0xa4>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <USART3_IRQHandler+0xa4>)
 8000b8e:	701a      	strb	r2, [r3, #0]
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	200000b5 	.word	0x200000b5
 8000ba0:	200000d4 	.word	0x200000d4
 8000ba4:	200000b6 	.word	0x200000b6
 8000ba8:	200000b8 	.word	0x200000b8
 8000bac:	200000b4 	.word	0x200000b4

08000bb0 <main>:
/****************************************************************/

#include "App_int.h"

int main(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	App_voidstartApp();
 8000bb4:	f7ff fadc 	bl	8000170 <App_voidstartApp>
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bc2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bc4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc8:	480c      	ldr	r0, [pc, #48]	; (8000bfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000bca:	490d      	ldr	r1, [pc, #52]	; (8000c00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <LoopForever+0xe>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be0:	4c0a      	ldr	r4, [pc, #40]	; (8000c0c <LoopForever+0x16>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bee:	f000 f811 	bl	8000c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bf2:	f7ff ffdd 	bl	8000bb0 <main>

08000bf6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf6:	e7fe      	b.n	8000bf6 <LoopForever>
  ldr   r0, =_estack
 8000bf8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000c04:	08000c7c 	.word	0x08000c7c
  ldr r2, =_sbss
 8000c08:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000c0c:	200000f0 	.word	0x200000f0

08000c10 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC3_IRQHandler>
	...

08000c14 <__libc_init_array>:
 8000c14:	b570      	push	{r4, r5, r6, lr}
 8000c16:	2600      	movs	r6, #0
 8000c18:	4d0c      	ldr	r5, [pc, #48]	; (8000c4c <__libc_init_array+0x38>)
 8000c1a:	4c0d      	ldr	r4, [pc, #52]	; (8000c50 <__libc_init_array+0x3c>)
 8000c1c:	1b64      	subs	r4, r4, r5
 8000c1e:	10a4      	asrs	r4, r4, #2
 8000c20:	42a6      	cmp	r6, r4
 8000c22:	d109      	bne.n	8000c38 <__libc_init_array+0x24>
 8000c24:	f000 f81a 	bl	8000c5c <_init>
 8000c28:	2600      	movs	r6, #0
 8000c2a:	4d0a      	ldr	r5, [pc, #40]	; (8000c54 <__libc_init_array+0x40>)
 8000c2c:	4c0a      	ldr	r4, [pc, #40]	; (8000c58 <__libc_init_array+0x44>)
 8000c2e:	1b64      	subs	r4, r4, r5
 8000c30:	10a4      	asrs	r4, r4, #2
 8000c32:	42a6      	cmp	r6, r4
 8000c34:	d105      	bne.n	8000c42 <__libc_init_array+0x2e>
 8000c36:	bd70      	pop	{r4, r5, r6, pc}
 8000c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c3c:	4798      	blx	r3
 8000c3e:	3601      	adds	r6, #1
 8000c40:	e7ee      	b.n	8000c20 <__libc_init_array+0xc>
 8000c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c46:	4798      	blx	r3
 8000c48:	3601      	adds	r6, #1
 8000c4a:	e7f2      	b.n	8000c32 <__libc_init_array+0x1e>
 8000c4c:	08000c74 	.word	0x08000c74
 8000c50:	08000c74 	.word	0x08000c74
 8000c54:	08000c74 	.word	0x08000c74
 8000c58:	08000c78 	.word	0x08000c78

08000c5c <_init>:
 8000c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c5e:	bf00      	nop
 8000c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c62:	bc08      	pop	{r3}
 8000c64:	469e      	mov	lr, r3
 8000c66:	4770      	bx	lr

08000c68 <_fini>:
 8000c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c6a:	bf00      	nop
 8000c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c6e:	bc08      	pop	{r3}
 8000c70:	469e      	mov	lr, r3
 8000c72:	4770      	bx	lr
