
STM32F103C8-Drives.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b80  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cb0  08000cb0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000cb0  08000cb0  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08000cb0  08000cb0  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cb0  08000cb0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cb0  08000cb0  00010cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cb4  08000cb4  00010cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08000cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000014  08000ccc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08000ccc  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000029db  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c22  00000000  00000000  00022a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000408  00000000  00000000  00023640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000350  00000000  00000000  00023a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001853  00000000  00000000  00023d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002a8a  00000000  00000000  000255eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00006a05  00000000  00000000  00028075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0002ea7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dc4  00000000  00000000  0002ead0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000014 	.word	0x20000014
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c98 	.word	0x08000c98

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000018 	.word	0x20000018
 800016c:	08000c98 	.word	0x08000c98

08000170 <App_voidstartApp>:
 * \Parameters (in) : None
 *
 * \Return value:   : None
 *******************************************************************************/
void App_voidstartApp(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

	/* test bunch of fuction together and sum alone to verify the result
	 * with debbuger, here i verify functions and normal, nesting interrupt
	 * by changing the prioritry of the ex-interrupt
	 */
	MRCC_enSysClkINIT();
 8000174:	f000 fad6 	bl	8000724 <MRCC_enSysClkINIT>
	MRCC_enEnablePeripheralCLK(MRCC_IOPA);
 8000178:	2042      	movs	r0, #66	; 0x42
 800017a:	f000 fb0f 	bl	800079c <MRCC_enEnablePeripheralCLK>
	MNVIC_enEnableNVIC();
 800017e:	f000 fa1f 	bl	80005c0 <MNVIC_enEnableNVIC>

	MGPIO_enSetPinDirection(PORTA, PIN0, OUT_2MHZ_PUSH_PULL);
 8000182:	2202      	movs	r2, #2
 8000184:	2100      	movs	r1, #0
 8000186:	2000      	movs	r0, #0
 8000188:	f000 f940 	bl	800040c <MGPIO_enSetPinDirection>
	MGPIO_enSetPinDirection(PORTA, PIN1, OUT_2MHZ_PUSH_PULL);
 800018c:	2202      	movs	r2, #2
 800018e:	2101      	movs	r1, #1
 8000190:	2000      	movs	r0, #0
 8000192:	f000 f93b 	bl	800040c <MGPIO_enSetPinDirection>
	MGPIO_enSetPinDirection(PORTA, PIN2, OUT_2MHZ_PUSH_PULL);
 8000196:	2202      	movs	r2, #2
 8000198:	2102      	movs	r1, #2
 800019a:	2000      	movs	r0, #0
 800019c:	f000 f936 	bl	800040c <MGPIO_enSetPinDirection>

	MNVIC_enSetPriority(MNVIC_EXT0_INT,2,0);
 80001a0:	2200      	movs	r2, #0
 80001a2:	2102      	movs	r1, #2
 80001a4:	2006      	movs	r0, #6
 80001a6:	f000 fa67 	bl	8000678 <MNVIC_enSetPriority>
	MNVIC_enSetPriority(MNVIC_EXT1_INT,1,0);
 80001aa:	2200      	movs	r2, #0
 80001ac:	2101      	movs	r1, #1
 80001ae:	2007      	movs	r0, #7
 80001b0:	f000 fa62 	bl	8000678 <MNVIC_enSetPriority>

	MNVIC_enEnableInt(MNVIC_EXT1_INT);
 80001b4:	2007      	movs	r0, #7
 80001b6:	f000 fa11 	bl	80005dc <MNVIC_enEnableInt>
	MNVIC_enEnableInt(MNVIC_EXT0_INT);
 80001ba:	2006      	movs	r0, #6
 80001bc:	f000 fa0e 	bl	80005dc <MNVIC_enEnableInt>

	MNVIC_enSetPendingFlag(MNVIC_EXT0_INT);
 80001c0:	2006      	movs	r0, #6
 80001c2:	f000 fa31 	bl	8000628 <MNVIC_enSetPendingFlag>
	MNVIC_enGetActiveFlag(EXT1_INT, &active);
	MNVIC_enClrPendingFlag(EXT1_INT);
	MNVIC_enGetPendingFlag(EXT1_INT, &pending);
#endif

	while(1)
 80001c6:	e7fe      	b.n	80001c6 <App_voidstartApp+0x56>

080001c8 <ADC1_2_IRQHandler>:
/********************************************************************************
 * HANDLEAR IMPLEMENTATION
 ********************************************************************************/

void ADC1_2_IRQHandler(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	if (ADC_CallBack != NULL)
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <ADC1_2_IRQHandler+0x24>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d008      	beq.n	80001e6 <ADC1_2_IRQHandler+0x1e>
	{
		if (GET_BIT(ADC->ADC_SR, EOC))
 80001d4:	4b06      	ldr	r3, [pc, #24]	; (80001f0 <ADC1_2_IRQHandler+0x28>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	085b      	lsrs	r3, r3, #1
 80001da:	f003 0301 	and.w	r3, r3, #1
 80001de:	2b00      	cmp	r3, #0
		}
		else if (GET_BIT(ADC->ADC_SR, JEOC))
		{

		}
		ADC_CallBack();
 80001e0:	4b02      	ldr	r3, [pc, #8]	; (80001ec <ADC1_2_IRQHandler+0x24>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4798      	blx	r3
	}
}
 80001e6:	bf00      	nop
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	20000030 	.word	0x20000030
 80001f0:	40012400 	.word	0x40012400

080001f4 <DMA1_Channel1_IRQHandler>:
}



void DMA1_Channel1_IRQHandler(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	if (DMA_CallBack[Channel1] != NULL)
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <DMA1_Channel1_IRQHandler+0x18>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d002      	beq.n	8000206 <DMA1_Channel1_IRQHandler+0x12>
	{
		DMA_CallBack[Channel1]();
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <DMA1_Channel1_IRQHandler+0x18>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4798      	blx	r3
	}
}
 8000206:	bf00      	nop
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	20000034 	.word	0x20000034

08000210 <DMA1_Channel2_IRQHandler>:

void DMA1_Channel2_IRQHandler(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	if (DMA_CallBack[Channel2] != NULL)
 8000214:	4b04      	ldr	r3, [pc, #16]	; (8000228 <DMA1_Channel2_IRQHandler+0x18>)
 8000216:	685b      	ldr	r3, [r3, #4]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d002      	beq.n	8000222 <DMA1_Channel2_IRQHandler+0x12>
	{
		DMA_CallBack[Channel2]();
 800021c:	4b02      	ldr	r3, [pc, #8]	; (8000228 <DMA1_Channel2_IRQHandler+0x18>)
 800021e:	685b      	ldr	r3, [r3, #4]
 8000220:	4798      	blx	r3
	}
}
 8000222:	bf00      	nop
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	20000034 	.word	0x20000034

0800022c <DMA1_Channel3_IRQHandler>:

void DMA1_Channel3_IRQHandler(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	if (DMA_CallBack[Channel3] != NULL)
 8000230:	4b04      	ldr	r3, [pc, #16]	; (8000244 <DMA1_Channel3_IRQHandler+0x18>)
 8000232:	689b      	ldr	r3, [r3, #8]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d002      	beq.n	800023e <DMA1_Channel3_IRQHandler+0x12>
	{
		DMA_CallBack[Channel3]();
 8000238:	4b02      	ldr	r3, [pc, #8]	; (8000244 <DMA1_Channel3_IRQHandler+0x18>)
 800023a:	689b      	ldr	r3, [r3, #8]
 800023c:	4798      	blx	r3
	}
}
 800023e:	bf00      	nop
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	20000034 	.word	0x20000034

08000248 <DMA1_Channel4_IRQHandler>:

void DMA1_Channel4_IRQHandler(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	if (DMA_CallBack[Channel4] != NULL)
 800024c:	4b04      	ldr	r3, [pc, #16]	; (8000260 <DMA1_Channel4_IRQHandler+0x18>)
 800024e:	68db      	ldr	r3, [r3, #12]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d002      	beq.n	800025a <DMA1_Channel4_IRQHandler+0x12>
	{
		DMA_CallBack[Channel4]();
 8000254:	4b02      	ldr	r3, [pc, #8]	; (8000260 <DMA1_Channel4_IRQHandler+0x18>)
 8000256:	68db      	ldr	r3, [r3, #12]
 8000258:	4798      	blx	r3
	}
}
 800025a:	bf00      	nop
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	20000034 	.word	0x20000034

08000264 <DMA1_Channel5_IRQHandler>:

void DMA1_Channel5_IRQHandler(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	if (DMA_CallBack[Channel5] != NULL)
 8000268:	4b04      	ldr	r3, [pc, #16]	; (800027c <DMA1_Channel5_IRQHandler+0x18>)
 800026a:	691b      	ldr	r3, [r3, #16]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d002      	beq.n	8000276 <DMA1_Channel5_IRQHandler+0x12>
	{
		DMA_CallBack[Channel5]();
 8000270:	4b02      	ldr	r3, [pc, #8]	; (800027c <DMA1_Channel5_IRQHandler+0x18>)
 8000272:	691b      	ldr	r3, [r3, #16]
 8000274:	4798      	blx	r3
	}
}
 8000276:	bf00      	nop
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	20000034 	.word	0x20000034

08000280 <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	if (DMA_CallBack[Channel6] != NULL)
 8000284:	4b04      	ldr	r3, [pc, #16]	; (8000298 <DMA1_Channel6_IRQHandler+0x18>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d002      	beq.n	8000292 <DMA1_Channel6_IRQHandler+0x12>
	{
		DMA_CallBack[Channel6]();
 800028c:	4b02      	ldr	r3, [pc, #8]	; (8000298 <DMA1_Channel6_IRQHandler+0x18>)
 800028e:	695b      	ldr	r3, [r3, #20]
 8000290:	4798      	blx	r3
	}
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000034 	.word	0x20000034

0800029c <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	if (DMA_CallBack[Channel7] != NULL)
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <DMA1_Channel7_IRQHandler+0x18>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d002      	beq.n	80002ae <DMA1_Channel7_IRQHandler+0x12>
	{
		DMA_CallBack[Channel7]();
 80002a8:	4b02      	ldr	r3, [pc, #8]	; (80002b4 <DMA1_Channel7_IRQHandler+0x18>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	4798      	blx	r3
	}
}
 80002ae:	bf00      	nop
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	20000034 	.word	0x20000034

080002b8 <EXTI0_IRQHandler>:
 *********************************************************************************************************************/
/*	@brief 	Handlear has an callback fun from the App layer and Excecuted based on
 * 			the Selected Line on the Callback fun. */

void EXTI0_IRQHandler(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI0_LINE] != NULL)
 80002bc:	4b04      	ldr	r3, [pc, #16]	; (80002d0 <EXTI0_IRQHandler+0x18>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d002      	beq.n	80002ca <EXTI0_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI0_LINE]();
 80002c4:	4b02      	ldr	r3, [pc, #8]	; (80002d0 <EXTI0_IRQHandler+0x18>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4798      	blx	r3
	}
}
 80002ca:	bf00      	nop
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	20000050 	.word	0x20000050

080002d4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI1_LINE] != NULL)
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <EXTI1_IRQHandler+0x18>)
 80002da:	685b      	ldr	r3, [r3, #4]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d002      	beq.n	80002e6 <EXTI1_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI1_LINE]();
 80002e0:	4b02      	ldr	r3, [pc, #8]	; (80002ec <EXTI1_IRQHandler+0x18>)
 80002e2:	685b      	ldr	r3, [r3, #4]
 80002e4:	4798      	blx	r3
	}

}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	20000050 	.word	0x20000050

080002f0 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI2_LINE] != NULL)
 80002f4:	4b04      	ldr	r3, [pc, #16]	; (8000308 <EXTI2_IRQHandler+0x18>)
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d002      	beq.n	8000302 <EXTI2_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI2_LINE]();
 80002fc:	4b02      	ldr	r3, [pc, #8]	; (8000308 <EXTI2_IRQHandler+0x18>)
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	4798      	blx	r3
	}
}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	20000050 	.word	0x20000050

0800030c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI3_LINE] != NULL)
 8000310:	4b04      	ldr	r3, [pc, #16]	; (8000324 <EXTI3_IRQHandler+0x18>)
 8000312:	68db      	ldr	r3, [r3, #12]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d002      	beq.n	800031e <EXTI3_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI3_LINE]();
 8000318:	4b02      	ldr	r3, [pc, #8]	; (8000324 <EXTI3_IRQHandler+0x18>)
 800031a:	68db      	ldr	r3, [r3, #12]
 800031c:	4798      	blx	r3
	}
}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000050 	.word	0x20000050

08000328 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI4_LINE] != NULL)
 800032c:	4b04      	ldr	r3, [pc, #16]	; (8000340 <EXTI4_IRQHandler+0x18>)
 800032e:	691b      	ldr	r3, [r3, #16]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d002      	beq.n	800033a <EXTI4_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI4_LINE]();
 8000334:	4b02      	ldr	r3, [pc, #8]	; (8000340 <EXTI4_IRQHandler+0x18>)
 8000336:	691b      	ldr	r3, [r3, #16]
 8000338:	4798      	blx	r3
	}
}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20000050 	.word	0x20000050

08000344 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI5_LINE] != NULL)
 8000348:	4b14      	ldr	r3, [pc, #80]	; (800039c <EXTI9_5_IRQHandler+0x58>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d003      	beq.n	8000358 <EXTI9_5_IRQHandler+0x14>
	{
		MEXTI_CALLBACK[MEXTI5_LINE]();
 8000350:	4b12      	ldr	r3, [pc, #72]	; (800039c <EXTI9_5_IRQHandler+0x58>)
 8000352:	695b      	ldr	r3, [r3, #20]
 8000354:	4798      	blx	r3
	else if (MEXTI_CALLBACK[MEXTI9_LINE] != NULL)
	{
		MEXTI_CALLBACK[MEXTI9_LINE]();

	}
}
 8000356:	e01e      	b.n	8000396 <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI6_LINE] != NULL)
 8000358:	4b10      	ldr	r3, [pc, #64]	; (800039c <EXTI9_5_IRQHandler+0x58>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d003      	beq.n	8000368 <EXTI9_5_IRQHandler+0x24>
		MEXTI_CALLBACK[MEXTI6_LINE]();
 8000360:	4b0e      	ldr	r3, [pc, #56]	; (800039c <EXTI9_5_IRQHandler+0x58>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4798      	blx	r3
}
 8000366:	e016      	b.n	8000396 <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI7_LINE] != NULL)
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <EXTI9_5_IRQHandler+0x58>)
 800036a:	69db      	ldr	r3, [r3, #28]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d003      	beq.n	8000378 <EXTI9_5_IRQHandler+0x34>
		MEXTI_CALLBACK[MEXTI7_LINE]();
 8000370:	4b0a      	ldr	r3, [pc, #40]	; (800039c <EXTI9_5_IRQHandler+0x58>)
 8000372:	69db      	ldr	r3, [r3, #28]
 8000374:	4798      	blx	r3
}
 8000376:	e00e      	b.n	8000396 <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI8_LINE] != NULL)
 8000378:	4b08      	ldr	r3, [pc, #32]	; (800039c <EXTI9_5_IRQHandler+0x58>)
 800037a:	6a1b      	ldr	r3, [r3, #32]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d003      	beq.n	8000388 <EXTI9_5_IRQHandler+0x44>
		MEXTI_CALLBACK[MEXTI8_LINE]();
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <EXTI9_5_IRQHandler+0x58>)
 8000382:	6a1b      	ldr	r3, [r3, #32]
 8000384:	4798      	blx	r3
}
 8000386:	e006      	b.n	8000396 <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI9_LINE] != NULL)
 8000388:	4b04      	ldr	r3, [pc, #16]	; (800039c <EXTI9_5_IRQHandler+0x58>)
 800038a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800038c:	2b00      	cmp	r3, #0
 800038e:	d002      	beq.n	8000396 <EXTI9_5_IRQHandler+0x52>
		MEXTI_CALLBACK[MEXTI9_LINE]();
 8000390:	4b02      	ldr	r3, [pc, #8]	; (800039c <EXTI9_5_IRQHandler+0x58>)
 8000392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000394:	4798      	blx	r3
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000050 	.word	0x20000050

080003a0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI10_LINE] != NULL)
 80003a4:	4b18      	ldr	r3, [pc, #96]	; (8000408 <EXTI15_10_IRQHandler+0x68>)
 80003a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d003      	beq.n	80003b4 <EXTI15_10_IRQHandler+0x14>
	{
		MEXTI_CALLBACK[MEXTI10_LINE]();
 80003ac:	4b16      	ldr	r3, [pc, #88]	; (8000408 <EXTI15_10_IRQHandler+0x68>)
 80003ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003b0:	4798      	blx	r3
	else if (MEXTI_CALLBACK[MEXTI15_LINE] != NULL)
	{
		MEXTI_CALLBACK[MEXTI15_LINE]();

	}
}
 80003b2:	e026      	b.n	8000402 <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI11_LINE] != NULL)
 80003b4:	4b14      	ldr	r3, [pc, #80]	; (8000408 <EXTI15_10_IRQHandler+0x68>)
 80003b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d003      	beq.n	80003c4 <EXTI15_10_IRQHandler+0x24>
		MEXTI_CALLBACK[MEXTI11_LINE]();
 80003bc:	4b12      	ldr	r3, [pc, #72]	; (8000408 <EXTI15_10_IRQHandler+0x68>)
 80003be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003c0:	4798      	blx	r3
}
 80003c2:	e01e      	b.n	8000402 <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI12_LINE] != NULL)
 80003c4:	4b10      	ldr	r3, [pc, #64]	; (8000408 <EXTI15_10_IRQHandler+0x68>)
 80003c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d003      	beq.n	80003d4 <EXTI15_10_IRQHandler+0x34>
		MEXTI_CALLBACK[MEXTI12_LINE]();
 80003cc:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <EXTI15_10_IRQHandler+0x68>)
 80003ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d0:	4798      	blx	r3
}
 80003d2:	e016      	b.n	8000402 <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI13_LINE] != NULL)
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <EXTI15_10_IRQHandler+0x68>)
 80003d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d003      	beq.n	80003e4 <EXTI15_10_IRQHandler+0x44>
		MEXTI_CALLBACK[MEXTI13_LINE]();
 80003dc:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <EXTI15_10_IRQHandler+0x68>)
 80003de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003e0:	4798      	blx	r3
}
 80003e2:	e00e      	b.n	8000402 <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI14_LINE] != NULL)
 80003e4:	4b08      	ldr	r3, [pc, #32]	; (8000408 <EXTI15_10_IRQHandler+0x68>)
 80003e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d003      	beq.n	80003f4 <EXTI15_10_IRQHandler+0x54>
		MEXTI_CALLBACK[MEXTI14_LINE]();
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <EXTI15_10_IRQHandler+0x68>)
 80003ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003f0:	4798      	blx	r3
}
 80003f2:	e006      	b.n	8000402 <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI15_LINE] != NULL)
 80003f4:	4b04      	ldr	r3, [pc, #16]	; (8000408 <EXTI15_10_IRQHandler+0x68>)
 80003f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d002      	beq.n	8000402 <EXTI15_10_IRQHandler+0x62>
		MEXTI_CALLBACK[MEXTI15_LINE]();
 80003fc:	4b02      	ldr	r3, [pc, #8]	; (8000408 <EXTI15_10_IRQHandler+0x68>)
 80003fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000400:	4798      	blx	r3
}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	20000050 	.word	0x20000050

0800040c <MGPIO_enSetPinDirection>:
 *
 * \Return value:   : ErrorState_t  -> SUCEESS
 * 								   -> OUT_OF_RANG_ERR
 *******************************************************************************/
ErrorState_t MGPIO_enSetPinDirection(MGPIO_PORT_t copy_u8port, MGPIO_PIN_t copy_u8pin, u8 copy_u8Mode)
{
 800040c:	b480      	push	{r7}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	71fb      	strb	r3, [r7, #7]
 8000416:	460b      	mov	r3, r1
 8000418:	71bb      	strb	r3, [r7, #6]
 800041a:	4613      	mov	r3, r2
 800041c:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 800041e:	2302      	movs	r3, #2
 8000420:	73fb      	strb	r3, [r7, #15]
	 * 	3. Set the 4bit Configuration with the Selected Mode
	 *
	 * 	@اhint 	use 4bit Masked pins to clear and shifting it correspoinding with
	 * 			the Gpio pin and use that offest when setting the Mode
	 * */
	switch(copy_u8port)
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	2b02      	cmp	r3, #2
 8000426:	d07f      	beq.n	8000528 <MGPIO_enSetPinDirection+0x11c>
 8000428:	2b02      	cmp	r3, #2
 800042a:	f300 80b9 	bgt.w	80005a0 <MGPIO_enSetPinDirection+0x194>
 800042e:	2b00      	cmp	r3, #0
 8000430:	d002      	beq.n	8000438 <MGPIO_enSetPinDirection+0x2c>
 8000432:	2b01      	cmp	r3, #1
 8000434:	d03c      	beq.n	80004b0 <MGPIO_enSetPinDirection+0xa4>
 8000436:	e0b3      	b.n	80005a0 <MGPIO_enSetPinDirection+0x194>
	{
	case PORTA:
		if (copy_u8pin < MGPIO_CRL_MAX)
 8000438:	79bb      	ldrb	r3, [r7, #6]
 800043a:	2b07      	cmp	r3, #7
 800043c:	d817      	bhi.n	800046e <MGPIO_enSetPinDirection+0x62>
		{
			GPIOA->GPIO_CRL &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET)) ;
 800043e:	4b5d      	ldr	r3, [pc, #372]	; (80005b4 <MGPIO_enSetPinDirection+0x1a8>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	79ba      	ldrb	r2, [r7, #6]
 8000444:	0092      	lsls	r2, r2, #2
 8000446:	210f      	movs	r1, #15
 8000448:	fa01 f202 	lsl.w	r2, r1, r2
 800044c:	43d2      	mvns	r2, r2
 800044e:	4611      	mov	r1, r2
 8000450:	4a58      	ldr	r2, [pc, #352]	; (80005b4 <MGPIO_enSetPinDirection+0x1a8>)
 8000452:	400b      	ands	r3, r1
 8000454:	6013      	str	r3, [r2, #0]
			GPIOA->GPIO_CRL |= copy_u8Mode << (copy_u8pin * MGPIO_OFFSET) ;
 8000456:	4b57      	ldr	r3, [pc, #348]	; (80005b4 <MGPIO_enSetPinDirection+0x1a8>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	7979      	ldrb	r1, [r7, #5]
 800045c:	79ba      	ldrb	r2, [r7, #6]
 800045e:	0092      	lsls	r2, r2, #2
 8000460:	fa01 f202 	lsl.w	r2, r1, r2
 8000464:	4611      	mov	r1, r2
 8000466:	4a53      	ldr	r2, [pc, #332]	; (80005b4 <MGPIO_enSetPinDirection+0x1a8>)
 8000468:	430b      	orrs	r3, r1
 800046a:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 800046c:	e09b      	b.n	80005a6 <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < MGPIO_CRH_MAX)
 800046e:	79bb      	ldrb	r3, [r7, #6]
 8000470:	2b0f      	cmp	r3, #15
 8000472:	d81a      	bhi.n	80004aa <MGPIO_enSetPinDirection+0x9e>
			copy_u8pin -= MGPIO_CRL_MAX  ;
 8000474:	79bb      	ldrb	r3, [r7, #6]
 8000476:	3b08      	subs	r3, #8
 8000478:	71bb      	strb	r3, [r7, #6]
			GPIOA->GPIO_CRH &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET));
 800047a:	4b4e      	ldr	r3, [pc, #312]	; (80005b4 <MGPIO_enSetPinDirection+0x1a8>)
 800047c:	685b      	ldr	r3, [r3, #4]
 800047e:	79ba      	ldrb	r2, [r7, #6]
 8000480:	0092      	lsls	r2, r2, #2
 8000482:	210f      	movs	r1, #15
 8000484:	fa01 f202 	lsl.w	r2, r1, r2
 8000488:	43d2      	mvns	r2, r2
 800048a:	4611      	mov	r1, r2
 800048c:	4a49      	ldr	r2, [pc, #292]	; (80005b4 <MGPIO_enSetPinDirection+0x1a8>)
 800048e:	400b      	ands	r3, r1
 8000490:	6053      	str	r3, [r2, #4]
			GPIOA->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET));
 8000492:	4b48      	ldr	r3, [pc, #288]	; (80005b4 <MGPIO_enSetPinDirection+0x1a8>)
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	7979      	ldrb	r1, [r7, #5]
 8000498:	79ba      	ldrb	r2, [r7, #6]
 800049a:	0092      	lsls	r2, r2, #2
 800049c:	fa01 f202 	lsl.w	r2, r1, r2
 80004a0:	4611      	mov	r1, r2
 80004a2:	4a44      	ldr	r2, [pc, #272]	; (80005b4 <MGPIO_enSetPinDirection+0x1a8>)
 80004a4:	430b      	orrs	r3, r1
 80004a6:	6053      	str	r3, [r2, #4]
		break;
 80004a8:	e07d      	b.n	80005a6 <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 80004aa:	2300      	movs	r3, #0
 80004ac:	73fb      	strb	r3, [r7, #15]
		break;
 80004ae:	e07a      	b.n	80005a6 <MGPIO_enSetPinDirection+0x19a>

	case PORTB:
		if (copy_u8pin < MGPIO_CRL_MAX)
 80004b0:	79bb      	ldrb	r3, [r7, #6]
 80004b2:	2b07      	cmp	r3, #7
 80004b4:	d817      	bhi.n	80004e6 <MGPIO_enSetPinDirection+0xda>
		{
			GPIOB->GPIO_CRL &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET)) ;
 80004b6:	4b40      	ldr	r3, [pc, #256]	; (80005b8 <MGPIO_enSetPinDirection+0x1ac>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	79ba      	ldrb	r2, [r7, #6]
 80004bc:	0092      	lsls	r2, r2, #2
 80004be:	210f      	movs	r1, #15
 80004c0:	fa01 f202 	lsl.w	r2, r1, r2
 80004c4:	43d2      	mvns	r2, r2
 80004c6:	4611      	mov	r1, r2
 80004c8:	4a3b      	ldr	r2, [pc, #236]	; (80005b8 <MGPIO_enSetPinDirection+0x1ac>)
 80004ca:	400b      	ands	r3, r1
 80004cc:	6013      	str	r3, [r2, #0]
			GPIOB->GPIO_CRL |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET)) ;
 80004ce:	4b3a      	ldr	r3, [pc, #232]	; (80005b8 <MGPIO_enSetPinDirection+0x1ac>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	7979      	ldrb	r1, [r7, #5]
 80004d4:	79ba      	ldrb	r2, [r7, #6]
 80004d6:	0092      	lsls	r2, r2, #2
 80004d8:	fa01 f202 	lsl.w	r2, r1, r2
 80004dc:	4611      	mov	r1, r2
 80004de:	4a36      	ldr	r2, [pc, #216]	; (80005b8 <MGPIO_enSetPinDirection+0x1ac>)
 80004e0:	430b      	orrs	r3, r1
 80004e2:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 80004e4:	e05f      	b.n	80005a6 <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < MGPIO_CRH_MAX)
 80004e6:	79bb      	ldrb	r3, [r7, #6]
 80004e8:	2b0f      	cmp	r3, #15
 80004ea:	d81a      	bhi.n	8000522 <MGPIO_enSetPinDirection+0x116>
			copy_u8pin -= MGPIO_CRL_MAX ;
 80004ec:	79bb      	ldrb	r3, [r7, #6]
 80004ee:	3b08      	subs	r3, #8
 80004f0:	71bb      	strb	r3, [r7, #6]
			GPIOB->GPIO_CRH &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET)) ;
 80004f2:	4b31      	ldr	r3, [pc, #196]	; (80005b8 <MGPIO_enSetPinDirection+0x1ac>)
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	79ba      	ldrb	r2, [r7, #6]
 80004f8:	0092      	lsls	r2, r2, #2
 80004fa:	210f      	movs	r1, #15
 80004fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000500:	43d2      	mvns	r2, r2
 8000502:	4611      	mov	r1, r2
 8000504:	4a2c      	ldr	r2, [pc, #176]	; (80005b8 <MGPIO_enSetPinDirection+0x1ac>)
 8000506:	400b      	ands	r3, r1
 8000508:	6053      	str	r3, [r2, #4]
			GPIOB->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET)) ;
 800050a:	4b2b      	ldr	r3, [pc, #172]	; (80005b8 <MGPIO_enSetPinDirection+0x1ac>)
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	7979      	ldrb	r1, [r7, #5]
 8000510:	79ba      	ldrb	r2, [r7, #6]
 8000512:	0092      	lsls	r2, r2, #2
 8000514:	fa01 f202 	lsl.w	r2, r1, r2
 8000518:	4611      	mov	r1, r2
 800051a:	4a27      	ldr	r2, [pc, #156]	; (80005b8 <MGPIO_enSetPinDirection+0x1ac>)
 800051c:	430b      	orrs	r3, r1
 800051e:	6053      	str	r3, [r2, #4]
		break;
 8000520:	e041      	b.n	80005a6 <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 8000522:	2300      	movs	r3, #0
 8000524:	73fb      	strb	r3, [r7, #15]
		break;
 8000526:	e03e      	b.n	80005a6 <MGPIO_enSetPinDirection+0x19a>

	case PORTC:
		if (copy_u8pin < MGPIO_CRL_MAX)
 8000528:	79bb      	ldrb	r3, [r7, #6]
 800052a:	2b07      	cmp	r3, #7
 800052c:	d817      	bhi.n	800055e <MGPIO_enSetPinDirection+0x152>
		{
			GPIOC->GPIO_CRL &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET)) ;
 800052e:	4b23      	ldr	r3, [pc, #140]	; (80005bc <MGPIO_enSetPinDirection+0x1b0>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	79ba      	ldrb	r2, [r7, #6]
 8000534:	0092      	lsls	r2, r2, #2
 8000536:	210f      	movs	r1, #15
 8000538:	fa01 f202 	lsl.w	r2, r1, r2
 800053c:	43d2      	mvns	r2, r2
 800053e:	4611      	mov	r1, r2
 8000540:	4a1e      	ldr	r2, [pc, #120]	; (80005bc <MGPIO_enSetPinDirection+0x1b0>)
 8000542:	400b      	ands	r3, r1
 8000544:	6013      	str	r3, [r2, #0]
			GPIOC->GPIO_CRL |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET)) ;
 8000546:	4b1d      	ldr	r3, [pc, #116]	; (80005bc <MGPIO_enSetPinDirection+0x1b0>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	7979      	ldrb	r1, [r7, #5]
 800054c:	79ba      	ldrb	r2, [r7, #6]
 800054e:	0092      	lsls	r2, r2, #2
 8000550:	fa01 f202 	lsl.w	r2, r1, r2
 8000554:	4611      	mov	r1, r2
 8000556:	4a19      	ldr	r2, [pc, #100]	; (80005bc <MGPIO_enSetPinDirection+0x1b0>)
 8000558:	430b      	orrs	r3, r1
 800055a:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 800055c:	e023      	b.n	80005a6 <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < MGPIO_CRH_MAX)
 800055e:	79bb      	ldrb	r3, [r7, #6]
 8000560:	2b0f      	cmp	r3, #15
 8000562:	d81a      	bhi.n	800059a <MGPIO_enSetPinDirection+0x18e>
			copy_u8pin -= MGPIO_CRL_MAX ;
 8000564:	79bb      	ldrb	r3, [r7, #6]
 8000566:	3b08      	subs	r3, #8
 8000568:	71bb      	strb	r3, [r7, #6]
			GPIOC->GPIO_CRH &= ~(MGPIO_MASK) << (copy_u8pin * MGPIO_OFFSET) ;
 800056a:	4b14      	ldr	r3, [pc, #80]	; (80005bc <MGPIO_enSetPinDirection+0x1b0>)
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	79ba      	ldrb	r2, [r7, #6]
 8000570:	0092      	lsls	r2, r2, #2
 8000572:	f06f 010f 	mvn.w	r1, #15
 8000576:	fa01 f202 	lsl.w	r2, r1, r2
 800057a:	4611      	mov	r1, r2
 800057c:	4a0f      	ldr	r2, [pc, #60]	; (80005bc <MGPIO_enSetPinDirection+0x1b0>)
 800057e:	400b      	ands	r3, r1
 8000580:	6053      	str	r3, [r2, #4]
			GPIOC->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET)) ;
 8000582:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <MGPIO_enSetPinDirection+0x1b0>)
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	7979      	ldrb	r1, [r7, #5]
 8000588:	79ba      	ldrb	r2, [r7, #6]
 800058a:	0092      	lsls	r2, r2, #2
 800058c:	fa01 f202 	lsl.w	r2, r1, r2
 8000590:	4611      	mov	r1, r2
 8000592:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <MGPIO_enSetPinDirection+0x1b0>)
 8000594:	430b      	orrs	r3, r1
 8000596:	6053      	str	r3, [r2, #4]
		break;
 8000598:	e005      	b.n	80005a6 <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 800059a:	2300      	movs	r3, #0
 800059c:	73fb      	strb	r3, [r7, #15]
		break;
 800059e:	e002      	b.n	80005a6 <MGPIO_enSetPinDirection+0x19a>

	default:
		local_state = OUT_OF_RANG_ERR;
 80005a0:	2300      	movs	r3, #0
 80005a2:	73fb      	strb	r3, [r7, #15]
		break;
 80005a4:	bf00      	nop
	}
	return local_state;
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3714      	adds	r7, #20
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	40010800 	.word	0x40010800
 80005b8:	40010c00 	.word	0x40010c00
 80005bc:	40011000 	.word	0x40011000

080005c0 <MNVIC_enEnableNVIC>:
 * \Parameters (in) : None
 *
 * \Return value:   : ErrorState_t  -> SUCEESS
 *******************************************************************************/
ErrorState_t MNVIC_enEnableNVIC(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
	/*	@brief	This APIs allow the system to has a Pritories-Group and Sub-group
	 * 	To write to this register, you must write 0x5FA to the VECTKEY[16-31] field, otherwise the
		processor ignores the write. */

	SCB_AIRCR = MNVIC_GROUPSUB_PRI;
 80005c4:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <MNVIC_enEnableNVIC+0x14>)
 80005c6:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <MNVIC_enEnableNVIC+0x18>)
 80005c8:	601a      	str	r2, [r3, #0]

	return SUCCESS;
 80005ca:	2302      	movs	r3, #2
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr
 80005d4:	e000ed0c 	.word	0xe000ed0c
 80005d8:	05fa0600 	.word	0x05fa0600

080005dc <MNVIC_enEnableInt>:
 *
 * \Return value:   : ErrorState_t  -> SUCEESS
 * 									-> OUT_OF_RANG_ERR
 *******************************************************************************/
ErrorState_t MNVIC_enEnableInt(u8 copy_u8IRQnum)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
	 * 	1. based on the ID of the INT, it will select the correspoinding Register
	 *
	 * 	@hint 	This API used An atomic access to execuate the statement in one Asm Inst.
	 * */

	ErrorState_t  local_state = SUCCESS;
 80005e6:	2302      	movs	r3, #2
 80005e8:	73fb      	strb	r3, [r7, #15]

	if (copy_u8IRQnum < MNVIC_MAX_REG1)
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	2b1f      	cmp	r3, #31
 80005ee:	d805      	bhi.n	80005fc <MNVIC_enEnableInt+0x20>
	{
		NVIC->NVIC_ISER[0] = (1<<copy_u8IRQnum);
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	2201      	movs	r2, #1
 80005f4:	409a      	lsls	r2, r3
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <MNVIC_enEnableInt+0x48>)
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	e00d      	b.n	8000618 <MNVIC_enEnableInt+0x3c>
	}
	else if (copy_u8IRQnum < MNVIC_MAX_REG2)
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	2b3f      	cmp	r3, #63	; 0x3f
 8000600:	d808      	bhi.n	8000614 <MNVIC_enEnableInt+0x38>
	{
		copy_u8IRQnum -= MNVIC_MAX_REG1;
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	3b20      	subs	r3, #32
 8000606:	71fb      	strb	r3, [r7, #7]
		NVIC->NVIC_ISER[1] = (1<<copy_u8IRQnum);
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	2201      	movs	r2, #1
 800060c:	409a      	lsls	r2, r3
 800060e:	4b05      	ldr	r3, [pc, #20]	; (8000624 <MNVIC_enEnableInt+0x48>)
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	e001      	b.n	8000618 <MNVIC_enEnableInt+0x3c>
	}
	else
	{
		local_state = OUT_OF_RANG_ERR;
 8000614:	2300      	movs	r3, #0
 8000616:	73fb      	strb	r3, [r7, #15]
	}
	return local_state;
 8000618:	7bfb      	ldrb	r3, [r7, #15]
}
 800061a:	4618      	mov	r0, r3
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr
 8000624:	e000e100 	.word	0xe000e100

08000628 <MNVIC_enSetPendingFlag>:
 *
 * \Return value:   : ErrorState_t  -> SUCEESS
 * 									-> OUT_OF_RANG_ERR
 *******************************************************************************/
ErrorState_t MNVIC_enSetPendingFlag(u8 copy_u8IRQnum)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
	ErrorState_t  local_state = SUCCESS;
 8000632:	2302      	movs	r3, #2
 8000634:	73fb      	strb	r3, [r7, #15]
	 * 	1. based on the ID of the INT, it will select the correspoinding Register
	 *
	 * 	@hint 	This API used An atomic access to execuate the statement in one Asm Inst.
	 * */

	if (copy_u8IRQnum < MNVIC_MAX_REG1)
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	2b1f      	cmp	r3, #31
 800063a:	d806      	bhi.n	800064a <MNVIC_enSetPendingFlag+0x22>
	{
		NVIC->NVIC_ISPR[0] = (1<<copy_u8IRQnum);
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	2201      	movs	r2, #1
 8000640:	409a      	lsls	r2, r3
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MNVIC_enSetPendingFlag+0x4c>)
 8000644:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8000648:	e00e      	b.n	8000668 <MNVIC_enSetPendingFlag+0x40>
	}
	else if (copy_u8IRQnum < MNVIC_MAX_REG2)
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	2b3f      	cmp	r3, #63	; 0x3f
 800064e:	d809      	bhi.n	8000664 <MNVIC_enSetPendingFlag+0x3c>
	{
		copy_u8IRQnum -= MNVIC_MAX_REG1;
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	3b20      	subs	r3, #32
 8000654:	71fb      	strb	r3, [r7, #7]
		NVIC->NVIC_ISPR[1] = (1<<copy_u8IRQnum);
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	2201      	movs	r2, #1
 800065a:	409a      	lsls	r2, r3
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <MNVIC_enSetPendingFlag+0x4c>)
 800065e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8000662:	e001      	b.n	8000668 <MNVIC_enSetPendingFlag+0x40>
	}
	else
	{
		local_state = OUT_OF_RANG_ERR;
 8000664:	2300      	movs	r3, #0
 8000666:	73fb      	strb	r3, [r7, #15]
	}
	return local_state;
 8000668:	7bfb      	ldrb	r3, [r7, #15]
}
 800066a:	4618      	mov	r0, r3
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr
 8000674:	e000e100 	.word	0xe000e100

08000678 <MNVIC_enSetPriority>:
 *
 * \Return value:   : ErrorState_t  -> SUCEESS
 * 									-> OUT_OF_RANG_ERR
 *******************************************************************************/
ErrorState_t MNVIC_enSetPriority(u8 copy_u8IRQnum, u8 copy_u8Group, u8 copy_u8Sub)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
 8000682:	460b      	mov	r3, r1
 8000684:	71bb      	strb	r3, [r7, #6]
 8000686:	4613      	mov	r3, r2
 8000688:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 800068a:	2302      	movs	r3, #2
 800068c:	73fb      	strb	r3, [r7, #15]
	 * 	2. Set the Sub index from [4-5]
	 * 	3. Set the Grp index from [6-7]
	 *
	 * 	@hint it's disallowed to write on Register[0-3]
	 * */
	if (copy_u8IRQnum <= MNVIC_MAX_INT)
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	2b3b      	cmp	r3, #59	; 0x3b
 8000692:	d83d      	bhi.n	8000710 <MNVIC_enSetPriority+0x98>
	{
		NVIC->NVIC_IPR[copy_u8IRQnum] &= MNVIC_SETPRI_MASK;
 8000694:	4a22      	ldr	r2, [pc, #136]	; (8000720 <MNVIC_enSetPriority+0xa8>)
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	4413      	add	r3, r2
 800069a:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	491f      	ldr	r1, [pc, #124]	; (8000720 <MNVIC_enSetPriority+0xa8>)
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f002 020f 	and.w	r2, r2, #15
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	440b      	add	r3, r1
 80006ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

		if (copy_u8Group <= MNVIC_PRI_SIZE && copy_u8Sub <= MNVIC_PRI_SIZE)
 80006b0:	79bb      	ldrb	r3, [r7, #6]
 80006b2:	2b03      	cmp	r3, #3
 80006b4:	d829      	bhi.n	800070a <MNVIC_enSetPriority+0x92>
 80006b6:	797b      	ldrb	r3, [r7, #5]
 80006b8:	2b03      	cmp	r3, #3
 80006ba:	d826      	bhi.n	800070a <MNVIC_enSetPriority+0x92>
		{
			NVIC->NVIC_IPR[copy_u8IRQnum] |= (copy_u8Sub << MNVIC_SUB_OFFSET);
 80006bc:	4a18      	ldr	r2, [pc, #96]	; (8000720 <MNVIC_enSetPriority+0xa8>)
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	4413      	add	r3, r2
 80006c2:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	b25a      	sxtb	r2, r3
 80006ca:	797b      	ldrb	r3, [r7, #5]
 80006cc:	011b      	lsls	r3, r3, #4
 80006ce:	b25b      	sxtb	r3, r3
 80006d0:	4313      	orrs	r3, r2
 80006d2:	b259      	sxtb	r1, r3
 80006d4:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MNVIC_enSetPriority+0xa8>)
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	b2c9      	uxtb	r1, r1
 80006da:	4413      	add	r3, r2
 80006dc:	460a      	mov	r2, r1
 80006de:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
			NVIC->NVIC_IPR[copy_u8IRQnum] |= (copy_u8Group << MNVIC_GRP_OFFSET);
 80006e2:	4a0f      	ldr	r2, [pc, #60]	; (8000720 <MNVIC_enSetPriority+0xa8>)
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	4413      	add	r3, r2
 80006e8:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	b25a      	sxtb	r2, r3
 80006f0:	79bb      	ldrb	r3, [r7, #6]
 80006f2:	019b      	lsls	r3, r3, #6
 80006f4:	b25b      	sxtb	r3, r3
 80006f6:	4313      	orrs	r3, r2
 80006f8:	b259      	sxtb	r1, r3
 80006fa:	4a09      	ldr	r2, [pc, #36]	; (8000720 <MNVIC_enSetPriority+0xa8>)
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	b2c9      	uxtb	r1, r1
 8000700:	4413      	add	r3, r2
 8000702:	460a      	mov	r2, r1
 8000704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8000708:	e004      	b.n	8000714 <MNVIC_enSetPriority+0x9c>
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
 800070a:	2300      	movs	r3, #0
 800070c:	73fb      	strb	r3, [r7, #15]
 800070e:	e001      	b.n	8000714 <MNVIC_enSetPriority+0x9c>
		}
	}
	else
	{
		local_state = OUT_OF_RANG_ERR;
 8000710:	2300      	movs	r3, #0
 8000712:	73fb      	strb	r3, [r7, #15]
	}
	return local_state;
 8000714:	7bfb      	ldrb	r3, [r7, #15]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	e000e100 	.word	0xe000e100

08000724 <MRCC_enSysClkINIT>:
* \Parameters (in) : None
* \Return value:   : ErrorState_t  SUCEESS
*
*******************************************************************************/
ErrorState_t MRCC_enSysClkINIT(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0


	/** CLK source is HSI **/
#elif(MRCC_CLK_TYPE == MRCC_HSI)
	/* 1. ENABLE the HSI */
	SET_BIT(RCC->RCC_CR, HSION);
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MRCC_enSysClkINIT+0x74>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a1a      	ldr	r2, [pc, #104]	; (8000798 <MRCC_enSysClkINIT+0x74>)
 800072e:	f043 0301 	orr.w	r3, r3, #1
 8000732:	6013      	str	r3, [r2, #0]

	/* 2. wait till HSE is READY 'settling time finished', stable */
	while (!(GET_BIT(RCC->RCC_CR, HSIRDY)));
 8000734:	bf00      	nop
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MRCC_enSysClkINIT+0x74>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	085b      	lsrs	r3, r3, #1
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	2b00      	cmp	r3, #0
 8000742:	d0f8      	beq.n	8000736 <MRCC_enSysClkINIT+0x12>

	/* 3. Enable System switch clock with HSI */
	CLR_BIT(RCC->RCC_CFGR, SWC);
 8000744:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MRCC_enSysClkINIT+0x74>)
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	4a13      	ldr	r2, [pc, #76]	; (8000798 <MRCC_enSysClkINIT+0x74>)
 800074a:	f023 0301 	bic.w	r3, r3, #1
 800074e:	6053      	str	r3, [r2, #4]

#else
#error("WRONG CLK TYPE");
#endif
	/* MASK the AHB and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= MRCC_AHB_MASK;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MRCC_enSysClkINIT+0x74>)
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	4a10      	ldr	r2, [pc, #64]	; (8000798 <MRCC_enSysClkINIT+0x74>)
 8000756:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800075a:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= MRCC_AHB_PRESCALER;
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MRCC_enSysClkINIT+0x74>)
 800075e:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <MRCC_enSysClkINIT+0x74>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	6053      	str	r3, [r2, #4]

	/* MASK the APB1 and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= MRCC_APB1_MASK;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MRCC_enSysClkINIT+0x74>)
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	4a0b      	ldr	r2, [pc, #44]	; (8000798 <MRCC_enSysClkINIT+0x74>)
 800076a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800076e:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= MRCC_APB1_PRESCALER_MODE;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MRCC_enSysClkINIT+0x74>)
 8000772:	4a09      	ldr	r2, [pc, #36]	; (8000798 <MRCC_enSysClkINIT+0x74>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	6053      	str	r3, [r2, #4]

	/* MASK the APB2 and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= MRCC_APB2_MASK;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MRCC_enSysClkINIT+0x74>)
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	4a06      	ldr	r2, [pc, #24]	; (8000798 <MRCC_enSysClkINIT+0x74>)
 800077e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000782:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= MRCC_APB2_PRESCALER_MODE;
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <MRCC_enSysClkINIT+0x74>)
 8000786:	4a04      	ldr	r2, [pc, #16]	; (8000798 <MRCC_enSysClkINIT+0x74>)
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	6053      	str	r3, [r2, #4]
		RCC->RCC_CFGR &= MRCC_MCO_MASK;
		RCC->RCC_CFGR |= MRCC_MCO_MODE ;
	}
#endif

	return SUCCESS;
 800078c:	2302      	movs	r3, #2
}
 800078e:	4618      	mov	r0, r3
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	40021000 	.word	0x40021000

0800079c <MRCC_enEnablePeripheralCLK>:
* \Return value:   : ErrorState_t  -> SUCEESS
* 								   -> OUT_OF_RANG_ERR
*******************************************************************************/

ErrorState_t MRCC_enEnablePeripheralCLK(u8 copy_u8Peripheral)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
	ErrorState_t local_state = SUCCESS;
 80007a6:	2302      	movs	r3, #2
 80007a8:	73fb      	strb	r3, [r7, #15]

	/* based on predefined Peripheral, switch to corresponding Register, and Enabled it*/
	if (copy_u8Peripheral < MRCC_AHB_REG)
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	2b1f      	cmp	r3, #31
 80007ae:	d80a      	bhi.n	80007c6 <MRCC_enEnablePeripheralCLK+0x2a>
		SET_BIT(RCC->RCC_AHBENR, copy_u8Peripheral);
 80007b0:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MRCC_enEnablePeripheralCLK+0x80>)
 80007b2:	695b      	ldr	r3, [r3, #20]
 80007b4:	79fa      	ldrb	r2, [r7, #7]
 80007b6:	2101      	movs	r1, #1
 80007b8:	fa01 f202 	lsl.w	r2, r1, r2
 80007bc:	4611      	mov	r1, r2
 80007be:	4a17      	ldr	r2, [pc, #92]	; (800081c <MRCC_enEnablePeripheralCLK+0x80>)
 80007c0:	430b      	orrs	r3, r1
 80007c2:	6153      	str	r3, [r2, #20]
 80007c4:	e023      	b.n	800080e <MRCC_enEnablePeripheralCLK+0x72>

	else if (copy_u8Peripheral < MRCC_APB1_REG)
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2b3f      	cmp	r3, #63	; 0x3f
 80007ca:	d80d      	bhi.n	80007e8 <MRCC_enEnablePeripheralCLK+0x4c>
	{
		copy_u8Peripheral -= MRCC_AHB_REG;
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	3b20      	subs	r3, #32
 80007d0:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->RCC_APB1ENR, copy_u8Peripheral);
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <MRCC_enEnablePeripheralCLK+0x80>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	79fa      	ldrb	r2, [r7, #7]
 80007d8:	2101      	movs	r1, #1
 80007da:	fa01 f202 	lsl.w	r2, r1, r2
 80007de:	4611      	mov	r1, r2
 80007e0:	4a0e      	ldr	r2, [pc, #56]	; (800081c <MRCC_enEnablePeripheralCLK+0x80>)
 80007e2:	430b      	orrs	r3, r1
 80007e4:	61d3      	str	r3, [r2, #28]
 80007e6:	e012      	b.n	800080e <MRCC_enEnablePeripheralCLK+0x72>
	}

	else if (copy_u8Peripheral < MRCC_APB2_REG)
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	2b5f      	cmp	r3, #95	; 0x5f
 80007ec:	d80d      	bhi.n	800080a <MRCC_enEnablePeripheralCLK+0x6e>
	{
		copy_u8Peripheral -= MRCC_APB1_REG;
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	3b40      	subs	r3, #64	; 0x40
 80007f2:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->RCC_APB2ENR, copy_u8Peripheral);
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MRCC_enEnablePeripheralCLK+0x80>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	79fa      	ldrb	r2, [r7, #7]
 80007fa:	2101      	movs	r1, #1
 80007fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000800:	4611      	mov	r1, r2
 8000802:	4a06      	ldr	r2, [pc, #24]	; (800081c <MRCC_enEnablePeripheralCLK+0x80>)
 8000804:	430b      	orrs	r3, r1
 8000806:	6193      	str	r3, [r2, #24]
 8000808:	e001      	b.n	800080e <MRCC_enEnablePeripheralCLK+0x72>
	}

	else
	{
		local_state = OUT_OF_RANG_ERR;
 800080a:	2300      	movs	r3, #0
 800080c:	73fb      	strb	r3, [r7, #15]
	}
	return local_state;
 800080e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000810:	4618      	mov	r0, r3
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40021000 	.word	0x40021000

08000820 <SPI1_IRQHandler>:
 * @param	void
 * @retval	void
 */

void SPI1_IRQHandler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	if (MSPI_CALLBACK[MSPI1].callback_TxRx!= NULL)
 8000824:	4b27      	ldr	r3, [pc, #156]	; (80008c4 <SPI1_IRQHandler+0xa4>)
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d046      	beq.n	80008ba <SPI1_IRQHandler+0x9a>
	{
		/* check if the Tx Buffer empty is fired, so copy the data and transmit it  */
		if ((GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_SR, TXE))&&(GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_CR2, MSPI_TXE_INT)))
 800082c:	4b26      	ldr	r3, [pc, #152]	; (80008c8 <SPI1_IRQHandler+0xa8>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	085b      	lsrs	r3, r3, #1
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	2b00      	cmp	r3, #0
 800083a:	d00d      	beq.n	8000858 <SPI1_IRQHandler+0x38>
 800083c:	4b22      	ldr	r3, [pc, #136]	; (80008c8 <SPI1_IRQHandler+0xa8>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	09db      	lsrs	r3, r3, #7
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	2b00      	cmp	r3, #0
 800084a:	d005      	beq.n	8000858 <SPI1_IRQHandler+0x38>
		{
			MSPI_CHANNELS[MSPI1]->SPI_DR = MSPI_CALLBACK[MSPI1].copy_u16Txdata;
 800084c:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <SPI1_IRQHandler+0xa4>)
 800084e:	881a      	ldrh	r2, [r3, #0]
 8000850:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <SPI1_IRQHandler+0xa8>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	e030      	b.n	80008ba <SPI1_IRQHandler+0x9a>
		}

		/* check if the Rx buffer Not empty is fired and ready to receive,so return the data  */
		else if ((GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_SR, RXN))&&(GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_CR2, MSPI_RXNE_INT)))
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <SPI1_IRQHandler+0xa8>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	2b00      	cmp	r3, #0
 8000864:	d00e      	beq.n	8000884 <SPI1_IRQHandler+0x64>
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <SPI1_IRQHandler+0xa8>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	099b      	lsrs	r3, r3, #6
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	2b00      	cmp	r3, #0
 8000874:	d006      	beq.n	8000884 <SPI1_IRQHandler+0x64>
		{
			MSPI_CALLBACK[MSPI1].ptr_u16Rxdata = (u16*)MSPI_CHANNELS[MSPI1]->SPI_DR ;
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <SPI1_IRQHandler+0xa8>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	461a      	mov	r2, r3
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <SPI1_IRQHandler+0xa4>)
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	e01a      	b.n	80008ba <SPI1_IRQHandler+0x9a>
		}

		/* check if the Mode Fault interrupt is fired, and notify it  */
		else if ((GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_SR, MODF))&&(GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_CR2, MSPI_ERR_INT)))
 8000884:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <SPI1_IRQHandler+0xa8>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	095b      	lsrs	r3, r3, #5
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	2b00      	cmp	r3, #0
 8000892:	d007      	beq.n	80008a4 <SPI1_IRQHandler+0x84>
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <SPI1_IRQHandler+0xa8>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	095b      	lsrs	r3, r3, #5
 800089c:	f003 0301 	and.w	r3, r3, #1
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d10a      	bne.n	80008ba <SPI1_IRQHandler+0x9a>
		{

		}

		/* check if the Mode Fault interrupt is fired, and notify it  */
		else if ((GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_SR, OVR))&&(GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_CR2, MSPI_ERR_INT)))
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <SPI1_IRQHandler+0xa8>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	099b      	lsrs	r3, r3, #6
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d002      	beq.n	80008ba <SPI1_IRQHandler+0x9a>
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <SPI1_IRQHandler+0xa8>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	685b      	ldr	r3, [r3, #4]
		{

		}
	}
	/* perform the Callback fun from the App */
	MSPI_CALLBACK[MSPI1].callback_TxRx();
 80008ba:	4b02      	ldr	r3, [pc, #8]	; (80008c4 <SPI1_IRQHandler+0xa4>)
 80008bc:	689b      	ldr	r3, [r3, #8]
 80008be:	4798      	blx	r3
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000090 	.word	0x20000090
 80008c8:	20000000 	.word	0x20000000

080008cc <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	if (MSPI_CALLBACK[MSPI2].callback_TxRx!= NULL)
 80008d0:	4b27      	ldr	r3, [pc, #156]	; (8000970 <SPI2_IRQHandler+0xa4>)
 80008d2:	695b      	ldr	r3, [r3, #20]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d046      	beq.n	8000966 <SPI2_IRQHandler+0x9a>
	{
		/* check if the Tx Buffer empty is fired, so copy the data and transmit it  */
		if ((GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_SR, TXE))&&(GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_CR2, MSPI_TXE_INT)))
 80008d8:	4b26      	ldr	r3, [pc, #152]	; (8000974 <SPI2_IRQHandler+0xa8>)
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	085b      	lsrs	r3, r3, #1
 80008e0:	f003 0301 	and.w	r3, r3, #1
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d00d      	beq.n	8000904 <SPI2_IRQHandler+0x38>
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <SPI2_IRQHandler+0xa8>)
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	09db      	lsrs	r3, r3, #7
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d005      	beq.n	8000904 <SPI2_IRQHandler+0x38>
		{
			MSPI_CHANNELS[MSPI2]->SPI_DR = MSPI_CALLBACK[MSPI2].copy_u16Txdata;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <SPI2_IRQHandler+0xa4>)
 80008fa:	899a      	ldrh	r2, [r3, #12]
 80008fc:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <SPI2_IRQHandler+0xa8>)
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	e030      	b.n	8000966 <SPI2_IRQHandler+0x9a>
		}

		/* check if the Rx buffer Not empty is fired and ready to receive,so return the data  */
		else if ((GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_SR, RXN))&&(GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_CR2, MSPI_RXNE_INT)))
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <SPI2_IRQHandler+0xa8>)
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	689b      	ldr	r3, [r3, #8]
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	2b00      	cmp	r3, #0
 8000910:	d00e      	beq.n	8000930 <SPI2_IRQHandler+0x64>
 8000912:	4b18      	ldr	r3, [pc, #96]	; (8000974 <SPI2_IRQHandler+0xa8>)
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	099b      	lsrs	r3, r3, #6
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	2b00      	cmp	r3, #0
 8000920:	d006      	beq.n	8000930 <SPI2_IRQHandler+0x64>
		{
			MSPI_CALLBACK[MSPI2].ptr_u16Rxdata = (u16*)MSPI_CHANNELS[MSPI2]->SPI_DR ;
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <SPI2_IRQHandler+0xa8>)
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	461a      	mov	r2, r3
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <SPI2_IRQHandler+0xa4>)
 800092c:	611a      	str	r2, [r3, #16]
 800092e:	e01a      	b.n	8000966 <SPI2_IRQHandler+0x9a>
		}

		/* check if the Mode Fault interrupt is fired, and notify it  */
		else if ((GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_SR, MODF))&&(GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_CR2, MSPI_ERR_INT)))
 8000930:	4b10      	ldr	r3, [pc, #64]	; (8000974 <SPI2_IRQHandler+0xa8>)
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	095b      	lsrs	r3, r3, #5
 8000938:	f003 0301 	and.w	r3, r3, #1
 800093c:	2b00      	cmp	r3, #0
 800093e:	d007      	beq.n	8000950 <SPI2_IRQHandler+0x84>
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <SPI2_IRQHandler+0xa8>)
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	095b      	lsrs	r3, r3, #5
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	2b00      	cmp	r3, #0
 800094e:	d10a      	bne.n	8000966 <SPI2_IRQHandler+0x9a>
		{

		}

		/* check if the Mode Fault interrupt is fired, and notify it  */
		else if ((GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_SR, OVR))&&(GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_CR2, MSPI_ERR_INT)))
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <SPI2_IRQHandler+0xa8>)
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	099b      	lsrs	r3, r3, #6
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	2b00      	cmp	r3, #0
 800095e:	d002      	beq.n	8000966 <SPI2_IRQHandler+0x9a>
 8000960:	4b04      	ldr	r3, [pc, #16]	; (8000974 <SPI2_IRQHandler+0xa8>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	685b      	ldr	r3, [r3, #4]
		{

		}
	}
	/* perform the Callback fun from the App */
	MSPI_CALLBACK[MSPI2].callback_TxRx();
 8000966:	4b02      	ldr	r3, [pc, #8]	; (8000970 <SPI2_IRQHandler+0xa4>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	4798      	blx	r3
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000090 	.word	0x20000090
 8000974:	20000000 	.word	0x20000000

08000978 <SysTick_Handler>:

/**********************************************************************************************************************
 * HANDLER
 *********************************************************************************************************************/
void SysTick_Handler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	 * 1. clear the temp var to ba able to set the INT flag by reading it
	 * 2. disable the TICK INT
	 * 3. disable the systick
	 * 4. clear the value register
	 * 5. call the APP call back function from MCAL Layer */
	local_u8temp = 0;
 800097c:	4b13      	ldr	r3, [pc, #76]	; (80009cc <SysTick_Handler+0x54>)
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
	if (global_u8flag == 1)
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <SysTick_Handler+0x58>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d10e      	bne.n	80009a8 <SysTick_Handler+0x30>
	{
		CLR_BIT(STK->STK_CTRL, TICKINT);
 800098a:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <SysTick_Handler+0x5c>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a11      	ldr	r2, [pc, #68]	; (80009d4 <SysTick_Handler+0x5c>)
 8000990:	f023 0302 	bic.w	r3, r3, #2
 8000994:	6013      	str	r3, [r2, #0]
		CLR_BIT(STK->STK_CTRL, ENABLE);
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <SysTick_Handler+0x5c>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a0e      	ldr	r2, [pc, #56]	; (80009d4 <SysTick_Handler+0x5c>)
 800099c:	f023 0301 	bic.w	r3, r3, #1
 80009a0:	6013      	str	r3, [r2, #0]
		STK->STK_VAL = MSYSTICK_REG_CLEAR;
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <SysTick_Handler+0x5c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
	}

	if (MSYSTICK_Callback != NULL)
 80009a8:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <SysTick_Handler+0x60>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d002      	beq.n	80009b6 <SysTick_Handler+0x3e>
	{
		MSYSTICK_Callback();
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <SysTick_Handler+0x60>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4798      	blx	r3
	}

	local_u8temp = GET_BIT(STK->STK_CTRL,COUNTFLAG);
 80009b6:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <SysTick_Handler+0x5c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	0c1b      	lsrs	r3, r3, #16
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	4b01      	ldr	r3, [pc, #4]	; (80009cc <SysTick_Handler+0x54>)
 80009c6:	701a      	strb	r2, [r3, #0]
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200000b0 	.word	0x200000b0
 80009d0:	200000ac 	.word	0x200000ac
 80009d4:	e000e010 	.word	0xe000e010
 80009d8:	200000a8 	.word	0x200000a8

080009dc <USART1_IRQHandler>:
 * 			when receiving data by interrupt, 1. get the first byte from the data register
 * 			2. check if that byte the ENDline byte, if so then reset the index and set the Rec_flag
 * 			3. if was not update the index to receieve the next byte */

void USART1_IRQHandler (void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
	if ((GET_BIT(USART_CH[MUSART1]->USART_SR, TXE)))
 80009e0:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <USART1_IRQHandler+0x98>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	09db      	lsrs	r3, r3, #7
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d018      	beq.n	8000a22 <USART1_IRQHandler+0x46>
	{
		uart_TxBufferIndex++;
 80009f0:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <USART1_IRQHandler+0x9c>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	3301      	adds	r3, #1
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <USART1_IRQHandler+0x9c>)
 80009fa:	701a      	strb	r2, [r3, #0]
		if (uart_TxBUFFER[uart_TxBufferIndex] == MUSART_NULL_CHR)
 80009fc:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <USART1_IRQHandler+0x9c>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <USART1_IRQHandler+0xa0>)
 8000a04:	5c9b      	ldrb	r3, [r3, r2]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d103      	bne.n	8000a12 <USART1_IRQHandler+0x36>
		{
			uart_TxBufferIndex = 0;
 8000a0a:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <USART1_IRQHandler+0x9c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
 8000a10:	e007      	b.n	8000a22 <USART1_IRQHandler+0x46>
		}
		else
		{
			USART_CH[MUSART1]->USART_DR =  uart_TxBUFFER[uart_TxBufferIndex];
 8000a12:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <USART1_IRQHandler+0x9c>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <USART1_IRQHandler+0xa0>)
 8000a1a:	5c9a      	ldrb	r2, [r3, r2]
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <USART1_IRQHandler+0x98>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]

		}
	}

	if (GET_BIT(USART_CH[MUSART1]->USART_SR, RXNE))
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <USART1_IRQHandler+0x98>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	095b      	lsrs	r3, r3, #5
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d01c      	beq.n	8000a6c <USART1_IRQHandler+0x90>
	{
		uart_RxBUFFER[uart_RxBufferIndex] = USART_CH[MUSART1]->USART_DR ;
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <USART1_IRQHandler+0x98>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	6859      	ldr	r1, [r3, #4]
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <USART1_IRQHandler+0xa4>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	b2c9      	uxtb	r1, r1
 8000a40:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <USART1_IRQHandler+0xa8>)
 8000a42:	5499      	strb	r1, [r3, r2]

		if (uart_RxBUFFER[uart_RxBufferIndex] == MUSART_END_LINE)
 8000a44:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <USART1_IRQHandler+0xa4>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <USART1_IRQHandler+0xa8>)
 8000a4c:	5c9b      	ldrb	r3, [r3, r2]
 8000a4e:	2b23      	cmp	r3, #35	; 0x23
 8000a50:	d106      	bne.n	8000a60 <USART1_IRQHandler+0x84>
		{
			uart_RxBufferIndex = 0;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <USART1_IRQHandler+0xa4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
			Receive_Flag = 1;
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <USART1_IRQHandler+0xac>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	701a      	strb	r2, [r3, #0]
		else
		{
			uart_RxBufferIndex++;
		}
	}
}
 8000a5e:	e005      	b.n	8000a6c <USART1_IRQHandler+0x90>
			uart_RxBufferIndex++;
 8000a60:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <USART1_IRQHandler+0xa4>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	3301      	adds	r3, #1
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <USART1_IRQHandler+0xa4>)
 8000a6a:	701a      	strb	r2, [r3, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	20000008 	.word	0x20000008
 8000a78:	200000ae 	.word	0x200000ae
 8000a7c:	200000d0 	.word	0x200000d0
 8000a80:	200000af 	.word	0x200000af
 8000a84:	200000b4 	.word	0x200000b4
 8000a88:	200000ad 	.word	0x200000ad

08000a8c <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

	if ((GET_BIT(USART_CH[MUSART2]->USART_SR, TXE)))
 8000a90:	4b24      	ldr	r3, [pc, #144]	; (8000b24 <USART2_IRQHandler+0x98>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	09db      	lsrs	r3, r3, #7
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d018      	beq.n	8000ad2 <USART2_IRQHandler+0x46>
	{
		uart_TxBufferIndex++;
 8000aa0:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <USART2_IRQHandler+0x9c>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <USART2_IRQHandler+0x9c>)
 8000aaa:	701a      	strb	r2, [r3, #0]
		if (uart_TxBUFFER[uart_TxBufferIndex] == MUSART_NULL_CHR)
 8000aac:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <USART2_IRQHandler+0x9c>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <USART2_IRQHandler+0xa0>)
 8000ab4:	5c9b      	ldrb	r3, [r3, r2]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d103      	bne.n	8000ac2 <USART2_IRQHandler+0x36>
		{
			uart_TxBufferIndex = 0;
 8000aba:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <USART2_IRQHandler+0x9c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	701a      	strb	r2, [r3, #0]
 8000ac0:	e007      	b.n	8000ad2 <USART2_IRQHandler+0x46>
		}
		else
		{
			USART_CH[MUSART2]->USART_DR =  uart_TxBUFFER[uart_TxBufferIndex];
 8000ac2:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <USART2_IRQHandler+0x9c>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <USART2_IRQHandler+0xa0>)
 8000aca:	5c9a      	ldrb	r2, [r3, r2]
 8000acc:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <USART2_IRQHandler+0x98>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	605a      	str	r2, [r3, #4]

		}
	}

	if (GET_BIT(USART_CH[MUSART2]->USART_SR, RXNE))
 8000ad2:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <USART2_IRQHandler+0x98>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	095b      	lsrs	r3, r3, #5
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d01c      	beq.n	8000b1c <USART2_IRQHandler+0x90>
	{
		uart_RxBUFFER[uart_RxBufferIndex] = USART_CH[MUSART1]->USART_DR ;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <USART2_IRQHandler+0x98>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	6859      	ldr	r1, [r3, #4]
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <USART2_IRQHandler+0xa4>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	461a      	mov	r2, r3
 8000aee:	b2c9      	uxtb	r1, r1
 8000af0:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <USART2_IRQHandler+0xa8>)
 8000af2:	5499      	strb	r1, [r3, r2]

		if (uart_RxBUFFER[uart_RxBufferIndex] == MUSART_END_LINE)
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <USART2_IRQHandler+0xa4>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <USART2_IRQHandler+0xa8>)
 8000afc:	5c9b      	ldrb	r3, [r3, r2]
 8000afe:	2b23      	cmp	r3, #35	; 0x23
 8000b00:	d106      	bne.n	8000b10 <USART2_IRQHandler+0x84>
		{
			uart_RxBufferIndex = 0;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <USART2_IRQHandler+0xa4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
			Receive_Flag = 1;
 8000b08:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <USART2_IRQHandler+0xac>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]
		else
		{
			uart_RxBufferIndex++;
		}
	}
}
 8000b0e:	e005      	b.n	8000b1c <USART2_IRQHandler+0x90>
			uart_RxBufferIndex++;
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <USART2_IRQHandler+0xa4>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	3301      	adds	r3, #1
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <USART2_IRQHandler+0xa4>)
 8000b1a:	701a      	strb	r2, [r3, #0]
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	20000008 	.word	0x20000008
 8000b28:	200000ae 	.word	0x200000ae
 8000b2c:	200000d0 	.word	0x200000d0
 8000b30:	200000af 	.word	0x200000af
 8000b34:	200000b4 	.word	0x200000b4
 8000b38:	200000ad 	.word	0x200000ad

08000b3c <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
	if ((GET_BIT(USART_CH[MUSART3]->USART_SR, TXE)))
 8000b40:	4b24      	ldr	r3, [pc, #144]	; (8000bd4 <USART3_IRQHandler+0x98>)
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	09db      	lsrs	r3, r3, #7
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d018      	beq.n	8000b82 <USART3_IRQHandler+0x46>
	{
		uart_TxBufferIndex++;
 8000b50:	4b21      	ldr	r3, [pc, #132]	; (8000bd8 <USART3_IRQHandler+0x9c>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	3301      	adds	r3, #1
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <USART3_IRQHandler+0x9c>)
 8000b5a:	701a      	strb	r2, [r3, #0]
		if (uart_TxBUFFER[uart_TxBufferIndex] == MUSART_NULL_CHR)
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <USART3_IRQHandler+0x9c>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b1e      	ldr	r3, [pc, #120]	; (8000bdc <USART3_IRQHandler+0xa0>)
 8000b64:	5c9b      	ldrb	r3, [r3, r2]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d103      	bne.n	8000b72 <USART3_IRQHandler+0x36>
		{
			uart_TxBufferIndex = 0;
 8000b6a:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <USART3_IRQHandler+0x9c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
 8000b70:	e007      	b.n	8000b82 <USART3_IRQHandler+0x46>
		}
		else
		{
			USART_CH[MUSART3]->USART_DR =  uart_TxBUFFER[uart_TxBufferIndex];
 8000b72:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <USART3_IRQHandler+0x9c>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	461a      	mov	r2, r3
 8000b78:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <USART3_IRQHandler+0xa0>)
 8000b7a:	5c9a      	ldrb	r2, [r3, r2]
 8000b7c:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <USART3_IRQHandler+0x98>)
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	605a      	str	r2, [r3, #4]
		}
	}

	if (GET_BIT(USART_CH[MUSART3]->USART_SR, RXNE))
 8000b82:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <USART3_IRQHandler+0x98>)
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	095b      	lsrs	r3, r3, #5
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d01c      	beq.n	8000bcc <USART3_IRQHandler+0x90>
	{
		uart_RxBUFFER[uart_RxBufferIndex] = USART_CH[MUSART3]->USART_DR ;
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <USART3_IRQHandler+0x98>)
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	6859      	ldr	r1, [r3, #4]
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <USART3_IRQHandler+0xa4>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	b2c9      	uxtb	r1, r1
 8000ba0:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <USART3_IRQHandler+0xa8>)
 8000ba2:	5499      	strb	r1, [r3, r2]

		if (uart_RxBUFFER[uart_RxBufferIndex] == MUSART_END_LINE)
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <USART3_IRQHandler+0xa4>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <USART3_IRQHandler+0xa8>)
 8000bac:	5c9b      	ldrb	r3, [r3, r2]
 8000bae:	2b23      	cmp	r3, #35	; 0x23
 8000bb0:	d106      	bne.n	8000bc0 <USART3_IRQHandler+0x84>
		{
			uart_RxBufferIndex = 0;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <USART3_IRQHandler+0xa4>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
			Receive_Flag = 1;
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <USART3_IRQHandler+0xac>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	701a      	strb	r2, [r3, #0]
		else
		{
			uart_RxBufferIndex++;
		}
	}
}
 8000bbe:	e005      	b.n	8000bcc <USART3_IRQHandler+0x90>
			uart_RxBufferIndex++;
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <USART3_IRQHandler+0xa4>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <USART3_IRQHandler+0xa4>)
 8000bca:	701a      	strb	r2, [r3, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	200000ae 	.word	0x200000ae
 8000bdc:	200000d0 	.word	0x200000d0
 8000be0:	200000af 	.word	0x200000af
 8000be4:	200000b4 	.word	0x200000b4
 8000be8:	200000ad 	.word	0x200000ad

08000bec <main>:
/****************************************************************/

#include "App_int.h"

int main(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	App_voidstartApp();
 8000bf0:	f7ff fabe 	bl	8000170 <App_voidstartApp>
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bfe:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c00:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c04:	480c      	ldr	r0, [pc, #48]	; (8000c38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c06:	490d      	ldr	r1, [pc, #52]	; (8000c3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c08:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <LoopForever+0xe>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c1c:	4c0a      	ldr	r4, [pc, #40]	; (8000c48 <LoopForever+0x16>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c2a:	f000 f811 	bl	8000c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c2e:	f7ff ffdd 	bl	8000bec <main>

08000c32 <LoopForever>:

LoopForever:
    b LoopForever
 8000c32:	e7fe      	b.n	8000c32 <LoopForever>
  ldr   r0, =_estack
 8000c34:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000c40:	08000cb8 	.word	0x08000cb8
  ldr r2, =_sbss
 8000c44:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000c48:	200000ec 	.word	0x200000ec

08000c4c <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC3_IRQHandler>
	...

08000c50 <__libc_init_array>:
 8000c50:	b570      	push	{r4, r5, r6, lr}
 8000c52:	2600      	movs	r6, #0
 8000c54:	4d0c      	ldr	r5, [pc, #48]	; (8000c88 <__libc_init_array+0x38>)
 8000c56:	4c0d      	ldr	r4, [pc, #52]	; (8000c8c <__libc_init_array+0x3c>)
 8000c58:	1b64      	subs	r4, r4, r5
 8000c5a:	10a4      	asrs	r4, r4, #2
 8000c5c:	42a6      	cmp	r6, r4
 8000c5e:	d109      	bne.n	8000c74 <__libc_init_array+0x24>
 8000c60:	f000 f81a 	bl	8000c98 <_init>
 8000c64:	2600      	movs	r6, #0
 8000c66:	4d0a      	ldr	r5, [pc, #40]	; (8000c90 <__libc_init_array+0x40>)
 8000c68:	4c0a      	ldr	r4, [pc, #40]	; (8000c94 <__libc_init_array+0x44>)
 8000c6a:	1b64      	subs	r4, r4, r5
 8000c6c:	10a4      	asrs	r4, r4, #2
 8000c6e:	42a6      	cmp	r6, r4
 8000c70:	d105      	bne.n	8000c7e <__libc_init_array+0x2e>
 8000c72:	bd70      	pop	{r4, r5, r6, pc}
 8000c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c78:	4798      	blx	r3
 8000c7a:	3601      	adds	r6, #1
 8000c7c:	e7ee      	b.n	8000c5c <__libc_init_array+0xc>
 8000c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c82:	4798      	blx	r3
 8000c84:	3601      	adds	r6, #1
 8000c86:	e7f2      	b.n	8000c6e <__libc_init_array+0x1e>
 8000c88:	08000cb0 	.word	0x08000cb0
 8000c8c:	08000cb0 	.word	0x08000cb0
 8000c90:	08000cb0 	.word	0x08000cb0
 8000c94:	08000cb4 	.word	0x08000cb4

08000c98 <_init>:
 8000c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c9a:	bf00      	nop
 8000c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c9e:	bc08      	pop	{r3}
 8000ca0:	469e      	mov	lr, r3
 8000ca2:	4770      	bx	lr

08000ca4 <_fini>:
 8000ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ca6:	bf00      	nop
 8000ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000caa:	bc08      	pop	{r3}
 8000cac:	469e      	mov	lr, r3
 8000cae:	4770      	bx	lr
