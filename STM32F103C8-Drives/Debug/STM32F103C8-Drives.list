
STM32F103C8-Drives.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a88  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  08001bb8  08001bb8  00011bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bbc  08001bbc  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08001bbc  08001bbc  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bbc  08001bbc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bbc  08001bbc  00011bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bc0  08001bc0  00011bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08001bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000018  08001bdc  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08001bdc  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003792  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f16  00000000  00000000  000237d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000460  00000000  00000000  000246f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000398  00000000  00000000  00024b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000246b  00000000  00000000  00024ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003198  00000000  00000000  00027353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000abf6  00000000  00000000  0002a4eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000350e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010f8  00000000  00000000  00035134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000018 	.word	0x20000018
 800014c:	00000000 	.word	0x00000000
 8000150:	08001ba0 	.word	0x08001ba0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000001c 	.word	0x2000001c
 800016c:	08001ba0 	.word	0x08001ba0

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__gedf2>:
 80004e8:	f04f 3cff 	mov.w	ip, #4294967295
 80004ec:	e006      	b.n	80004fc <__cmpdf2+0x4>
 80004ee:	bf00      	nop

080004f0 <__ledf2>:
 80004f0:	f04f 0c01 	mov.w	ip, #1
 80004f4:	e002      	b.n	80004fc <__cmpdf2+0x4>
 80004f6:	bf00      	nop

080004f8 <__cmpdf2>:
 80004f8:	f04f 0c01 	mov.w	ip, #1
 80004fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000500:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000504:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000508:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800050c:	bf18      	it	ne
 800050e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000512:	d01b      	beq.n	800054c <__cmpdf2+0x54>
 8000514:	b001      	add	sp, #4
 8000516:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800051a:	bf0c      	ite	eq
 800051c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000520:	ea91 0f03 	teqne	r1, r3
 8000524:	bf02      	ittt	eq
 8000526:	ea90 0f02 	teqeq	r0, r2
 800052a:	2000      	moveq	r0, #0
 800052c:	4770      	bxeq	lr
 800052e:	f110 0f00 	cmn.w	r0, #0
 8000532:	ea91 0f03 	teq	r1, r3
 8000536:	bf58      	it	pl
 8000538:	4299      	cmppl	r1, r3
 800053a:	bf08      	it	eq
 800053c:	4290      	cmpeq	r0, r2
 800053e:	bf2c      	ite	cs
 8000540:	17d8      	asrcs	r0, r3, #31
 8000542:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000546:	f040 0001 	orr.w	r0, r0, #1
 800054a:	4770      	bx	lr
 800054c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000550:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000554:	d102      	bne.n	800055c <__cmpdf2+0x64>
 8000556:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800055a:	d107      	bne.n	800056c <__cmpdf2+0x74>
 800055c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000560:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000564:	d1d6      	bne.n	8000514 <__cmpdf2+0x1c>
 8000566:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800056a:	d0d3      	beq.n	8000514 <__cmpdf2+0x1c>
 800056c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__aeabi_cdrcmple>:
 8000574:	4684      	mov	ip, r0
 8000576:	4610      	mov	r0, r2
 8000578:	4662      	mov	r2, ip
 800057a:	468c      	mov	ip, r1
 800057c:	4619      	mov	r1, r3
 800057e:	4663      	mov	r3, ip
 8000580:	e000      	b.n	8000584 <__aeabi_cdcmpeq>
 8000582:	bf00      	nop

08000584 <__aeabi_cdcmpeq>:
 8000584:	b501      	push	{r0, lr}
 8000586:	f7ff ffb7 	bl	80004f8 <__cmpdf2>
 800058a:	2800      	cmp	r0, #0
 800058c:	bf48      	it	mi
 800058e:	f110 0f00 	cmnmi.w	r0, #0
 8000592:	bd01      	pop	{r0, pc}

08000594 <__aeabi_dcmpeq>:
 8000594:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000598:	f7ff fff4 	bl	8000584 <__aeabi_cdcmpeq>
 800059c:	bf0c      	ite	eq
 800059e:	2001      	moveq	r0, #1
 80005a0:	2000      	movne	r0, #0
 80005a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005a6:	bf00      	nop

080005a8 <__aeabi_dcmplt>:
 80005a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ac:	f7ff ffea 	bl	8000584 <__aeabi_cdcmpeq>
 80005b0:	bf34      	ite	cc
 80005b2:	2001      	movcc	r0, #1
 80005b4:	2000      	movcs	r0, #0
 80005b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ba:	bf00      	nop

080005bc <__aeabi_dcmple>:
 80005bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c0:	f7ff ffe0 	bl	8000584 <__aeabi_cdcmpeq>
 80005c4:	bf94      	ite	ls
 80005c6:	2001      	movls	r0, #1
 80005c8:	2000      	movhi	r0, #0
 80005ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ce:	bf00      	nop

080005d0 <__aeabi_dcmpge>:
 80005d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d4:	f7ff ffce 	bl	8000574 <__aeabi_cdrcmple>
 80005d8:	bf94      	ite	ls
 80005da:	2001      	movls	r0, #1
 80005dc:	2000      	movhi	r0, #0
 80005de:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e2:	bf00      	nop

080005e4 <__aeabi_dcmpgt>:
 80005e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005e8:	f7ff ffc4 	bl	8000574 <__aeabi_cdrcmple>
 80005ec:	bf34      	ite	cc
 80005ee:	2001      	movcc	r0, #1
 80005f0:	2000      	movcs	r0, #0
 80005f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2uiz>:
 80005f8:	004a      	lsls	r2, r1, #1
 80005fa:	d211      	bcs.n	8000620 <__aeabi_d2uiz+0x28>
 80005fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000600:	d211      	bcs.n	8000626 <__aeabi_d2uiz+0x2e>
 8000602:	d50d      	bpl.n	8000620 <__aeabi_d2uiz+0x28>
 8000604:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000608:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800060c:	d40e      	bmi.n	800062c <__aeabi_d2uiz+0x34>
 800060e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000616:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800061a:	fa23 f002 	lsr.w	r0, r3, r2
 800061e:	4770      	bx	lr
 8000620:	f04f 0000 	mov.w	r0, #0
 8000624:	4770      	bx	lr
 8000626:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800062a:	d102      	bne.n	8000632 <__aeabi_d2uiz+0x3a>
 800062c:	f04f 30ff 	mov.w	r0, #4294967295
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr

08000638 <__aeabi_fmul>:
 8000638:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000640:	bf1e      	ittt	ne
 8000642:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000646:	ea92 0f0c 	teqne	r2, ip
 800064a:	ea93 0f0c 	teqne	r3, ip
 800064e:	d06f      	beq.n	8000730 <__aeabi_fmul+0xf8>
 8000650:	441a      	add	r2, r3
 8000652:	ea80 0c01 	eor.w	ip, r0, r1
 8000656:	0240      	lsls	r0, r0, #9
 8000658:	bf18      	it	ne
 800065a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800065e:	d01e      	beq.n	800069e <__aeabi_fmul+0x66>
 8000660:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000664:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000668:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800066c:	fba0 3101 	umull	r3, r1, r0, r1
 8000670:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000674:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000678:	bf3e      	ittt	cc
 800067a:	0049      	lslcc	r1, r1, #1
 800067c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000680:	005b      	lslcc	r3, r3, #1
 8000682:	ea40 0001 	orr.w	r0, r0, r1
 8000686:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800068a:	2afd      	cmp	r2, #253	; 0xfd
 800068c:	d81d      	bhi.n	80006ca <__aeabi_fmul+0x92>
 800068e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000692:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000696:	bf08      	it	eq
 8000698:	f020 0001 	biceq.w	r0, r0, #1
 800069c:	4770      	bx	lr
 800069e:	f090 0f00 	teq	r0, #0
 80006a2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80006a6:	bf08      	it	eq
 80006a8:	0249      	lsleq	r1, r1, #9
 80006aa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80006ae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80006b2:	3a7f      	subs	r2, #127	; 0x7f
 80006b4:	bfc2      	ittt	gt
 80006b6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80006ba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80006be:	4770      	bxgt	lr
 80006c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006c4:	f04f 0300 	mov.w	r3, #0
 80006c8:	3a01      	subs	r2, #1
 80006ca:	dc5d      	bgt.n	8000788 <__aeabi_fmul+0x150>
 80006cc:	f112 0f19 	cmn.w	r2, #25
 80006d0:	bfdc      	itt	le
 80006d2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80006d6:	4770      	bxle	lr
 80006d8:	f1c2 0200 	rsb	r2, r2, #0
 80006dc:	0041      	lsls	r1, r0, #1
 80006de:	fa21 f102 	lsr.w	r1, r1, r2
 80006e2:	f1c2 0220 	rsb	r2, r2, #32
 80006e6:	fa00 fc02 	lsl.w	ip, r0, r2
 80006ea:	ea5f 0031 	movs.w	r0, r1, rrx
 80006ee:	f140 0000 	adc.w	r0, r0, #0
 80006f2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80006f6:	bf08      	it	eq
 80006f8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80006fc:	4770      	bx	lr
 80006fe:	f092 0f00 	teq	r2, #0
 8000702:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000706:	bf02      	ittt	eq
 8000708:	0040      	lsleq	r0, r0, #1
 800070a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800070e:	3a01      	subeq	r2, #1
 8000710:	d0f9      	beq.n	8000706 <__aeabi_fmul+0xce>
 8000712:	ea40 000c 	orr.w	r0, r0, ip
 8000716:	f093 0f00 	teq	r3, #0
 800071a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800071e:	bf02      	ittt	eq
 8000720:	0049      	lsleq	r1, r1, #1
 8000722:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000726:	3b01      	subeq	r3, #1
 8000728:	d0f9      	beq.n	800071e <__aeabi_fmul+0xe6>
 800072a:	ea41 010c 	orr.w	r1, r1, ip
 800072e:	e78f      	b.n	8000650 <__aeabi_fmul+0x18>
 8000730:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000734:	ea92 0f0c 	teq	r2, ip
 8000738:	bf18      	it	ne
 800073a:	ea93 0f0c 	teqne	r3, ip
 800073e:	d00a      	beq.n	8000756 <__aeabi_fmul+0x11e>
 8000740:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000744:	bf18      	it	ne
 8000746:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800074a:	d1d8      	bne.n	80006fe <__aeabi_fmul+0xc6>
 800074c:	ea80 0001 	eor.w	r0, r0, r1
 8000750:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000754:	4770      	bx	lr
 8000756:	f090 0f00 	teq	r0, #0
 800075a:	bf17      	itett	ne
 800075c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000760:	4608      	moveq	r0, r1
 8000762:	f091 0f00 	teqne	r1, #0
 8000766:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800076a:	d014      	beq.n	8000796 <__aeabi_fmul+0x15e>
 800076c:	ea92 0f0c 	teq	r2, ip
 8000770:	d101      	bne.n	8000776 <__aeabi_fmul+0x13e>
 8000772:	0242      	lsls	r2, r0, #9
 8000774:	d10f      	bne.n	8000796 <__aeabi_fmul+0x15e>
 8000776:	ea93 0f0c 	teq	r3, ip
 800077a:	d103      	bne.n	8000784 <__aeabi_fmul+0x14c>
 800077c:	024b      	lsls	r3, r1, #9
 800077e:	bf18      	it	ne
 8000780:	4608      	movne	r0, r1
 8000782:	d108      	bne.n	8000796 <__aeabi_fmul+0x15e>
 8000784:	ea80 0001 	eor.w	r0, r0, r1
 8000788:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800078c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000790:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000794:	4770      	bx	lr
 8000796:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800079a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800079e:	4770      	bx	lr

080007a0 <__aeabi_fdiv>:
 80007a0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80007a8:	bf1e      	ittt	ne
 80007aa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80007ae:	ea92 0f0c 	teqne	r2, ip
 80007b2:	ea93 0f0c 	teqne	r3, ip
 80007b6:	d069      	beq.n	800088c <__aeabi_fdiv+0xec>
 80007b8:	eba2 0203 	sub.w	r2, r2, r3
 80007bc:	ea80 0c01 	eor.w	ip, r0, r1
 80007c0:	0249      	lsls	r1, r1, #9
 80007c2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80007c6:	d037      	beq.n	8000838 <__aeabi_fdiv+0x98>
 80007c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80007cc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80007d0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80007d4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80007d8:	428b      	cmp	r3, r1
 80007da:	bf38      	it	cc
 80007dc:	005b      	lslcc	r3, r3, #1
 80007de:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80007e2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80007e6:	428b      	cmp	r3, r1
 80007e8:	bf24      	itt	cs
 80007ea:	1a5b      	subcs	r3, r3, r1
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80007f4:	bf24      	itt	cs
 80007f6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80007fa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007fe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000802:	bf24      	itt	cs
 8000804:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000808:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800080c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000810:	bf24      	itt	cs
 8000812:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000816:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081a:	011b      	lsls	r3, r3, #4
 800081c:	bf18      	it	ne
 800081e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000822:	d1e0      	bne.n	80007e6 <__aeabi_fdiv+0x46>
 8000824:	2afd      	cmp	r2, #253	; 0xfd
 8000826:	f63f af50 	bhi.w	80006ca <__aeabi_fmul+0x92>
 800082a:	428b      	cmp	r3, r1
 800082c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000830:	bf08      	it	eq
 8000832:	f020 0001 	biceq.w	r0, r0, #1
 8000836:	4770      	bx	lr
 8000838:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800083c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000840:	327f      	adds	r2, #127	; 0x7f
 8000842:	bfc2      	ittt	gt
 8000844:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000848:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800084c:	4770      	bxgt	lr
 800084e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000852:	f04f 0300 	mov.w	r3, #0
 8000856:	3a01      	subs	r2, #1
 8000858:	e737      	b.n	80006ca <__aeabi_fmul+0x92>
 800085a:	f092 0f00 	teq	r2, #0
 800085e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000862:	bf02      	ittt	eq
 8000864:	0040      	lsleq	r0, r0, #1
 8000866:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800086a:	3a01      	subeq	r2, #1
 800086c:	d0f9      	beq.n	8000862 <__aeabi_fdiv+0xc2>
 800086e:	ea40 000c 	orr.w	r0, r0, ip
 8000872:	f093 0f00 	teq	r3, #0
 8000876:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800087a:	bf02      	ittt	eq
 800087c:	0049      	lsleq	r1, r1, #1
 800087e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000882:	3b01      	subeq	r3, #1
 8000884:	d0f9      	beq.n	800087a <__aeabi_fdiv+0xda>
 8000886:	ea41 010c 	orr.w	r1, r1, ip
 800088a:	e795      	b.n	80007b8 <__aeabi_fdiv+0x18>
 800088c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000890:	ea92 0f0c 	teq	r2, ip
 8000894:	d108      	bne.n	80008a8 <__aeabi_fdiv+0x108>
 8000896:	0242      	lsls	r2, r0, #9
 8000898:	f47f af7d 	bne.w	8000796 <__aeabi_fmul+0x15e>
 800089c:	ea93 0f0c 	teq	r3, ip
 80008a0:	f47f af70 	bne.w	8000784 <__aeabi_fmul+0x14c>
 80008a4:	4608      	mov	r0, r1
 80008a6:	e776      	b.n	8000796 <__aeabi_fmul+0x15e>
 80008a8:	ea93 0f0c 	teq	r3, ip
 80008ac:	d104      	bne.n	80008b8 <__aeabi_fdiv+0x118>
 80008ae:	024b      	lsls	r3, r1, #9
 80008b0:	f43f af4c 	beq.w	800074c <__aeabi_fmul+0x114>
 80008b4:	4608      	mov	r0, r1
 80008b6:	e76e      	b.n	8000796 <__aeabi_fmul+0x15e>
 80008b8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80008bc:	bf18      	it	ne
 80008be:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80008c2:	d1ca      	bne.n	800085a <__aeabi_fdiv+0xba>
 80008c4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80008c8:	f47f af5c 	bne.w	8000784 <__aeabi_fmul+0x14c>
 80008cc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80008d0:	f47f af3c 	bne.w	800074c <__aeabi_fmul+0x114>
 80008d4:	e75f      	b.n	8000796 <__aeabi_fmul+0x15e>
 80008d6:	bf00      	nop

080008d8 <App_voidstartApp>:
 * \Parameters (in) : None
 *
 * \Return value:   : None
 *******************************************************************************/
void App_voidstartApp(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
	}

	/*****************************************************************************************************************/
#elif(APPLICATION == MTIM1_TEST)
	/*****************************************************************************************************************/
	MRCC_enSysClkINIT();
 80008de:	f000 fb9f 	bl	8001020 <MRCC_enSysClkINIT>
	MRCC_enEnablePeripheralCLK(MRCC_IOPA);
 80008e2:	2042      	movs	r0, #66	; 0x42
 80008e4:	f000 fbd8 	bl	8001098 <MRCC_enEnablePeripheralCLK>
	MRCC_enEnablePeripheralCLK(MRCC_AFIO);
 80008e8:	2040      	movs	r0, #64	; 0x40
 80008ea:	f000 fbd5 	bl	8001098 <MRCC_enEnablePeripheralCLK>
	MRCC_enEnablePeripheralCLK(MRCC_USART1);
 80008ee:	204e      	movs	r0, #78	; 0x4e
 80008f0:	f000 fbd2 	bl	8001098 <MRCC_enEnablePeripheralCLK>
	MRCC_enEnablePeripheralCLK(MRCC_TIM1);
 80008f4:	204b      	movs	r0, #75	; 0x4b
 80008f6:	f000 fbcf 	bl	8001098 <MRCC_enEnablePeripheralCLK>


	MGPIO_enSetPinDirection(PORTA, PIN0, OUT_2MHZ_PUSH_PULL);
 80008fa:	2202      	movs	r2, #2
 80008fc:	2100      	movs	r1, #0
 80008fe:	2000      	movs	r0, #0
 8000900:	f000 f9d4 	bl	8000cac <MGPIO_enSetPinDirection>
	MGPIO_enSetPinDirection(PORTA, PIN8, IN_FLOATING);
 8000904:	2204      	movs	r2, #4
 8000906:	2108      	movs	r1, #8
 8000908:	2000      	movs	r0, #0
 800090a:	f000 f9cf 	bl	8000cac <MGPIO_enSetPinDirection>

	MGPIO_enSetPinDirection(MUSART1_TX_PIN, OUT_2MHZ_AF_PUSH_PULL);
 800090e:	220a      	movs	r2, #10
 8000910:	2109      	movs	r1, #9
 8000912:	2000      	movs	r0, #0
 8000914:	f000 f9ca 	bl	8000cac <MGPIO_enSetPinDirection>
	MGPIO_enSetPinDirection(MUSART1_RX_PIN, IN_FLOATING);
 8000918:	2204      	movs	r2, #4
 800091a:	210a      	movs	r1, #10
 800091c:	2000      	movs	r0, #0
 800091e:	f000 f9c5 	bl	8000cac <MGPIO_enSetPinDirection>

	MUSART_INIT_t uart1;
	uart1.MUSART_BAUDRATE = MUSART_BAUDRATE_9600_CLK_8M;
 8000922:	f240 3341 	movw	r3, #833	; 0x341
 8000926:	60bb      	str	r3, [r7, #8]
	uart1.MUSART_DATA_SIZE = MUSART_9BIT_DATA;
 8000928:	2303      	movs	r3, #3
 800092a:	717b      	strb	r3, [r7, #5]
	uart1.MUSART_PARITY_MODE = MUSART_PARITY_DISABLE;
 800092c:	2306      	movs	r3, #6
 800092e:	71bb      	strb	r3, [r7, #6]
	uart1.MUSART_STOP_MODE = MUSART_STOPBIT1;
 8000930:	2307      	movs	r3, #7
 8000932:	71fb      	strb	r3, [r7, #7]
	uart1.MUSART_WIRE_MODE = MUSART_FULL_DUPLEX;
 8000934:	2301      	movs	r3, #1
 8000936:	713b      	strb	r3, [r7, #4]

	MUSART_enInit(MUSART1, &uart1);
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	4619      	mov	r1, r3
 800093c:	2000      	movs	r0, #0
 800093e:	f000 fdc7 	bl	80014d0 <MUSART_enInit>
	MNVIC_enEnableNVIC();
 8000942:	f000 fb11 	bl	8000f68 <MNVIC_enEnableNVIC>
	MTIMER1_enSetCallBack(ICU);
 8000946:	482c      	ldr	r0, [pc, #176]	; (80009f8 <App_voidstartApp+0x120>)
 8000948:	f000 fd70 	bl	800142c <MTIMER1_enSetCallBack>
	MTIMER1_enInit();
 800094c:	f000 fcea 	bl	8001324 <MTIMER1_enInit>
	MTIMER1_setPrescaler(8);
 8000950:	2008      	movs	r0, #8
 8000952:	f000 fd1b 	bl	800138c <MTIMER1_setPrescaler>

	while (1)
	{
		MTIMER1_enEnableINT();
 8000956:	f000 fd49 	bl	80013ec <MTIMER1_enEnableINT>
		MNVIC_enEnableInt(MNVIC_TIM1_CC_INT);
 800095a:	201b      	movs	r0, #27
 800095c:	f000 fb12 	bl	8000f84 <MNVIC_enEnableInt>
		MTIMER1_enStart();
 8000960:	f000 fd24 	bl	80013ac <MTIMER1_enStart>

		MGPIO_enSetPinValue(PORTA, PIN0, HIGH);
 8000964:	2201      	movs	r2, #1
 8000966:	2100      	movs	r1, #0
 8000968:	2000      	movs	r0, #0
 800096a:	f000 fa79 	bl	8000e60 <MGPIO_enSetPinValue>
		MSYSTICK_enSetBusyWait(10);
 800096e:	200a      	movs	r0, #10
 8000970:	f000 fc80 	bl	8001274 <MSYSTICK_enSetBusyWait>
		MGPIO_enSetPinValue(PORTA, PIN0, LOW);
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	2000      	movs	r0, #0
 800097a:	f000 fa71 	bl	8000e60 <MGPIO_enSetPinValue>



		while(state!= STATE3);
 800097e:	bf00      	nop
 8000980:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <App_voidstartApp+0x124>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b03      	cmp	r3, #3
 8000988:	d1fa      	bne.n	8000980 <App_voidstartApp+0xa8>


		state = STATE1;
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <App_voidstartApp+0x124>)
 800098c:	2201      	movs	r2, #1
 800098e:	701a      	strb	r2, [r3, #0]


		u32 TimeTicks = (u32)Reading_2 - (u32)Reading_1;
 8000990:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <App_voidstartApp+0x128>)
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	b29b      	uxth	r3, r3
 8000996:	461a      	mov	r2, r3
 8000998:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <App_voidstartApp+0x12c>)
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	b29b      	uxth	r3, r3
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	617b      	str	r3, [r7, #20]

		f32 time  = (TimeTicks * (1 / 1000000));
 80009a2:	f04f 0300 	mov.w	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
		u16 ptrValue = ceil(34300 * (time/2));
 80009a8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80009ac:	6938      	ldr	r0, [r7, #16]
 80009ae:	f7ff fef7 	bl	80007a0 <__aeabi_fdiv>
 80009b2:	4603      	mov	r3, r0
 80009b4:	4914      	ldr	r1, [pc, #80]	; (8000a08 <App_voidstartApp+0x130>)
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fe3e 	bl	8000638 <__aeabi_fmul>
 80009bc:	4603      	mov	r3, r0
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fd3a 	bl	8000438 <__aeabi_f2d>
 80009c4:	4602      	mov	r2, r0
 80009c6:	460b      	mov	r3, r1
 80009c8:	4610      	mov	r0, r2
 80009ca:	4619      	mov	r1, r3
 80009cc:	f001 f868 	bl	8001aa0 <ceil>
 80009d0:	4602      	mov	r2, r0
 80009d2:	460b      	mov	r3, r1
 80009d4:	4610      	mov	r0, r2
 80009d6:	4619      	mov	r1, r3
 80009d8:	f7ff fe0e 	bl	80005f8 <__aeabi_d2uiz>
 80009dc:	4603      	mov	r3, r0
 80009de:	81fb      	strh	r3, [r7, #14]

		MUSART_enBusySendByte(MUSART1, ptrValue +'\0');
 80009e0:	89fb      	ldrh	r3, [r7, #14]
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	4619      	mov	r1, r3
 80009e6:	2000      	movs	r0, #0
 80009e8:	f000 fe8e 	bl	8001708 <MUSART_enBusySendByte>
		MUSART_enBusySendString(MUSART1, "\r\n");
 80009ec:	4907      	ldr	r1, [pc, #28]	; (8000a0c <App_voidstartApp+0x134>)
 80009ee:	2000      	movs	r0, #0
 80009f0:	f000 feca 	bl	8001788 <MUSART_enBusySendString>
	{
 80009f4:	e7af      	b.n	8000956 <App_voidstartApp+0x7e>
 80009f6:	bf00      	nop
 80009f8:	08000a11 	.word	0x08000a11
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000036 	.word	0x20000036
 8000a04:	20000034 	.word	0x20000034
 8000a08:	4705fc00 	.word	0x4705fc00
 8000a0c:	08001bb8 	.word	0x08001bb8

08000a10 <ICU>:
#error("Wrong Unit Testing");
#endif
}

void ICU(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	if(state == STATE1)
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <ICU+0x4c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d109      	bne.n	8000a32 <ICU+0x22>
	{
		//Change State
		MTIMER1_ICU_enRead(&Reading_1);
 8000a1e:	4810      	ldr	r0, [pc, #64]	; (8000a60 <ICU+0x50>)
 8000a20:	f000 fd14 	bl	800144c <MTIMER1_ICU_enRead>
		MTIMER1_ICU_enSetTrigger(1);
 8000a24:	2001      	movs	r0, #1
 8000a26:	f000 fd23 	bl	8001470 <MTIMER1_ICU_enSetTrigger>
		state=STATE2;
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <ICU+0x4c>)
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	701a      	strb	r2, [r3, #0]
		MTIMER1_enDisableINT();
		MTIMER1_enStop();
		MNVIC_enDisableInt(MNVIC_TIM1_CC_INT);
	}

}
 8000a30:	e011      	b.n	8000a56 <ICU+0x46>
	else if(state == STATE2 ){
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <ICU+0x4c>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	2b02      	cmp	r3, #2
 8000a3a:	d10c      	bne.n	8000a56 <ICU+0x46>
		MTIMER1_ICU_enRead(&Reading_2);
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <ICU+0x54>)
 8000a3e:	f000 fd05 	bl	800144c <MTIMER1_ICU_enRead>
		state=STATE3;
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <ICU+0x4c>)
 8000a44:	2203      	movs	r2, #3
 8000a46:	701a      	strb	r2, [r3, #0]
		MTIMER1_enDisableINT();
 8000a48:	f000 fce0 	bl	800140c <MTIMER1_enDisableINT>
		MTIMER1_enStop();
 8000a4c:	f000 fcbe 	bl	80013cc <MTIMER1_enStop>
		MNVIC_enDisableInt(MNVIC_TIM1_CC_INT);
 8000a50:	201b      	movs	r0, #27
 8000a52:	f000 fabd 	bl	8000fd0 <MNVIC_enDisableInt>
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000000 	.word	0x20000000
 8000a60:	20000034 	.word	0x20000034
 8000a64:	20000036 	.word	0x20000036

08000a68 <ADC1_2_IRQHandler>:
/********************************************************************************
 * HANDLEAR IMPLEMENTATION
 ********************************************************************************/

void ADC1_2_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	if (ADC_CallBack != NULL)
 8000a6c:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <ADC1_2_IRQHandler+0x24>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d008      	beq.n	8000a86 <ADC1_2_IRQHandler+0x1e>
	{
		if (GET_BIT(ADC->ADC_SR, EOC))
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <ADC1_2_IRQHandler+0x28>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	085b      	lsrs	r3, r3, #1
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	2b00      	cmp	r3, #0
		}
		else if (GET_BIT(ADC->ADC_SR, JEOC))
		{

		}
		ADC_CallBack();
 8000a80:	4b02      	ldr	r3, [pc, #8]	; (8000a8c <ADC1_2_IRQHandler+0x24>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4798      	blx	r3
	}
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000038 	.word	0x20000038
 8000a90:	40012400 	.word	0x40012400

08000a94 <DMA1_Channel1_IRQHandler>:
}



void DMA1_Channel1_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	if (DMA_CallBack[Channel1] != NULL)
 8000a98:	4b04      	ldr	r3, [pc, #16]	; (8000aac <DMA1_Channel1_IRQHandler+0x18>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d002      	beq.n	8000aa6 <DMA1_Channel1_IRQHandler+0x12>
	{
		DMA_CallBack[Channel1]();
 8000aa0:	4b02      	ldr	r3, [pc, #8]	; (8000aac <DMA1_Channel1_IRQHandler+0x18>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4798      	blx	r3
	}
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	2000003c 	.word	0x2000003c

08000ab0 <DMA1_Channel2_IRQHandler>:

void DMA1_Channel2_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	if (DMA_CallBack[Channel2] != NULL)
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <DMA1_Channel2_IRQHandler+0x18>)
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d002      	beq.n	8000ac2 <DMA1_Channel2_IRQHandler+0x12>
	{
		DMA_CallBack[Channel2]();
 8000abc:	4b02      	ldr	r3, [pc, #8]	; (8000ac8 <DMA1_Channel2_IRQHandler+0x18>)
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	4798      	blx	r3
	}
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	2000003c 	.word	0x2000003c

08000acc <DMA1_Channel3_IRQHandler>:

void DMA1_Channel3_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	if (DMA_CallBack[Channel3] != NULL)
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <DMA1_Channel3_IRQHandler+0x18>)
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d002      	beq.n	8000ade <DMA1_Channel3_IRQHandler+0x12>
	{
		DMA_CallBack[Channel3]();
 8000ad8:	4b02      	ldr	r3, [pc, #8]	; (8000ae4 <DMA1_Channel3_IRQHandler+0x18>)
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	4798      	blx	r3
	}
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	2000003c 	.word	0x2000003c

08000ae8 <DMA1_Channel4_IRQHandler>:

void DMA1_Channel4_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	if (DMA_CallBack[Channel4] != NULL)
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <DMA1_Channel4_IRQHandler+0x18>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d002      	beq.n	8000afa <DMA1_Channel4_IRQHandler+0x12>
	{
		DMA_CallBack[Channel4]();
 8000af4:	4b02      	ldr	r3, [pc, #8]	; (8000b00 <DMA1_Channel4_IRQHandler+0x18>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	4798      	blx	r3
	}
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2000003c 	.word	0x2000003c

08000b04 <DMA1_Channel5_IRQHandler>:

void DMA1_Channel5_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	if (DMA_CallBack[Channel5] != NULL)
 8000b08:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <DMA1_Channel5_IRQHandler+0x18>)
 8000b0a:	691b      	ldr	r3, [r3, #16]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d002      	beq.n	8000b16 <DMA1_Channel5_IRQHandler+0x12>
	{
		DMA_CallBack[Channel5]();
 8000b10:	4b02      	ldr	r3, [pc, #8]	; (8000b1c <DMA1_Channel5_IRQHandler+0x18>)
 8000b12:	691b      	ldr	r3, [r3, #16]
 8000b14:	4798      	blx	r3
	}
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2000003c 	.word	0x2000003c

08000b20 <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	if (DMA_CallBack[Channel6] != NULL)
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <DMA1_Channel6_IRQHandler+0x18>)
 8000b26:	695b      	ldr	r3, [r3, #20]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d002      	beq.n	8000b32 <DMA1_Channel6_IRQHandler+0x12>
	{
		DMA_CallBack[Channel6]();
 8000b2c:	4b02      	ldr	r3, [pc, #8]	; (8000b38 <DMA1_Channel6_IRQHandler+0x18>)
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	4798      	blx	r3
	}
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	2000003c 	.word	0x2000003c

08000b3c <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	if (DMA_CallBack[Channel7] != NULL)
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <DMA1_Channel7_IRQHandler+0x18>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d002      	beq.n	8000b4e <DMA1_Channel7_IRQHandler+0x12>
	{
		DMA_CallBack[Channel7]();
 8000b48:	4b02      	ldr	r3, [pc, #8]	; (8000b54 <DMA1_Channel7_IRQHandler+0x18>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4798      	blx	r3
	}
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	2000003c 	.word	0x2000003c

08000b58 <EXTI0_IRQHandler>:
 *********************************************************************************************************************/
/*	@brief 	Handlear has an callback fun from the App layer and Excecuted based on
 * 			the Selected Line on the Callback fun. */

void EXTI0_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI0_LINE] != NULL)
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <EXTI0_IRQHandler+0x18>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d002      	beq.n	8000b6a <EXTI0_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI0_LINE]();
 8000b64:	4b02      	ldr	r3, [pc, #8]	; (8000b70 <EXTI0_IRQHandler+0x18>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4798      	blx	r3
	}
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000058 	.word	0x20000058

08000b74 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI1_LINE] != NULL)
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <EXTI1_IRQHandler+0x18>)
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d002      	beq.n	8000b86 <EXTI1_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI1_LINE]();
 8000b80:	4b02      	ldr	r3, [pc, #8]	; (8000b8c <EXTI1_IRQHandler+0x18>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	4798      	blx	r3
	}

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000058 	.word	0x20000058

08000b90 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI2_LINE] != NULL)
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <EXTI2_IRQHandler+0x18>)
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d002      	beq.n	8000ba2 <EXTI2_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI2_LINE]();
 8000b9c:	4b02      	ldr	r3, [pc, #8]	; (8000ba8 <EXTI2_IRQHandler+0x18>)
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	4798      	blx	r3
	}
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000058 	.word	0x20000058

08000bac <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI3_LINE] != NULL)
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <EXTI3_IRQHandler+0x18>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d002      	beq.n	8000bbe <EXTI3_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI3_LINE]();
 8000bb8:	4b02      	ldr	r3, [pc, #8]	; (8000bc4 <EXTI3_IRQHandler+0x18>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	4798      	blx	r3
	}
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000058 	.word	0x20000058

08000bc8 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI4_LINE] != NULL)
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <EXTI4_IRQHandler+0x18>)
 8000bce:	691b      	ldr	r3, [r3, #16]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d002      	beq.n	8000bda <EXTI4_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI4_LINE]();
 8000bd4:	4b02      	ldr	r3, [pc, #8]	; (8000be0 <EXTI4_IRQHandler+0x18>)
 8000bd6:	691b      	ldr	r3, [r3, #16]
 8000bd8:	4798      	blx	r3
	}
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000058 	.word	0x20000058

08000be4 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI5_LINE] != NULL)
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <EXTI9_5_IRQHandler+0x58>)
 8000bea:	695b      	ldr	r3, [r3, #20]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d003      	beq.n	8000bf8 <EXTI9_5_IRQHandler+0x14>
	{
		MEXTI_CALLBACK[MEXTI5_LINE]();
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <EXTI9_5_IRQHandler+0x58>)
 8000bf2:	695b      	ldr	r3, [r3, #20]
 8000bf4:	4798      	blx	r3
	else if (MEXTI_CALLBACK[MEXTI9_LINE] != NULL)
	{
		MEXTI_CALLBACK[MEXTI9_LINE]();

	}
}
 8000bf6:	e01e      	b.n	8000c36 <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI6_LINE] != NULL)
 8000bf8:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <EXTI9_5_IRQHandler+0x58>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d003      	beq.n	8000c08 <EXTI9_5_IRQHandler+0x24>
		MEXTI_CALLBACK[MEXTI6_LINE]();
 8000c00:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <EXTI9_5_IRQHandler+0x58>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4798      	blx	r3
}
 8000c06:	e016      	b.n	8000c36 <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI7_LINE] != NULL)
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <EXTI9_5_IRQHandler+0x58>)
 8000c0a:	69db      	ldr	r3, [r3, #28]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d003      	beq.n	8000c18 <EXTI9_5_IRQHandler+0x34>
		MEXTI_CALLBACK[MEXTI7_LINE]();
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <EXTI9_5_IRQHandler+0x58>)
 8000c12:	69db      	ldr	r3, [r3, #28]
 8000c14:	4798      	blx	r3
}
 8000c16:	e00e      	b.n	8000c36 <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI8_LINE] != NULL)
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <EXTI9_5_IRQHandler+0x58>)
 8000c1a:	6a1b      	ldr	r3, [r3, #32]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d003      	beq.n	8000c28 <EXTI9_5_IRQHandler+0x44>
		MEXTI_CALLBACK[MEXTI8_LINE]();
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <EXTI9_5_IRQHandler+0x58>)
 8000c22:	6a1b      	ldr	r3, [r3, #32]
 8000c24:	4798      	blx	r3
}
 8000c26:	e006      	b.n	8000c36 <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI9_LINE] != NULL)
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <EXTI9_5_IRQHandler+0x58>)
 8000c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d002      	beq.n	8000c36 <EXTI9_5_IRQHandler+0x52>
		MEXTI_CALLBACK[MEXTI9_LINE]();
 8000c30:	4b02      	ldr	r3, [pc, #8]	; (8000c3c <EXTI9_5_IRQHandler+0x58>)
 8000c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c34:	4798      	blx	r3
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000058 	.word	0x20000058

08000c40 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI10_LINE] != NULL)
 8000c44:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <EXTI15_10_IRQHandler+0x68>)
 8000c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d003      	beq.n	8000c54 <EXTI15_10_IRQHandler+0x14>
	{
		MEXTI_CALLBACK[MEXTI10_LINE]();
 8000c4c:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <EXTI15_10_IRQHandler+0x68>)
 8000c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c50:	4798      	blx	r3
	else if (MEXTI_CALLBACK[MEXTI15_LINE] != NULL)
	{
		MEXTI_CALLBACK[MEXTI15_LINE]();

	}
}
 8000c52:	e026      	b.n	8000ca2 <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI11_LINE] != NULL)
 8000c54:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <EXTI15_10_IRQHandler+0x68>)
 8000c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d003      	beq.n	8000c64 <EXTI15_10_IRQHandler+0x24>
		MEXTI_CALLBACK[MEXTI11_LINE]();
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <EXTI15_10_IRQHandler+0x68>)
 8000c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c60:	4798      	blx	r3
}
 8000c62:	e01e      	b.n	8000ca2 <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI12_LINE] != NULL)
 8000c64:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <EXTI15_10_IRQHandler+0x68>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d003      	beq.n	8000c74 <EXTI15_10_IRQHandler+0x34>
		MEXTI_CALLBACK[MEXTI12_LINE]();
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <EXTI15_10_IRQHandler+0x68>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	4798      	blx	r3
}
 8000c72:	e016      	b.n	8000ca2 <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI13_LINE] != NULL)
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <EXTI15_10_IRQHandler+0x68>)
 8000c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d003      	beq.n	8000c84 <EXTI15_10_IRQHandler+0x44>
		MEXTI_CALLBACK[MEXTI13_LINE]();
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <EXTI15_10_IRQHandler+0x68>)
 8000c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c80:	4798      	blx	r3
}
 8000c82:	e00e      	b.n	8000ca2 <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI14_LINE] != NULL)
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <EXTI15_10_IRQHandler+0x68>)
 8000c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d003      	beq.n	8000c94 <EXTI15_10_IRQHandler+0x54>
		MEXTI_CALLBACK[MEXTI14_LINE]();
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <EXTI15_10_IRQHandler+0x68>)
 8000c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c90:	4798      	blx	r3
}
 8000c92:	e006      	b.n	8000ca2 <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI15_LINE] != NULL)
 8000c94:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <EXTI15_10_IRQHandler+0x68>)
 8000c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d002      	beq.n	8000ca2 <EXTI15_10_IRQHandler+0x62>
		MEXTI_CALLBACK[MEXTI15_LINE]();
 8000c9c:	4b02      	ldr	r3, [pc, #8]	; (8000ca8 <EXTI15_10_IRQHandler+0x68>)
 8000c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ca0:	4798      	blx	r3
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000058 	.word	0x20000058

08000cac <MGPIO_enSetPinDirection>:
 *
 * \Return value:   : ErrorState_t  -> SUCEESS
 * 								   -> OUT_OF_RANG_ERR
 *******************************************************************************/
ErrorState_t MGPIO_enSetPinDirection(MGPIO_PORT_t copy_u8port, MGPIO_PIN_t copy_u8pin, u8 copy_u8Mode)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	71bb      	strb	r3, [r7, #6]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	73fb      	strb	r3, [r7, #15]
	 * 	3. Set the 4bit Configuration with the Selected Mode
	 *
	 * 	@اhint 	use 4bit Masked pins to clear and shifting it correspoinding with
	 * 			the Gpio pin and use that offest when setting the Mode
	 * */
	switch(copy_u8port)
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d07f      	beq.n	8000dc8 <MGPIO_enSetPinDirection+0x11c>
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	f300 80b9 	bgt.w	8000e40 <MGPIO_enSetPinDirection+0x194>
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d002      	beq.n	8000cd8 <MGPIO_enSetPinDirection+0x2c>
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d03c      	beq.n	8000d50 <MGPIO_enSetPinDirection+0xa4>
 8000cd6:	e0b3      	b.n	8000e40 <MGPIO_enSetPinDirection+0x194>
	{
	case PORTA:
		if (copy_u8pin < MGPIO_CRL_MAX)
 8000cd8:	79bb      	ldrb	r3, [r7, #6]
 8000cda:	2b07      	cmp	r3, #7
 8000cdc:	d817      	bhi.n	8000d0e <MGPIO_enSetPinDirection+0x62>
		{
			GPIOA->GPIO_CRL &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET)) ;
 8000cde:	4b5d      	ldr	r3, [pc, #372]	; (8000e54 <MGPIO_enSetPinDirection+0x1a8>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	79ba      	ldrb	r2, [r7, #6]
 8000ce4:	0092      	lsls	r2, r2, #2
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cec:	43d2      	mvns	r2, r2
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4a58      	ldr	r2, [pc, #352]	; (8000e54 <MGPIO_enSetPinDirection+0x1a8>)
 8000cf2:	400b      	ands	r3, r1
 8000cf4:	6013      	str	r3, [r2, #0]
			GPIOA->GPIO_CRL |= copy_u8Mode << (copy_u8pin * MGPIO_OFFSET) ;
 8000cf6:	4b57      	ldr	r3, [pc, #348]	; (8000e54 <MGPIO_enSetPinDirection+0x1a8>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	7979      	ldrb	r1, [r7, #5]
 8000cfc:	79ba      	ldrb	r2, [r7, #6]
 8000cfe:	0092      	lsls	r2, r2, #2
 8000d00:	fa01 f202 	lsl.w	r2, r1, r2
 8000d04:	4611      	mov	r1, r2
 8000d06:	4a53      	ldr	r2, [pc, #332]	; (8000e54 <MGPIO_enSetPinDirection+0x1a8>)
 8000d08:	430b      	orrs	r3, r1
 8000d0a:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000d0c:	e09b      	b.n	8000e46 <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < MGPIO_CRH_MAX)
 8000d0e:	79bb      	ldrb	r3, [r7, #6]
 8000d10:	2b0f      	cmp	r3, #15
 8000d12:	d81a      	bhi.n	8000d4a <MGPIO_enSetPinDirection+0x9e>
			copy_u8pin -= MGPIO_CRL_MAX  ;
 8000d14:	79bb      	ldrb	r3, [r7, #6]
 8000d16:	3b08      	subs	r3, #8
 8000d18:	71bb      	strb	r3, [r7, #6]
			GPIOA->GPIO_CRH &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET));
 8000d1a:	4b4e      	ldr	r3, [pc, #312]	; (8000e54 <MGPIO_enSetPinDirection+0x1a8>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	79ba      	ldrb	r2, [r7, #6]
 8000d20:	0092      	lsls	r2, r2, #2
 8000d22:	210f      	movs	r1, #15
 8000d24:	fa01 f202 	lsl.w	r2, r1, r2
 8000d28:	43d2      	mvns	r2, r2
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4a49      	ldr	r2, [pc, #292]	; (8000e54 <MGPIO_enSetPinDirection+0x1a8>)
 8000d2e:	400b      	ands	r3, r1
 8000d30:	6053      	str	r3, [r2, #4]
			GPIOA->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET));
 8000d32:	4b48      	ldr	r3, [pc, #288]	; (8000e54 <MGPIO_enSetPinDirection+0x1a8>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	7979      	ldrb	r1, [r7, #5]
 8000d38:	79ba      	ldrb	r2, [r7, #6]
 8000d3a:	0092      	lsls	r2, r2, #2
 8000d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d40:	4611      	mov	r1, r2
 8000d42:	4a44      	ldr	r2, [pc, #272]	; (8000e54 <MGPIO_enSetPinDirection+0x1a8>)
 8000d44:	430b      	orrs	r3, r1
 8000d46:	6053      	str	r3, [r2, #4]
		break;
 8000d48:	e07d      	b.n	8000e46 <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	73fb      	strb	r3, [r7, #15]
		break;
 8000d4e:	e07a      	b.n	8000e46 <MGPIO_enSetPinDirection+0x19a>

	case PORTB:
		if (copy_u8pin < MGPIO_CRL_MAX)
 8000d50:	79bb      	ldrb	r3, [r7, #6]
 8000d52:	2b07      	cmp	r3, #7
 8000d54:	d817      	bhi.n	8000d86 <MGPIO_enSetPinDirection+0xda>
		{
			GPIOB->GPIO_CRL &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET)) ;
 8000d56:	4b40      	ldr	r3, [pc, #256]	; (8000e58 <MGPIO_enSetPinDirection+0x1ac>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	79ba      	ldrb	r2, [r7, #6]
 8000d5c:	0092      	lsls	r2, r2, #2
 8000d5e:	210f      	movs	r1, #15
 8000d60:	fa01 f202 	lsl.w	r2, r1, r2
 8000d64:	43d2      	mvns	r2, r2
 8000d66:	4611      	mov	r1, r2
 8000d68:	4a3b      	ldr	r2, [pc, #236]	; (8000e58 <MGPIO_enSetPinDirection+0x1ac>)
 8000d6a:	400b      	ands	r3, r1
 8000d6c:	6013      	str	r3, [r2, #0]
			GPIOB->GPIO_CRL |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET)) ;
 8000d6e:	4b3a      	ldr	r3, [pc, #232]	; (8000e58 <MGPIO_enSetPinDirection+0x1ac>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	7979      	ldrb	r1, [r7, #5]
 8000d74:	79ba      	ldrb	r2, [r7, #6]
 8000d76:	0092      	lsls	r2, r2, #2
 8000d78:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4a36      	ldr	r2, [pc, #216]	; (8000e58 <MGPIO_enSetPinDirection+0x1ac>)
 8000d80:	430b      	orrs	r3, r1
 8000d82:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000d84:	e05f      	b.n	8000e46 <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < MGPIO_CRH_MAX)
 8000d86:	79bb      	ldrb	r3, [r7, #6]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d81a      	bhi.n	8000dc2 <MGPIO_enSetPinDirection+0x116>
			copy_u8pin -= MGPIO_CRL_MAX ;
 8000d8c:	79bb      	ldrb	r3, [r7, #6]
 8000d8e:	3b08      	subs	r3, #8
 8000d90:	71bb      	strb	r3, [r7, #6]
			GPIOB->GPIO_CRH &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET)) ;
 8000d92:	4b31      	ldr	r3, [pc, #196]	; (8000e58 <MGPIO_enSetPinDirection+0x1ac>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	79ba      	ldrb	r2, [r7, #6]
 8000d98:	0092      	lsls	r2, r2, #2
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000da0:	43d2      	mvns	r2, r2
 8000da2:	4611      	mov	r1, r2
 8000da4:	4a2c      	ldr	r2, [pc, #176]	; (8000e58 <MGPIO_enSetPinDirection+0x1ac>)
 8000da6:	400b      	ands	r3, r1
 8000da8:	6053      	str	r3, [r2, #4]
			GPIOB->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET)) ;
 8000daa:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <MGPIO_enSetPinDirection+0x1ac>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	7979      	ldrb	r1, [r7, #5]
 8000db0:	79ba      	ldrb	r2, [r7, #6]
 8000db2:	0092      	lsls	r2, r2, #2
 8000db4:	fa01 f202 	lsl.w	r2, r1, r2
 8000db8:	4611      	mov	r1, r2
 8000dba:	4a27      	ldr	r2, [pc, #156]	; (8000e58 <MGPIO_enSetPinDirection+0x1ac>)
 8000dbc:	430b      	orrs	r3, r1
 8000dbe:	6053      	str	r3, [r2, #4]
		break;
 8000dc0:	e041      	b.n	8000e46 <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	73fb      	strb	r3, [r7, #15]
		break;
 8000dc6:	e03e      	b.n	8000e46 <MGPIO_enSetPinDirection+0x19a>

	case PORTC:
		if (copy_u8pin < MGPIO_CRL_MAX)
 8000dc8:	79bb      	ldrb	r3, [r7, #6]
 8000dca:	2b07      	cmp	r3, #7
 8000dcc:	d817      	bhi.n	8000dfe <MGPIO_enSetPinDirection+0x152>
		{
			GPIOC->GPIO_CRL &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET)) ;
 8000dce:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <MGPIO_enSetPinDirection+0x1b0>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	79ba      	ldrb	r2, [r7, #6]
 8000dd4:	0092      	lsls	r2, r2, #2
 8000dd6:	210f      	movs	r1, #15
 8000dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ddc:	43d2      	mvns	r2, r2
 8000dde:	4611      	mov	r1, r2
 8000de0:	4a1e      	ldr	r2, [pc, #120]	; (8000e5c <MGPIO_enSetPinDirection+0x1b0>)
 8000de2:	400b      	ands	r3, r1
 8000de4:	6013      	str	r3, [r2, #0]
			GPIOC->GPIO_CRL |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET)) ;
 8000de6:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <MGPIO_enSetPinDirection+0x1b0>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	7979      	ldrb	r1, [r7, #5]
 8000dec:	79ba      	ldrb	r2, [r7, #6]
 8000dee:	0092      	lsls	r2, r2, #2
 8000df0:	fa01 f202 	lsl.w	r2, r1, r2
 8000df4:	4611      	mov	r1, r2
 8000df6:	4a19      	ldr	r2, [pc, #100]	; (8000e5c <MGPIO_enSetPinDirection+0x1b0>)
 8000df8:	430b      	orrs	r3, r1
 8000dfa:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000dfc:	e023      	b.n	8000e46 <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < MGPIO_CRH_MAX)
 8000dfe:	79bb      	ldrb	r3, [r7, #6]
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d81a      	bhi.n	8000e3a <MGPIO_enSetPinDirection+0x18e>
			copy_u8pin -= MGPIO_CRL_MAX ;
 8000e04:	79bb      	ldrb	r3, [r7, #6]
 8000e06:	3b08      	subs	r3, #8
 8000e08:	71bb      	strb	r3, [r7, #6]
			GPIOC->GPIO_CRH &= ~(MGPIO_MASK) << (copy_u8pin * MGPIO_OFFSET) ;
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <MGPIO_enSetPinDirection+0x1b0>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	79ba      	ldrb	r2, [r7, #6]
 8000e10:	0092      	lsls	r2, r2, #2
 8000e12:	f06f 010f 	mvn.w	r1, #15
 8000e16:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4a0f      	ldr	r2, [pc, #60]	; (8000e5c <MGPIO_enSetPinDirection+0x1b0>)
 8000e1e:	400b      	ands	r3, r1
 8000e20:	6053      	str	r3, [r2, #4]
			GPIOC->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET)) ;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MGPIO_enSetPinDirection+0x1b0>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	7979      	ldrb	r1, [r7, #5]
 8000e28:	79ba      	ldrb	r2, [r7, #6]
 8000e2a:	0092      	lsls	r2, r2, #2
 8000e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e30:	4611      	mov	r1, r2
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <MGPIO_enSetPinDirection+0x1b0>)
 8000e34:	430b      	orrs	r3, r1
 8000e36:	6053      	str	r3, [r2, #4]
		break;
 8000e38:	e005      	b.n	8000e46 <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	73fb      	strb	r3, [r7, #15]
		break;
 8000e3e:	e002      	b.n	8000e46 <MGPIO_enSetPinDirection+0x19a>

	default:
		local_state = OUT_OF_RANG_ERR;
 8000e40:	2300      	movs	r3, #0
 8000e42:	73fb      	strb	r3, [r7, #15]
		break;
 8000e44:	bf00      	nop
	}
	return local_state;
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40010800 	.word	0x40010800
 8000e58:	40010c00 	.word	0x40010c00
 8000e5c:	40011000 	.word	0x40011000

08000e60 <MGPIO_enSetPinValue>:
 *
 * \Return value:   : ErrorState_t  -> SUCEESS
 * 								   -> OUT_OF_RANG_ERR
 *******************************************************************************/
ErrorState_t MGPIO_enSetPinValue(MGPIO_PORT_t copy_u8port, MGPIO_PIN_t copy_u8pin, MGPIO_VALUE_t copy_u8Value)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	71bb      	strb	r3, [r7, #6]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 8000e72:	2302      	movs	r3, #2
 8000e74:	73fb      	strb	r3, [r7, #15]
	/*	@beief 		This APIs use to set the GPIO PIN
	 *  choose between High and Low Value state and set it in ODR
	 * */
	switch(copy_u8port)
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d046      	beq.n	8000f0a <MGPIO_enSetPinValue+0xaa>
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	dc64      	bgt.n	8000f4a <MGPIO_enSetPinValue+0xea>
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d002      	beq.n	8000e8a <MGPIO_enSetPinValue+0x2a>
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d020      	beq.n	8000eca <MGPIO_enSetPinValue+0x6a>
 8000e88:	e05f      	b.n	8000f4a <MGPIO_enSetPinValue+0xea>
	{
	case PORTA:
		if (copy_u8Value == HIGH)
 8000e8a:	797b      	ldrb	r3, [r7, #5]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d10a      	bne.n	8000ea6 <MGPIO_enSetPinValue+0x46>
		{
			SET_BIT(GPIOA->GPIO_ODR, copy_u8pin);
 8000e90:	4b32      	ldr	r3, [pc, #200]	; (8000f5c <MGPIO_enSetPinValue+0xfc>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	79ba      	ldrb	r2, [r7, #6]
 8000e96:	2101      	movs	r1, #1
 8000e98:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	4a2f      	ldr	r2, [pc, #188]	; (8000f5c <MGPIO_enSetPinValue+0xfc>)
 8000ea0:	430b      	orrs	r3, r1
 8000ea2:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000ea4:	e054      	b.n	8000f50 <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 8000ea6:	797b      	ldrb	r3, [r7, #5]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d10b      	bne.n	8000ec4 <MGPIO_enSetPinValue+0x64>
			CLR_BIT(GPIOA->GPIO_ODR, copy_u8pin);
 8000eac:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <MGPIO_enSetPinValue+0xfc>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	79ba      	ldrb	r2, [r7, #6]
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb8:	43d2      	mvns	r2, r2
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4a27      	ldr	r2, [pc, #156]	; (8000f5c <MGPIO_enSetPinValue+0xfc>)
 8000ebe:	400b      	ands	r3, r1
 8000ec0:	60d3      	str	r3, [r2, #12]
		break;
 8000ec2:	e045      	b.n	8000f50 <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]
		break;
 8000ec8:	e042      	b.n	8000f50 <MGPIO_enSetPinValue+0xf0>

	case PORTB:
		if (copy_u8Value == HIGH)
 8000eca:	797b      	ldrb	r3, [r7, #5]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d10a      	bne.n	8000ee6 <MGPIO_enSetPinValue+0x86>
		{
			SET_BIT(GPIOB->GPIO_ODR, copy_u8pin);
 8000ed0:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <MGPIO_enSetPinValue+0x100>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	79ba      	ldrb	r2, [r7, #6]
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8000edc:	4611      	mov	r1, r2
 8000ede:	4a20      	ldr	r2, [pc, #128]	; (8000f60 <MGPIO_enSetPinValue+0x100>)
 8000ee0:	430b      	orrs	r3, r1
 8000ee2:	60d3      	str	r3, [r2, #12]
		else
		{
			local_state = OUT_OF_RANG_ERR;

		}
		break;
 8000ee4:	e034      	b.n	8000f50 <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 8000ee6:	797b      	ldrb	r3, [r7, #5]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d10b      	bne.n	8000f04 <MGPIO_enSetPinValue+0xa4>
			CLR_BIT(GPIOB->GPIO_ODR, copy_u8pin);
 8000eec:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <MGPIO_enSetPinValue+0x100>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	79ba      	ldrb	r2, [r7, #6]
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef8:	43d2      	mvns	r2, r2
 8000efa:	4611      	mov	r1, r2
 8000efc:	4a18      	ldr	r2, [pc, #96]	; (8000f60 <MGPIO_enSetPinValue+0x100>)
 8000efe:	400b      	ands	r3, r1
 8000f00:	60d3      	str	r3, [r2, #12]
		break;
 8000f02:	e025      	b.n	8000f50 <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 8000f04:	2300      	movs	r3, #0
 8000f06:	73fb      	strb	r3, [r7, #15]
		break;
 8000f08:	e022      	b.n	8000f50 <MGPIO_enSetPinValue+0xf0>

	case PORTC:
		if (copy_u8Value == HIGH)
 8000f0a:	797b      	ldrb	r3, [r7, #5]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d10a      	bne.n	8000f26 <MGPIO_enSetPinValue+0xc6>
		{
			SET_BIT(GPIOC->GPIO_ODR, copy_u8pin);
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MGPIO_enSetPinValue+0x104>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	79ba      	ldrb	r2, [r7, #6]
 8000f16:	2101      	movs	r1, #1
 8000f18:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4a11      	ldr	r2, [pc, #68]	; (8000f64 <MGPIO_enSetPinValue+0x104>)
 8000f20:	430b      	orrs	r3, r1
 8000f22:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000f24:	e014      	b.n	8000f50 <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 8000f26:	797b      	ldrb	r3, [r7, #5]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d10b      	bne.n	8000f44 <MGPIO_enSetPinValue+0xe4>
			CLR_BIT(GPIOC->GPIO_ODR, copy_u8pin);
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <MGPIO_enSetPinValue+0x104>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	79ba      	ldrb	r2, [r7, #6]
 8000f32:	2101      	movs	r1, #1
 8000f34:	fa01 f202 	lsl.w	r2, r1, r2
 8000f38:	43d2      	mvns	r2, r2
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4a09      	ldr	r2, [pc, #36]	; (8000f64 <MGPIO_enSetPinValue+0x104>)
 8000f3e:	400b      	ands	r3, r1
 8000f40:	60d3      	str	r3, [r2, #12]
		break;
 8000f42:	e005      	b.n	8000f50 <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 8000f44:	2300      	movs	r3, #0
 8000f46:	73fb      	strb	r3, [r7, #15]
		break;
 8000f48:	e002      	b.n	8000f50 <MGPIO_enSetPinValue+0xf0>

	default:
		local_state = OUT_OF_RANG_ERR;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	73fb      	strb	r3, [r7, #15]
		break;
 8000f4e:	bf00      	nop
	}
	return local_state;
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	40010800 	.word	0x40010800
 8000f60:	40010c00 	.word	0x40010c00
 8000f64:	40011000 	.word	0x40011000

08000f68 <MNVIC_enEnableNVIC>:
 * \Parameters (in) : None
 *
 * \Return value:   : ErrorState_t  -> SUCEESS
 *******************************************************************************/
ErrorState_t MNVIC_enEnableNVIC(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
	/*	@brief	This APIs allow the system to has a Pritories-Group and Sub-group
	 * 	To write to this register, you must write 0x5FA to the VECTKEY[16-31] field, otherwise the
		processor ignores the write. */

	SCB_AIRCR = MNVIC_GROUPSUB_PRI;
 8000f6c:	4b03      	ldr	r3, [pc, #12]	; (8000f7c <MNVIC_enEnableNVIC+0x14>)
 8000f6e:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <MNVIC_enEnableNVIC+0x18>)
 8000f70:	601a      	str	r2, [r3, #0]

	return SUCCESS;
 8000f72:	2302      	movs	r3, #2
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed0c 	.word	0xe000ed0c
 8000f80:	05fa0600 	.word	0x05fa0600

08000f84 <MNVIC_enEnableInt>:
 *
 * \Return value:   : ErrorState_t  -> SUCEESS
 * 									-> OUT_OF_RANG_ERR
 *******************************************************************************/
ErrorState_t MNVIC_enEnableInt(u8 copy_u8IRQnum)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
	 * 	1. based on the ID of the INT, it will select the correspoinding Register
	 *
	 * 	@hint 	This API used An atomic access to execuate the statement in one Asm Inst.
	 * */

	ErrorState_t  local_state = SUCCESS;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	73fb      	strb	r3, [r7, #15]

	if (copy_u8IRQnum < MNVIC_MAX_REG1)
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	2b1f      	cmp	r3, #31
 8000f96:	d805      	bhi.n	8000fa4 <MNVIC_enEnableInt+0x20>
	{
		NVIC->NVIC_ISER[0] = (1<<copy_u8IRQnum);
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	409a      	lsls	r2, r3
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <MNVIC_enEnableInt+0x48>)
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	e00d      	b.n	8000fc0 <MNVIC_enEnableInt+0x3c>
	}
	else if (copy_u8IRQnum < MNVIC_MAX_REG2)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2b3f      	cmp	r3, #63	; 0x3f
 8000fa8:	d808      	bhi.n	8000fbc <MNVIC_enEnableInt+0x38>
	{
		copy_u8IRQnum -= MNVIC_MAX_REG1;
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	3b20      	subs	r3, #32
 8000fae:	71fb      	strb	r3, [r7, #7]
		NVIC->NVIC_ISER[1] = (1<<copy_u8IRQnum);
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	409a      	lsls	r2, r3
 8000fb6:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <MNVIC_enEnableInt+0x48>)
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	e001      	b.n	8000fc0 <MNVIC_enEnableInt+0x3c>
	}
	else
	{
		local_state = OUT_OF_RANG_ERR;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73fb      	strb	r3, [r7, #15]
	}
	return local_state;
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	e000e100 	.word	0xe000e100

08000fd0 <MNVIC_enDisableInt>:
 *
 * \Return value:   : ErrorState_t  -> SUCEESS
 * 									-> OUT_OF_RANG_ERR
 *******************************************************************************/
ErrorState_t MNVIC_enDisableInt(u8 copy_u8IRQnum)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
	ErrorState_t  local_state = SUCCESS;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	73fb      	strb	r3, [r7, #15]
	 * 	1. based on the ID of the INT, it will select the correspoinding Register
	 *
	 * 	@hint 	This API used An atomic access to execuate the statement in one Asm Inst.
	 * */

	if (copy_u8IRQnum < MNVIC_MAX_REG1)
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b1f      	cmp	r3, #31
 8000fe2:	d806      	bhi.n	8000ff2 <MNVIC_enDisableInt+0x22>
	{
		NVIC->NVIC_ICER[0] = (1<<copy_u8IRQnum);
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	409a      	lsls	r2, r3
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <MNVIC_enDisableInt+0x4c>)
 8000fec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000ff0:	e00e      	b.n	8001010 <MNVIC_enDisableInt+0x40>
	}
	else if (copy_u8IRQnum < MNVIC_MAX_REG2)
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	2b3f      	cmp	r3, #63	; 0x3f
 8000ff6:	d809      	bhi.n	800100c <MNVIC_enDisableInt+0x3c>
	{
		copy_u8IRQnum -= MNVIC_MAX_REG1;
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	3b20      	subs	r3, #32
 8000ffc:	71fb      	strb	r3, [r7, #7]
		NVIC->NVIC_ICER[1] = (1<<copy_u8IRQnum);
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2201      	movs	r2, #1
 8001002:	409a      	lsls	r2, r3
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <MNVIC_enDisableInt+0x4c>)
 8001006:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800100a:	e001      	b.n	8001010 <MNVIC_enDisableInt+0x40>
	}
	else
	{
		local_state = OUT_OF_RANG_ERR;
 800100c:	2300      	movs	r3, #0
 800100e:	73fb      	strb	r3, [r7, #15]
	}
	return local_state;
 8001010:	7bfb      	ldrb	r3, [r7, #15]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100

08001020 <MRCC_enSysClkINIT>:
* \Parameters (in) : None
* \Return value:   : ErrorState_t  SUCEESS
*
*******************************************************************************/
ErrorState_t MRCC_enSysClkINIT(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0


	/** CLK source is HSI **/
#elif(MRCC_CLK_TYPE == MRCC_HSI)
	/* 1. ENABLE the HSI */
	SET_BIT(RCC->RCC_CR, HSION);
 8001024:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <MRCC_enSysClkINIT+0x74>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a1a      	ldr	r2, [pc, #104]	; (8001094 <MRCC_enSysClkINIT+0x74>)
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	6013      	str	r3, [r2, #0]

	/* 2. wait till HSE is READY 'settling time finished', stable */
	while (!(GET_BIT(RCC->RCC_CR, HSIRDY)));
 8001030:	bf00      	nop
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <MRCC_enSysClkINIT+0x74>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	085b      	lsrs	r3, r3, #1
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0f8      	beq.n	8001032 <MRCC_enSysClkINIT+0x12>

	/* 3. Enable System switch clock with HSI */
	CLR_BIT(RCC->RCC_CFGR, SWC);
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MRCC_enSysClkINIT+0x74>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	4a13      	ldr	r2, [pc, #76]	; (8001094 <MRCC_enSysClkINIT+0x74>)
 8001046:	f023 0301 	bic.w	r3, r3, #1
 800104a:	6053      	str	r3, [r2, #4]

#else
#error("WRONG CLK TYPE");
#endif
	/* MASK the AHB and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= MRCC_AHB_MASK;
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MRCC_enSysClkINIT+0x74>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	4a10      	ldr	r2, [pc, #64]	; (8001094 <MRCC_enSysClkINIT+0x74>)
 8001052:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001056:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= MRCC_AHB_PRESCALER;
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MRCC_enSysClkINIT+0x74>)
 800105a:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <MRCC_enSysClkINIT+0x74>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	6053      	str	r3, [r2, #4]

	/* MASK the APB1 and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= MRCC_APB1_MASK;
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MRCC_enSysClkINIT+0x74>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	4a0b      	ldr	r2, [pc, #44]	; (8001094 <MRCC_enSysClkINIT+0x74>)
 8001066:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800106a:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= MRCC_APB1_PRESCALER_MODE;
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MRCC_enSysClkINIT+0x74>)
 800106e:	4a09      	ldr	r2, [pc, #36]	; (8001094 <MRCC_enSysClkINIT+0x74>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	6053      	str	r3, [r2, #4]

	/* MASK the APB2 and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= MRCC_APB2_MASK;
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <MRCC_enSysClkINIT+0x74>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	4a06      	ldr	r2, [pc, #24]	; (8001094 <MRCC_enSysClkINIT+0x74>)
 800107a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800107e:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= MRCC_APB2_PRESCALER_MODE;
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <MRCC_enSysClkINIT+0x74>)
 8001082:	4a04      	ldr	r2, [pc, #16]	; (8001094 <MRCC_enSysClkINIT+0x74>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	6053      	str	r3, [r2, #4]
		RCC->RCC_CFGR &= MRCC_MCO_MASK;
		RCC->RCC_CFGR |= MRCC_MCO_MODE ;
	}
#endif

	return SUCCESS;
 8001088:	2302      	movs	r3, #2
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40021000 	.word	0x40021000

08001098 <MRCC_enEnablePeripheralCLK>:
* \Return value:   : ErrorState_t  -> SUCEESS
* 								   -> OUT_OF_RANG_ERR
*******************************************************************************/

ErrorState_t MRCC_enEnablePeripheralCLK(u8 copy_u8Peripheral)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
	ErrorState_t local_state = SUCCESS;
 80010a2:	2302      	movs	r3, #2
 80010a4:	73fb      	strb	r3, [r7, #15]

	/* based on predefined Peripheral, switch to corresponding Register, and Enabled it*/
	if (copy_u8Peripheral < MRCC_AHB_REG)
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2b1f      	cmp	r3, #31
 80010aa:	d80a      	bhi.n	80010c2 <MRCC_enEnablePeripheralCLK+0x2a>
		SET_BIT(RCC->RCC_AHBENR, copy_u8Peripheral);
 80010ac:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <MRCC_enEnablePeripheralCLK+0x80>)
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	79fa      	ldrb	r2, [r7, #7]
 80010b2:	2101      	movs	r1, #1
 80010b4:	fa01 f202 	lsl.w	r2, r1, r2
 80010b8:	4611      	mov	r1, r2
 80010ba:	4a17      	ldr	r2, [pc, #92]	; (8001118 <MRCC_enEnablePeripheralCLK+0x80>)
 80010bc:	430b      	orrs	r3, r1
 80010be:	6153      	str	r3, [r2, #20]
 80010c0:	e023      	b.n	800110a <MRCC_enEnablePeripheralCLK+0x72>

	else if (copy_u8Peripheral < MRCC_APB1_REG)
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2b3f      	cmp	r3, #63	; 0x3f
 80010c6:	d80d      	bhi.n	80010e4 <MRCC_enEnablePeripheralCLK+0x4c>
	{
		copy_u8Peripheral -= MRCC_AHB_REG;
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	3b20      	subs	r3, #32
 80010cc:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->RCC_APB1ENR, copy_u8Peripheral);
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <MRCC_enEnablePeripheralCLK+0x80>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	79fa      	ldrb	r2, [r7, #7]
 80010d4:	2101      	movs	r1, #1
 80010d6:	fa01 f202 	lsl.w	r2, r1, r2
 80010da:	4611      	mov	r1, r2
 80010dc:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <MRCC_enEnablePeripheralCLK+0x80>)
 80010de:	430b      	orrs	r3, r1
 80010e0:	61d3      	str	r3, [r2, #28]
 80010e2:	e012      	b.n	800110a <MRCC_enEnablePeripheralCLK+0x72>
	}

	else if (copy_u8Peripheral < MRCC_APB2_REG)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	2b5f      	cmp	r3, #95	; 0x5f
 80010e8:	d80d      	bhi.n	8001106 <MRCC_enEnablePeripheralCLK+0x6e>
	{
		copy_u8Peripheral -= MRCC_APB1_REG;
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	3b40      	subs	r3, #64	; 0x40
 80010ee:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->RCC_APB2ENR, copy_u8Peripheral);
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MRCC_enEnablePeripheralCLK+0x80>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	79fa      	ldrb	r2, [r7, #7]
 80010f6:	2101      	movs	r1, #1
 80010f8:	fa01 f202 	lsl.w	r2, r1, r2
 80010fc:	4611      	mov	r1, r2
 80010fe:	4a06      	ldr	r2, [pc, #24]	; (8001118 <MRCC_enEnablePeripheralCLK+0x80>)
 8001100:	430b      	orrs	r3, r1
 8001102:	6193      	str	r3, [r2, #24]
 8001104:	e001      	b.n	800110a <MRCC_enEnablePeripheralCLK+0x72>
	}

	else
	{
		local_state = OUT_OF_RANG_ERR;
 8001106:	2300      	movs	r3, #0
 8001108:	73fb      	strb	r3, [r7, #15]
	}
	return local_state;
 800110a:	7bfb      	ldrb	r3, [r7, #15]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000

0800111c <SPI1_IRQHandler>:
 * @param	void
 * @retval	void
 */

void SPI1_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	if (MSPI_CALLBACK[MSPI1].callback_TxRx!= NULL)
 8001120:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <SPI1_IRQHandler+0xa4>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d046      	beq.n	80011b6 <SPI1_IRQHandler+0x9a>
	{
		/* check if the Tx Buffer empty is fired, so copy the data and transmit it  */
		if ((GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_SR, TXE))&&(GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_CR2, MSPI_TXE_INT)))
 8001128:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <SPI1_IRQHandler+0xa8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	085b      	lsrs	r3, r3, #1
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	2b00      	cmp	r3, #0
 8001136:	d00d      	beq.n	8001154 <SPI1_IRQHandler+0x38>
 8001138:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <SPI1_IRQHandler+0xa8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	09db      	lsrs	r3, r3, #7
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	2b00      	cmp	r3, #0
 8001146:	d005      	beq.n	8001154 <SPI1_IRQHandler+0x38>
		{
			MSPI_CHANNELS[MSPI1]->SPI_DR = MSPI_CALLBACK[MSPI1].copy_u16Txdata;
 8001148:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <SPI1_IRQHandler+0xa4>)
 800114a:	881a      	ldrh	r2, [r3, #0]
 800114c:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <SPI1_IRQHandler+0xa8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	e030      	b.n	80011b6 <SPI1_IRQHandler+0x9a>
		}

		/* check if the Rx buffer Not empty is fired and ready to receive,so return the data  */
		else if ((GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_SR, RXN))&&(GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_CR2, MSPI_RXNE_INT)))
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <SPI1_IRQHandler+0xa8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00e      	beq.n	8001180 <SPI1_IRQHandler+0x64>
 8001162:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <SPI1_IRQHandler+0xa8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	099b      	lsrs	r3, r3, #6
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	2b00      	cmp	r3, #0
 8001170:	d006      	beq.n	8001180 <SPI1_IRQHandler+0x64>
		{
			MSPI_CALLBACK[MSPI1].ptr_u16Rxdata = (u16*)MSPI_CHANNELS[MSPI1]->SPI_DR ;
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <SPI1_IRQHandler+0xa8>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	461a      	mov	r2, r3
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <SPI1_IRQHandler+0xa4>)
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	e01a      	b.n	80011b6 <SPI1_IRQHandler+0x9a>
		}

		/* check if the Mode Fault interrupt is fired, and notify it  */
		else if ((GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_SR, MODF))&&(GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_CR2, MSPI_ERR_INT)))
 8001180:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <SPI1_IRQHandler+0xa8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	095b      	lsrs	r3, r3, #5
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	2b00      	cmp	r3, #0
 800118e:	d007      	beq.n	80011a0 <SPI1_IRQHandler+0x84>
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <SPI1_IRQHandler+0xa8>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	095b      	lsrs	r3, r3, #5
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	2b00      	cmp	r3, #0
 800119e:	d10a      	bne.n	80011b6 <SPI1_IRQHandler+0x9a>
		{

		}

		/* check if the Mode Fault interrupt is fired, and notify it  */
		else if ((GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_SR, OVR))&&(GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_CR2, MSPI_ERR_INT)))
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <SPI1_IRQHandler+0xa8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	099b      	lsrs	r3, r3, #6
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d002      	beq.n	80011b6 <SPI1_IRQHandler+0x9a>
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <SPI1_IRQHandler+0xa8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
		{

		}
	}
	/* perform the Callback fun from the App */
	MSPI_CALLBACK[MSPI1].callback_TxRx();
 80011b6:	4b02      	ldr	r3, [pc, #8]	; (80011c0 <SPI1_IRQHandler+0xa4>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	4798      	blx	r3
}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000098 	.word	0x20000098
 80011c4:	20000004 	.word	0x20000004

080011c8 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	if (MSPI_CALLBACK[MSPI2].callback_TxRx!= NULL)
 80011cc:	4b27      	ldr	r3, [pc, #156]	; (800126c <SPI2_IRQHandler+0xa4>)
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d046      	beq.n	8001262 <SPI2_IRQHandler+0x9a>
	{
		/* check if the Tx Buffer empty is fired, so copy the data and transmit it  */
		if ((GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_SR, TXE))&&(GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_CR2, MSPI_TXE_INT)))
 80011d4:	4b26      	ldr	r3, [pc, #152]	; (8001270 <SPI2_IRQHandler+0xa8>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	085b      	lsrs	r3, r3, #1
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00d      	beq.n	8001200 <SPI2_IRQHandler+0x38>
 80011e4:	4b22      	ldr	r3, [pc, #136]	; (8001270 <SPI2_IRQHandler+0xa8>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	09db      	lsrs	r3, r3, #7
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <SPI2_IRQHandler+0x38>
		{
			MSPI_CHANNELS[MSPI2]->SPI_DR = MSPI_CALLBACK[MSPI2].copy_u16Txdata;
 80011f4:	4b1d      	ldr	r3, [pc, #116]	; (800126c <SPI2_IRQHandler+0xa4>)
 80011f6:	899a      	ldrh	r2, [r3, #12]
 80011f8:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <SPI2_IRQHandler+0xa8>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	e030      	b.n	8001262 <SPI2_IRQHandler+0x9a>
		}

		/* check if the Rx buffer Not empty is fired and ready to receive,so return the data  */
		else if ((GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_SR, RXN))&&(GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_CR2, MSPI_RXNE_INT)))
 8001200:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <SPI2_IRQHandler+0xa8>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00e      	beq.n	800122c <SPI2_IRQHandler+0x64>
 800120e:	4b18      	ldr	r3, [pc, #96]	; (8001270 <SPI2_IRQHandler+0xa8>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	099b      	lsrs	r3, r3, #6
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d006      	beq.n	800122c <SPI2_IRQHandler+0x64>
		{
			MSPI_CALLBACK[MSPI2].ptr_u16Rxdata = (u16*)MSPI_CHANNELS[MSPI2]->SPI_DR ;
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <SPI2_IRQHandler+0xa8>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	461a      	mov	r2, r3
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <SPI2_IRQHandler+0xa4>)
 8001228:	611a      	str	r2, [r3, #16]
 800122a:	e01a      	b.n	8001262 <SPI2_IRQHandler+0x9a>
		}

		/* check if the Mode Fault interrupt is fired, and notify it  */
		else if ((GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_SR, MODF))&&(GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_CR2, MSPI_ERR_INT)))
 800122c:	4b10      	ldr	r3, [pc, #64]	; (8001270 <SPI2_IRQHandler+0xa8>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	095b      	lsrs	r3, r3, #5
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b00      	cmp	r3, #0
 800123a:	d007      	beq.n	800124c <SPI2_IRQHandler+0x84>
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <SPI2_IRQHandler+0xa8>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	095b      	lsrs	r3, r3, #5
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b00      	cmp	r3, #0
 800124a:	d10a      	bne.n	8001262 <SPI2_IRQHandler+0x9a>
		{

		}

		/* check if the Mode Fault interrupt is fired, and notify it  */
		else if ((GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_SR, OVR))&&(GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_CR2, MSPI_ERR_INT)))
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <SPI2_IRQHandler+0xa8>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	099b      	lsrs	r3, r3, #6
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b00      	cmp	r3, #0
 800125a:	d002      	beq.n	8001262 <SPI2_IRQHandler+0x9a>
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <SPI2_IRQHandler+0xa8>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
		{

		}
	}
	/* perform the Callback fun from the App */
	MSPI_CALLBACK[MSPI2].callback_TxRx();
 8001262:	4b02      	ldr	r3, [pc, #8]	; (800126c <SPI2_IRQHandler+0xa4>)
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	4798      	blx	r3
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000098 	.word	0x20000098
 8001270:	20000004 	.word	0x20000004

08001274 <MSYSTICK_enSetBusyWait>:
 * \Parameters (in) : Copy_u32NumberOfTicks
 *
 * \Return value:   : ErrorState_t  -> SUCEESS
 *******************************************************************************/
ErrorState_t MSYSTICK_enSetBusyWait(u32 Copy_u32NumberOfTicks)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	 * 1. load the no.of tick into the load register
	 * 2. enable the systick
	 * 3. wait of the count flag if set, then register is zero
	 * 4. disable the systick
	 * 5. clear the value register to be reuse again */
	STK->STK_LOAD = Copy_u32NumberOfTicks;
 800127c:	4a0f      	ldr	r2, [pc, #60]	; (80012bc <MSYSTICK_enSetBusyWait+0x48>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6053      	str	r3, [r2, #4]
	SET_BIT(STK->STK_CTRL, ENABLE);
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <MSYSTICK_enSetBusyWait+0x48>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <MSYSTICK_enSetBusyWait+0x48>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6013      	str	r3, [r2, #0]

	while (!(GET_BIT(STK->STK_CTRL,COUNTFLAG)));
 800128e:	bf00      	nop
 8001290:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <MSYSTICK_enSetBusyWait+0x48>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	0c1b      	lsrs	r3, r3, #16
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0f8      	beq.n	8001290 <MSYSTICK_enSetBusyWait+0x1c>
	CLR_BIT(STK->STK_CTRL, ENABLE);
 800129e:	4b07      	ldr	r3, [pc, #28]	; (80012bc <MSYSTICK_enSetBusyWait+0x48>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a06      	ldr	r2, [pc, #24]	; (80012bc <MSYSTICK_enSetBusyWait+0x48>)
 80012a4:	f023 0301 	bic.w	r3, r3, #1
 80012a8:	6013      	str	r3, [r2, #0]

	STK->STK_VAL = MSYSTICK_REG_CLEAR;
 80012aa:	4b04      	ldr	r3, [pc, #16]	; (80012bc <MSYSTICK_enSetBusyWait+0x48>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]

	return SUCCESS;
 80012b0:	2302      	movs	r3, #2
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	e000e010 	.word	0xe000e010

080012c0 <SysTick_Handler>:

/**********************************************************************************************************************
 * HANDLER
 *********************************************************************************************************************/
void SysTick_Handler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	 * 1. clear the temp var to ba able to set the INT flag by reading it
	 * 2. disable the TICK INT
	 * 3. disable the systick
	 * 4. clear the value register
	 * 5. call the APP call back function from MCAL Layer */
	local_u8temp = 0;
 80012c4:	4b13      	ldr	r3, [pc, #76]	; (8001314 <SysTick_Handler+0x54>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
	if (global_u8flag == 1)
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <SysTick_Handler+0x58>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d10e      	bne.n	80012f0 <SysTick_Handler+0x30>
	{
		CLR_BIT(STK->STK_CTRL, TICKINT);
 80012d2:	4b12      	ldr	r3, [pc, #72]	; (800131c <SysTick_Handler+0x5c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a11      	ldr	r2, [pc, #68]	; (800131c <SysTick_Handler+0x5c>)
 80012d8:	f023 0302 	bic.w	r3, r3, #2
 80012dc:	6013      	str	r3, [r2, #0]
		CLR_BIT(STK->STK_CTRL, ENABLE);
 80012de:	4b0f      	ldr	r3, [pc, #60]	; (800131c <SysTick_Handler+0x5c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a0e      	ldr	r2, [pc, #56]	; (800131c <SysTick_Handler+0x5c>)
 80012e4:	f023 0301 	bic.w	r3, r3, #1
 80012e8:	6013      	str	r3, [r2, #0]
		STK->STK_VAL = MSYSTICK_REG_CLEAR;
 80012ea:	4b0c      	ldr	r3, [pc, #48]	; (800131c <SysTick_Handler+0x5c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
	}

	if (MSYSTICK_Callback != NULL)
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <SysTick_Handler+0x60>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <SysTick_Handler+0x3e>
	{
		MSYSTICK_Callback();
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <SysTick_Handler+0x60>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4798      	blx	r3
	}

	local_u8temp = GET_BIT(STK->STK_CTRL,COUNTFLAG);
 80012fe:	4b07      	ldr	r3, [pc, #28]	; (800131c <SysTick_Handler+0x5c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	0c1b      	lsrs	r3, r3, #16
 8001304:	b2db      	uxtb	r3, r3
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	b2da      	uxtb	r2, r3
 800130c:	4b01      	ldr	r3, [pc, #4]	; (8001314 <SysTick_Handler+0x54>)
 800130e:	701a      	strb	r2, [r3, #0]
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	200000bf 	.word	0x200000bf
 8001318:	200000b4 	.word	0x200000b4
 800131c:	e000e010 	.word	0xe000e010
 8001320:	200000b0 	.word	0x200000b0

08001324 <MTIMER1_enInit>:
 * \Return value:   : ErrorState_t  -> SUCEESS
 * 									-> OUT_OF_RANG_ERR
 *******************************************************************************/

ErrorState_t MTIMER1_enInit(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
	/*	@brief This API use to choose the TIMER Mode  */

	CLR_BIT(TIM1->TIM1_CCMR1, 0);
 8001328:	4b17      	ldr	r3, [pc, #92]	; (8001388 <MTIMER1_enInit+0x64>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a16      	ldr	r2, [pc, #88]	; (8001388 <MTIMER1_enInit+0x64>)
 800132e:	f023 0301 	bic.w	r3, r3, #1
 8001332:	6193      	str	r3, [r2, #24]
	SET_BIT(TIM1->TIM1_CCMR1, 1);
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <MTIMER1_enInit+0x64>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a13      	ldr	r2, [pc, #76]	; (8001388 <MTIMER1_enInit+0x64>)
 800133a:	f043 0302 	orr.w	r3, r3, #2
 800133e:	6193      	str	r3, [r2, #24]
	/* Channel is configured to as input, IC1 on TI1*/
	TIM1->TIM1_CCMR1 |= (3 << 4);   /* Input capture Filter sampling after 8 events */
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MTIMER1_enInit+0x64>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a10      	ldr	r2, [pc, #64]	; (8001388 <MTIMER1_enInit+0x64>)
 8001346:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800134a:	6193      	str	r3, [r2, #24]

	SET_BIT(TIM1->TIM1_CCER,0);		/* capture is enabled */
 800134c:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <MTIMER1_enInit+0x64>)
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <MTIMER1_enInit+0x64>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	6213      	str	r3, [r2, #32]

	CLR_BIT(TIM1->TIM1_CCMR1, 2);
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <MTIMER1_enInit+0x64>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <MTIMER1_enInit+0x64>)
 800135e:	f023 0304 	bic.w	r3, r3, #4
 8001362:	6193      	str	r3, [r2, #24]
	CLR_BIT(TIM1->TIM1_CCMR1, 3);	/* input capture prescaler has no prescaler once event detected */
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <MTIMER1_enInit+0x64>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	4a07      	ldr	r2, [pc, #28]	; (8001388 <MTIMER1_enInit+0x64>)
 800136a:	f023 0308 	bic.w	r3, r3, #8
 800136e:	6193      	str	r3, [r2, #24]

	CLR_BIT(TIM1->TIM1_CCER,1); 	/* trigger is rising by default */
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <MTIMER1_enInit+0x64>)
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <MTIMER1_enInit+0x64>)
 8001376:	f023 0302 	bic.w	r3, r3, #2
 800137a:	6213      	str	r3, [r2, #32]


	return SUCCESS;
 800137c:	2302      	movs	r3, #2
}
 800137e:	4618      	mov	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40012c00 	.word	0x40012c00

0800138c <MTIMER1_setPrescaler>:
 *
 * \Return value:   : ErrorState_t  -> SUCEESS
 * 									-> OUT_OF_RANG_ERR
 *******************************************************************************/
ErrorState_t MTIMER1_setPrescaler(u16 copy_u16prescaler)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	80fb      	strh	r3, [r7, #6]
	TIM1->TIM1_PSC = copy_u16prescaler;
 8001396:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <MTIMER1_setPrescaler+0x1c>)
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	6293      	str	r3, [r2, #40]	; 0x28
	return SUCCESS;
 800139c:	2302      	movs	r3, #2
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	40012c00 	.word	0x40012c00

080013ac <MTIMER1_enStart>:

ErrorState_t MTIMER1_enStart(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0

	SET_BIT(TIM1->TIM1_CR1,0);
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <MTIMER1_enStart+0x1c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <MTIMER1_enStart+0x1c>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6013      	str	r3, [r2, #0]
	return SUCCESS;
 80013bc:	2302      	movs	r3, #2
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40012c00 	.word	0x40012c00

080013cc <MTIMER1_enStop>:
 * \Return value:   : ErrorState_t  -> SUCEESS
 * 									-> OUT_OF_RANG_ERR
 *******************************************************************************/

ErrorState_t MTIMER1_enStop(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
	CLR_BIT(TIM1->TIM1_CR1, 0);
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <MTIMER1_enStop+0x1c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <MTIMER1_enStop+0x1c>)
 80013d6:	f023 0301 	bic.w	r3, r3, #1
 80013da:	6013      	str	r3, [r2, #0]

	return SUCCESS;
 80013dc:	2302      	movs	r3, #2
}
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40012c00 	.word	0x40012c00

080013ec <MTIMER1_enEnableINT>:

ErrorState_t MTIMER1_enEnableINT(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
	SET_BIT(TIM1->TIM1_DIER, 1);   /* enable Input capture interrupt */
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <MTIMER1_enEnableINT+0x1c>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	4a04      	ldr	r2, [pc, #16]	; (8001408 <MTIMER1_enEnableINT+0x1c>)
 80013f6:	f043 0302 	orr.w	r3, r3, #2
 80013fa:	60d3      	str	r3, [r2, #12]
	return SUCCESS;
 80013fc:	2302      	movs	r3, #2
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40012c00 	.word	0x40012c00

0800140c <MTIMER1_enDisableINT>:
ErrorState_t MTIMER1_enDisableINT(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
	CLR_BIT(TIM1->TIM1_DIER, 1);   /* enable Input capture interrupt */
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <MTIMER1_enDisableINT+0x1c>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	4a04      	ldr	r2, [pc, #16]	; (8001428 <MTIMER1_enDisableINT+0x1c>)
 8001416:	f023 0302 	bic.w	r3, r3, #2
 800141a:	60d3      	str	r3, [r2, #12]
	return SUCCESS;
 800141c:	2302      	movs	r3, #2

}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40012c00 	.word	0x40012c00

0800142c <MTIMER1_enSetCallBack>:
ErrorState_t MTIMER1_enSetCallBack(void(*ptrfn)(void))
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

	ICU_callback = ptrfn;
 8001434:	4a04      	ldr	r2, [pc, #16]	; (8001448 <MTIMER1_enSetCallBack+0x1c>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
	return SUCCESS;
 800143a:	2302      	movs	r3, #2

}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	200000b8 	.word	0x200000b8

0800144c <MTIMER1_ICU_enRead>:
ErrorState_t MTIMER1_ICU_enRead(volatile u16 *ptrReadValue)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	*ptrReadValue = TIM1->TIM1_CCR1;
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <MTIMER1_ICU_enRead+0x20>)
 8001456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001458:	b29a      	uxth	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	801a      	strh	r2, [r3, #0]
	return SUCCESS;
 800145e:	2302      	movs	r3, #2
}
 8001460:	4618      	mov	r0, r3
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40012c00 	.word	0x40012c00

08001470 <MTIMER1_ICU_enSetTrigger>:
ErrorState_t MTIMER1_ICU_enSetTrigger(u8 copy_u8Trigg)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
	if (copy_u8Trigg == 0)
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d107      	bne.n	8001490 <MTIMER1_ICU_enSetTrigger+0x20>
	{
		CLR_BIT(TIM1->TIM1_CCER,1);   /* trigger is rising by default */
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <MTIMER1_ICU_enSetTrigger+0x40>)
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <MTIMER1_ICU_enSetTrigger+0x40>)
 8001486:	f023 0302 	bic.w	r3, r3, #2
 800148a:	6213      	str	r3, [r2, #32]
		return SUCCESS;
 800148c:	2302      	movs	r3, #2
 800148e:	e009      	b.n	80014a4 <MTIMER1_ICU_enSetTrigger+0x34>

	}
	else if (copy_u8Trigg == 1)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d105      	bne.n	80014a2 <MTIMER1_ICU_enSetTrigger+0x32>
	{
		SET_BIT(TIM1->TIM1_CCER,1);   /* trigger is rising by default */
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <MTIMER1_ICU_enSetTrigger+0x40>)
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <MTIMER1_ICU_enSetTrigger+0x40>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6213      	str	r3, [r2, #32]
	}
	else
	{
		//DO NOTHING
	}
	return SUCCESS;
 80014a2:	2302      	movs	r3, #2
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40012c00 	.word	0x40012c00

080014b4 <TIM1_CC_IRQHandler>:

void TIM1_CC_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	if (ICU_callback != NULL)
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <TIM1_CC_IRQHandler+0x18>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d002      	beq.n	80014c6 <TIM1_CC_IRQHandler+0x12>
	{
		ICU_callback();
 80014c0:	4b02      	ldr	r3, [pc, #8]	; (80014cc <TIM1_CC_IRQHandler+0x18>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4798      	blx	r3
	}

}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200000b8 	.word	0x200000b8

080014d0 <MUSART_enInit>:
 * \Return value:   : ErrorState_t  -> SUCEESS
 * 									-> OUT_OF_RANG_ERR
 *******************************************************************************/

ErrorState_t MUSART_enInit(MUSART_t copy_u8USARTnum, MUSART_INIT_t *ptr_u8cfg)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	6039      	str	r1, [r7, #0]
 80014da:	71fb      	strb	r3, [r7, #7]
	/* @brief 	This API use to Initialize all <pre> configuration of USART Frame
	 *			Half Duplex or Full Duplex, Parity even or odd or Disabled
	 *		 	8bit or 9bit Data Frame, 1bit or 2bit Stop bit
	 *		 	Select the Required BaudRate,Enable TX,RX,USART */

	ErrorState_t local_state = SUCCESS;
 80014dc:	2302      	movs	r3, #2
 80014de:	73fb      	strb	r3, [r7, #15]
	if (copy_u8USARTnum <= MUSART3)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	f200 8106 	bhi.w	80016f4 <MUSART_enInit+0x224>
	{
		if (ptr_u8cfg != NULL)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 80ff 	beq.w	80016ee <MUSART_enInit+0x21e>
		{
			/* 1. Select USART FULL OR HALF DUPLEX */
			switch (ptr_u8cfg ->MUSART_WIRE_MODE)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d002      	beq.n	80014fe <MUSART_enInit+0x2e>
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d00d      	beq.n	8001518 <MUSART_enInit+0x48>
 80014fc:	e019      	b.n	8001532 <MUSART_enInit+0x62>
			{
			case MUSART_HALF_DUPLEX:
				SET_BIT(USART_CH[copy_u8USARTnum]->USART_CR3, HDSE);
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	4a80      	ldr	r2, [pc, #512]	; (8001704 <MUSART_enInit+0x234>)
 8001502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001506:	695a      	ldr	r2, [r3, #20]
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	497e      	ldr	r1, [pc, #504]	; (8001704 <MUSART_enInit+0x234>)
 800150c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001510:	f042 0208 	orr.w	r2, r2, #8
 8001514:	615a      	str	r2, [r3, #20]
				break;
 8001516:	e00e      	b.n	8001536 <MUSART_enInit+0x66>

			case MUSART_FULL_DUPLEX:
				CLR_BIT(USART_CH[copy_u8USARTnum]->USART_CR3, HDSE);
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	4a7a      	ldr	r2, [pc, #488]	; (8001704 <MUSART_enInit+0x234>)
 800151c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001520:	695a      	ldr	r2, [r3, #20]
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	4977      	ldr	r1, [pc, #476]	; (8001704 <MUSART_enInit+0x234>)
 8001526:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800152a:	f022 0208 	bic.w	r2, r2, #8
 800152e:	615a      	str	r2, [r3, #20]
				break;
 8001530:	e001      	b.n	8001536 <MUSART_enInit+0x66>

			default:
				local_state = OUT_OF_RANG_ERR;
 8001532:	2300      	movs	r3, #0
 8001534:	73fb      	strb	r3, [r7, #15]
			}


			/* 2. Select USART 8Bit or 9bit Data Size */
			switch (ptr_u8cfg ->MUSART_DATA_SIZE)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	785b      	ldrb	r3, [r3, #1]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d002      	beq.n	8001544 <MUSART_enInit+0x74>
 800153e:	2b03      	cmp	r3, #3
 8001540:	d00d      	beq.n	800155e <MUSART_enInit+0x8e>
 8001542:	e019      	b.n	8001578 <MUSART_enInit+0xa8>
			{
			case MUSART_8BIT_DATA:
				CLR_BIT(USART_CH[copy_u8USARTnum]->USART_CR1, M);
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	4a6f      	ldr	r2, [pc, #444]	; (8001704 <MUSART_enInit+0x234>)
 8001548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154c:	68da      	ldr	r2, [r3, #12]
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	496c      	ldr	r1, [pc, #432]	; (8001704 <MUSART_enInit+0x234>)
 8001552:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001556:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800155a:	60da      	str	r2, [r3, #12]
				break;
 800155c:	e00e      	b.n	800157c <MUSART_enInit+0xac>

			case MUSART_9BIT_DATA:
				SET_BIT(USART_CH[copy_u8USARTnum]->USART_CR1, M);
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	4a68      	ldr	r2, [pc, #416]	; (8001704 <MUSART_enInit+0x234>)
 8001562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001566:	68da      	ldr	r2, [r3, #12]
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	4966      	ldr	r1, [pc, #408]	; (8001704 <MUSART_enInit+0x234>)
 800156c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001570:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001574:	60da      	str	r2, [r3, #12]
				break;
 8001576:	e001      	b.n	800157c <MUSART_enInit+0xac>

			default:
				local_state = OUT_OF_RANG_ERR;
 8001578:	2300      	movs	r3, #0
 800157a:	73fb      	strb	r3, [r7, #15]
			}


			/* 	3.Select ODD OR EVEN OR DISABLED PARITY	*/
			switch (ptr_u8cfg ->MUSART_PARITY_MODE)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	789b      	ldrb	r3, [r3, #2]
 8001580:	2b06      	cmp	r3, #6
 8001582:	d038      	beq.n	80015f6 <MUSART_enInit+0x126>
 8001584:	2b06      	cmp	r3, #6
 8001586:	dc43      	bgt.n	8001610 <MUSART_enInit+0x140>
 8001588:	2b04      	cmp	r3, #4
 800158a:	d002      	beq.n	8001592 <MUSART_enInit+0xc2>
 800158c:	2b05      	cmp	r3, #5
 800158e:	d019      	beq.n	80015c4 <MUSART_enInit+0xf4>
 8001590:	e03e      	b.n	8001610 <MUSART_enInit+0x140>
			{
			case MUSART_PARITY_EVEN:
				SET_BIT(USART_CH[copy_u8USARTnum]->USART_CR1, PCE);
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	4a5b      	ldr	r2, [pc, #364]	; (8001704 <MUSART_enInit+0x234>)
 8001596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	4959      	ldr	r1, [pc, #356]	; (8001704 <MUSART_enInit+0x234>)
 80015a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80015a8:	60da      	str	r2, [r3, #12]
				CLR_BIT(USART_CH[copy_u8USARTnum]->USART_CR1, PS);
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	4a55      	ldr	r2, [pc, #340]	; (8001704 <MUSART_enInit+0x234>)
 80015ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b2:	68da      	ldr	r2, [r3, #12]
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	4953      	ldr	r1, [pc, #332]	; (8001704 <MUSART_enInit+0x234>)
 80015b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015c0:	60da      	str	r2, [r3, #12]
				break;
 80015c2:	e027      	b.n	8001614 <MUSART_enInit+0x144>

			case MUSART_PARITY_ODD:
				SET_BIT(USART_CH[copy_u8USARTnum]->USART_CR1, PCE);
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	4a4f      	ldr	r2, [pc, #316]	; (8001704 <MUSART_enInit+0x234>)
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	68da      	ldr	r2, [r3, #12]
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	494c      	ldr	r1, [pc, #304]	; (8001704 <MUSART_enInit+0x234>)
 80015d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80015da:	60da      	str	r2, [r3, #12]
				SET_BIT(USART_CH[copy_u8USARTnum]->USART_CR1, PS);
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	4a49      	ldr	r2, [pc, #292]	; (8001704 <MUSART_enInit+0x234>)
 80015e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	4946      	ldr	r1, [pc, #280]	; (8001704 <MUSART_enInit+0x234>)
 80015ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015f2:	60da      	str	r2, [r3, #12]
				break;
 80015f4:	e00e      	b.n	8001614 <MUSART_enInit+0x144>

			case MUSART_PARITY_DISABLE:
				CLR_BIT(USART_CH[copy_u8USARTnum]->USART_CR1, PCE);
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	4a42      	ldr	r2, [pc, #264]	; (8001704 <MUSART_enInit+0x234>)
 80015fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fe:	68da      	ldr	r2, [r3, #12]
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	4940      	ldr	r1, [pc, #256]	; (8001704 <MUSART_enInit+0x234>)
 8001604:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800160c:	60da      	str	r2, [r3, #12]
				break;
 800160e:	e001      	b.n	8001614 <MUSART_enInit+0x144>
			default:
				local_state = OUT_OF_RANG_ERR;
 8001610:	2300      	movs	r3, #0
 8001612:	73fb      	strb	r3, [r7, #15]
			}


			/* 4. Select 1BIT OR 2BIT STOP BITS */
			switch (ptr_u8cfg ->MUSART_STOP_MODE)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	78db      	ldrb	r3, [r3, #3]
 8001618:	2b07      	cmp	r3, #7
 800161a:	d002      	beq.n	8001622 <MUSART_enInit+0x152>
 800161c:	2b08      	cmp	r3, #8
 800161e:	d019      	beq.n	8001654 <MUSART_enInit+0x184>
 8001620:	e031      	b.n	8001686 <MUSART_enInit+0x1b6>
			{
			case MUSART_STOPBIT1:
				CLR_BIT(USART_CH[copy_u8USARTnum]->USART_CR2, STOP1);
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	4a37      	ldr	r2, [pc, #220]	; (8001704 <MUSART_enInit+0x234>)
 8001626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162a:	691a      	ldr	r2, [r3, #16]
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	4935      	ldr	r1, [pc, #212]	; (8001704 <MUSART_enInit+0x234>)
 8001630:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001634:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001638:	611a      	str	r2, [r3, #16]
				CLR_BIT(USART_CH[copy_u8USARTnum]->USART_CR2, STOP2);
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	4a31      	ldr	r2, [pc, #196]	; (8001704 <MUSART_enInit+0x234>)
 800163e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001642:	691a      	ldr	r2, [r3, #16]
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	492f      	ldr	r1, [pc, #188]	; (8001704 <MUSART_enInit+0x234>)
 8001648:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800164c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001650:	611a      	str	r2, [r3, #16]
				break;
 8001652:	e01a      	b.n	800168a <MUSART_enInit+0x1ba>

			case MUSART_STOPBIT2:
				CLR_BIT(USART_CH[copy_u8USARTnum]->USART_CR2, STOP1);
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	4a2b      	ldr	r2, [pc, #172]	; (8001704 <MUSART_enInit+0x234>)
 8001658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165c:	691a      	ldr	r2, [r3, #16]
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	4928      	ldr	r1, [pc, #160]	; (8001704 <MUSART_enInit+0x234>)
 8001662:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001666:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800166a:	611a      	str	r2, [r3, #16]
				SET_BIT(USART_CH[copy_u8USARTnum]->USART_CR2, STOP2);
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	4a25      	ldr	r2, [pc, #148]	; (8001704 <MUSART_enInit+0x234>)
 8001670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001674:	691a      	ldr	r2, [r3, #16]
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	4922      	ldr	r1, [pc, #136]	; (8001704 <MUSART_enInit+0x234>)
 800167a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800167e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001682:	611a      	str	r2, [r3, #16]
				break;
 8001684:	e001      	b.n	800168a <MUSART_enInit+0x1ba>

			default:
				local_state = OUT_OF_RANG_ERR;
 8001686:	2300      	movs	r3, #0
 8001688:	73fb      	strb	r3, [r7, #15]
			}

			/* 5. Select The Requirement Baud Rate */
			USART_CH[copy_u8USARTnum]->USART_BRR = ptr_u8cfg->MUSART_BAUDRATE;
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	4a1d      	ldr	r2, [pc, #116]	; (8001704 <MUSART_enInit+0x234>)
 800168e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	6852      	ldr	r2, [r2, #4]
 8001696:	609a      	str	r2, [r3, #8]

			/* 6. Enable The Transmission Mode */
			SET_BIT(USART_CH[copy_u8USARTnum]->USART_CR1, TE);
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	4a1a      	ldr	r2, [pc, #104]	; (8001704 <MUSART_enInit+0x234>)
 800169c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	4917      	ldr	r1, [pc, #92]	; (8001704 <MUSART_enInit+0x234>)
 80016a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016aa:	f042 0208 	orr.w	r2, r2, #8
 80016ae:	60da      	str	r2, [r3, #12]

			/* 7. Enable The Receiver Mode */
			SET_BIT(USART_CH[copy_u8USARTnum]->USART_CR1, RE);
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	4a14      	ldr	r2, [pc, #80]	; (8001704 <MUSART_enInit+0x234>)
 80016b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	4911      	ldr	r1, [pc, #68]	; (8001704 <MUSART_enInit+0x234>)
 80016be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016c2:	f042 0204 	orr.w	r2, r2, #4
 80016c6:	60da      	str	r2, [r3, #12]

			/* 8. Enable The USART Peripheral */
			SET_BIT(USART_CH[copy_u8USARTnum]->USART_CR1, UE);
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <MUSART_enInit+0x234>)
 80016cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d0:	68da      	ldr	r2, [r3, #12]
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	490b      	ldr	r1, [pc, #44]	; (8001704 <MUSART_enInit+0x234>)
 80016d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80016de:	60da      	str	r2, [r3, #12]

			/* 9. Clear the USART Flags Register */
			USART_CH[copy_u8USARTnum]->USART_SR = 0;
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	4a08      	ldr	r2, [pc, #32]	; (8001704 <MUSART_enInit+0x234>)
 80016e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	e004      	b.n	80016f8 <MUSART_enInit+0x228>
		}
		else
		{
			local_state = NULL_PTR_ERR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	73fb      	strb	r3, [r7, #15]
 80016f2:	e001      	b.n	80016f8 <MUSART_enInit+0x228>
		}
	}
	else
	{
		local_state = OUT_OF_RANG_ERR;
 80016f4:	2300      	movs	r3, #0
 80016f6:	73fb      	strb	r3, [r7, #15]
	}
	return local_state;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	2000000c 	.word	0x2000000c

08001708 <MUSART_enBusySendByte>:
 *
 * \Return value:   : ErrorState_t  -> SUCEESS
 * 									-> OUT_OF_RANG_ERR
 *******************************************************************************/
ErrorState_t MUSART_enBusySendByte(MUSART_t copy_u8USARTnum, u8 copy_u8Data)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	460a      	mov	r2, r1
 8001712:	71fb      	strb	r3, [r7, #7]
 8001714:	4613      	mov	r3, r2
 8001716:	71bb      	strb	r3, [r7, #6]
	 *	@brief 	This API use the Polling Technique to transmit the data
	 *	1. waiting of TX Empty Flag to be set
	 *	2. copy the Data into the USART Data Register
	 *	3. Clear the TX Complete flag by writing 0 into it		*/

	ErrorState_t local_state = SUCCESS;
 8001718:	2302      	movs	r3, #2
 800171a:	73fb      	strb	r3, [r7, #15]
	if (copy_u8USARTnum <= MUSART3)
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d828      	bhi.n	8001774 <MUSART_enBusySendByte+0x6c>
	{
		while (!(GET_BIT(USART_CH[copy_u8USARTnum]->USART_SR, TXE)));
 8001722:	bf00      	nop
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	4a17      	ldr	r2, [pc, #92]	; (8001784 <MUSART_enBusySendByte+0x7c>)
 8001728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	09db      	lsrs	r3, r3, #7
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f5      	beq.n	8001724 <MUSART_enBusySendByte+0x1c>
		USART_CH[copy_u8USARTnum]->USART_DR = copy_u8Data;
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	4a12      	ldr	r2, [pc, #72]	; (8001784 <MUSART_enBusySendByte+0x7c>)
 800173c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001740:	79ba      	ldrb	r2, [r7, #6]
 8001742:	605a      	str	r2, [r3, #4]

		while (!(GET_BIT(USART_CH[copy_u8USARTnum]->USART_SR, TC)));
 8001744:	bf00      	nop
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <MUSART_enBusySendByte+0x7c>)
 800174a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	099b      	lsrs	r3, r3, #6
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f5      	beq.n	8001746 <MUSART_enBusySendByte+0x3e>
		CLR_BIT(USART_CH[copy_u8USARTnum]->USART_SR, TC);
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	4a09      	ldr	r2, [pc, #36]	; (8001784 <MUSART_enBusySendByte+0x7c>)
 800175e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	4907      	ldr	r1, [pc, #28]	; (8001784 <MUSART_enBusySendByte+0x7c>)
 8001768:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800176c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	e001      	b.n	8001778 <MUSART_enBusySendByte+0x70>
	}
	else
	{
		local_state = OUT_OF_RANG_ERR;
 8001774:	2300      	movs	r3, #0
 8001776:	73fb      	strb	r3, [r7, #15]
	}

	return local_state;
 8001778:	7bfb      	ldrb	r3, [r7, #15]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	2000000c 	.word	0x2000000c

08001788 <MUSART_enBusySendString>:
 * \Return value:   : ErrorState_t  -> SUCEESS
 * 									-> OUT_OF_RANG_ERR
 * 									-> NULL_PTR_ERR
 *******************************************************************************/
ErrorState_t MUSART_enBusySendString(MUSART_t copy_u8USARTnum, u8 *copy_u8Data)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	71fb      	strb	r3, [r7, #7]
	 * 	 1. Initialize a local counter to iterate through the string
	 * 	 2. check the end of the string if has NULL CHR or Not, if Not iterate
	 * 	 3. Send Byte by Byte of string indexed by local Counter
	 * 	 4. count up the local counter
	 */
	ErrorState_t local_state = SUCCESS;
 8001794:	2302      	movs	r3, #2
 8001796:	73fb      	strb	r3, [r7, #15]

	u8 local_u8Counter = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	73bb      	strb	r3, [r7, #14]
	if (copy_u8USARTnum <= MUSART3)
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d819      	bhi.n	80017d6 <MUSART_enBusySendString+0x4e>
	{
		if (copy_u8Data != NULL)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d013      	beq.n	80017d0 <MUSART_enBusySendString+0x48>
			while (copy_u8Data[local_u8Counter] != '\0')
 80017a8:	e00b      	b.n	80017c2 <MUSART_enBusySendString+0x3a>
			{
				MUSART_enBusySendByte(copy_u8USARTnum, copy_u8Data[local_u8Counter]);
 80017aa:	7bbb      	ldrb	r3, [r7, #14]
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	781a      	ldrb	r2, [r3, #0]
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	4611      	mov	r1, r2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff ffa6 	bl	8001708 <MUSART_enBusySendByte>
				local_u8Counter++;
 80017bc:	7bbb      	ldrb	r3, [r7, #14]
 80017be:	3301      	adds	r3, #1
 80017c0:	73bb      	strb	r3, [r7, #14]
			while (copy_u8Data[local_u8Counter] != '\0')
 80017c2:	7bbb      	ldrb	r3, [r7, #14]
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	4413      	add	r3, r2
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1ed      	bne.n	80017aa <MUSART_enBusySendString+0x22>
 80017ce:	e004      	b.n	80017da <MUSART_enBusySendString+0x52>
			}
		else
		{
			local_state = NULL_PTR_ERR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	73fb      	strb	r3, [r7, #15]
 80017d4:	e001      	b.n	80017da <MUSART_enBusySendString+0x52>
		}
	}
	else
	{
		local_state = OUT_OF_RANG_ERR;
 80017d6:	2300      	movs	r3, #0
 80017d8:	73fb      	strb	r3, [r7, #15]
	}
	return local_state;
 80017da:	7bfb      	ldrb	r3, [r7, #15]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <USART1_IRQHandler>:
 * 			when receiving data by interrupt, 1. get the first byte from the data register
 * 			2. check if that byte the ENDline byte, if so then reset the index and set the Rec_flag
 * 			3. if was not update the index to receieve the next byte */

void USART1_IRQHandler (void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
	if ((GET_BIT(USART_CH[MUSART1]->USART_SR, TXE)))
 80017e8:	4b24      	ldr	r3, [pc, #144]	; (800187c <USART1_IRQHandler+0x98>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	09db      	lsrs	r3, r3, #7
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d018      	beq.n	800182a <USART1_IRQHandler+0x46>
	{
		uart_TxBufferIndex++;
 80017f8:	4b21      	ldr	r3, [pc, #132]	; (8001880 <USART1_IRQHandler+0x9c>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	3301      	adds	r3, #1
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <USART1_IRQHandler+0x9c>)
 8001802:	701a      	strb	r2, [r3, #0]
		if (uart_TxBUFFER[uart_TxBufferIndex] == MUSART_NULL_CHR)
 8001804:	4b1e      	ldr	r3, [pc, #120]	; (8001880 <USART1_IRQHandler+0x9c>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <USART1_IRQHandler+0xa0>)
 800180c:	5c9b      	ldrb	r3, [r3, r2]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d103      	bne.n	800181a <USART1_IRQHandler+0x36>
		{
			uart_TxBufferIndex = 0;
 8001812:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <USART1_IRQHandler+0x9c>)
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
 8001818:	e007      	b.n	800182a <USART1_IRQHandler+0x46>
		}
		else
		{
			USART_CH[MUSART1]->USART_DR =  uart_TxBUFFER[uart_TxBufferIndex];
 800181a:	4b19      	ldr	r3, [pc, #100]	; (8001880 <USART1_IRQHandler+0x9c>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	461a      	mov	r2, r3
 8001820:	4b18      	ldr	r3, [pc, #96]	; (8001884 <USART1_IRQHandler+0xa0>)
 8001822:	5c9a      	ldrb	r2, [r3, r2]
 8001824:	4b15      	ldr	r3, [pc, #84]	; (800187c <USART1_IRQHandler+0x98>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]

		}
	}

	if (GET_BIT(USART_CH[MUSART1]->USART_SR, RXNE))
 800182a:	4b14      	ldr	r3, [pc, #80]	; (800187c <USART1_IRQHandler+0x98>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	095b      	lsrs	r3, r3, #5
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d01c      	beq.n	8001874 <USART1_IRQHandler+0x90>
	{
		uart_RxBUFFER[uart_RxBufferIndex] = USART_CH[MUSART1]->USART_DR ;
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <USART1_IRQHandler+0x98>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6859      	ldr	r1, [r3, #4]
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <USART1_IRQHandler+0xa4>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	b2c9      	uxtb	r1, r1
 8001848:	4b10      	ldr	r3, [pc, #64]	; (800188c <USART1_IRQHandler+0xa8>)
 800184a:	5499      	strb	r1, [r3, r2]

		if (uart_RxBUFFER[uart_RxBufferIndex] == MUSART_END_LINE)
 800184c:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <USART1_IRQHandler+0xa4>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <USART1_IRQHandler+0xa8>)
 8001854:	5c9b      	ldrb	r3, [r3, r2]
 8001856:	2b23      	cmp	r3, #35	; 0x23
 8001858:	d106      	bne.n	8001868 <USART1_IRQHandler+0x84>
		{
			uart_RxBufferIndex = 0;
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <USART1_IRQHandler+0xa4>)
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
			Receive_Flag = 1;
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <USART1_IRQHandler+0xac>)
 8001862:	2201      	movs	r2, #1
 8001864:	701a      	strb	r2, [r3, #0]
		else
		{
			uart_RxBufferIndex++;
		}
	}
}
 8001866:	e005      	b.n	8001874 <USART1_IRQHandler+0x90>
			uart_RxBufferIndex++;
 8001868:	4b07      	ldr	r3, [pc, #28]	; (8001888 <USART1_IRQHandler+0xa4>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	3301      	adds	r3, #1
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <USART1_IRQHandler+0xa4>)
 8001872:	701a      	strb	r2, [r3, #0]
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	2000000c 	.word	0x2000000c
 8001880:	200000bd 	.word	0x200000bd
 8001884:	200000dc 	.word	0x200000dc
 8001888:	200000be 	.word	0x200000be
 800188c:	200000c0 	.word	0x200000c0
 8001890:	200000bc 	.word	0x200000bc

08001894 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

	if ((GET_BIT(USART_CH[MUSART2]->USART_SR, TXE)))
 8001898:	4b24      	ldr	r3, [pc, #144]	; (800192c <USART2_IRQHandler+0x98>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	09db      	lsrs	r3, r3, #7
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d018      	beq.n	80018da <USART2_IRQHandler+0x46>
	{
		uart_TxBufferIndex++;
 80018a8:	4b21      	ldr	r3, [pc, #132]	; (8001930 <USART2_IRQHandler+0x9c>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	3301      	adds	r3, #1
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	4b1f      	ldr	r3, [pc, #124]	; (8001930 <USART2_IRQHandler+0x9c>)
 80018b2:	701a      	strb	r2, [r3, #0]
		if (uart_TxBUFFER[uart_TxBufferIndex] == MUSART_NULL_CHR)
 80018b4:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <USART2_IRQHandler+0x9c>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <USART2_IRQHandler+0xa0>)
 80018bc:	5c9b      	ldrb	r3, [r3, r2]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d103      	bne.n	80018ca <USART2_IRQHandler+0x36>
		{
			uart_TxBufferIndex = 0;
 80018c2:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <USART2_IRQHandler+0x9c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
 80018c8:	e007      	b.n	80018da <USART2_IRQHandler+0x46>
		}
		else
		{
			USART_CH[MUSART2]->USART_DR =  uart_TxBUFFER[uart_TxBufferIndex];
 80018ca:	4b19      	ldr	r3, [pc, #100]	; (8001930 <USART2_IRQHandler+0x9c>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	461a      	mov	r2, r3
 80018d0:	4b18      	ldr	r3, [pc, #96]	; (8001934 <USART2_IRQHandler+0xa0>)
 80018d2:	5c9a      	ldrb	r2, [r3, r2]
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <USART2_IRQHandler+0x98>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	605a      	str	r2, [r3, #4]

		}
	}

	if (GET_BIT(USART_CH[MUSART2]->USART_SR, RXNE))
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <USART2_IRQHandler+0x98>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	095b      	lsrs	r3, r3, #5
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d01c      	beq.n	8001924 <USART2_IRQHandler+0x90>
	{
		uart_RxBUFFER[uart_RxBufferIndex] = USART_CH[MUSART1]->USART_DR ;
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <USART2_IRQHandler+0x98>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6859      	ldr	r1, [r3, #4]
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <USART2_IRQHandler+0xa4>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	b2c9      	uxtb	r1, r1
 80018f8:	4b10      	ldr	r3, [pc, #64]	; (800193c <USART2_IRQHandler+0xa8>)
 80018fa:	5499      	strb	r1, [r3, r2]

		if (uart_RxBUFFER[uart_RxBufferIndex] == MUSART_END_LINE)
 80018fc:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <USART2_IRQHandler+0xa4>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	461a      	mov	r2, r3
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <USART2_IRQHandler+0xa8>)
 8001904:	5c9b      	ldrb	r3, [r3, r2]
 8001906:	2b23      	cmp	r3, #35	; 0x23
 8001908:	d106      	bne.n	8001918 <USART2_IRQHandler+0x84>
		{
			uart_RxBufferIndex = 0;
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <USART2_IRQHandler+0xa4>)
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
			Receive_Flag = 1;
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <USART2_IRQHandler+0xac>)
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
		else
		{
			uart_RxBufferIndex++;
		}
	}
}
 8001916:	e005      	b.n	8001924 <USART2_IRQHandler+0x90>
			uart_RxBufferIndex++;
 8001918:	4b07      	ldr	r3, [pc, #28]	; (8001938 <USART2_IRQHandler+0xa4>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	3301      	adds	r3, #1
 800191e:	b2da      	uxtb	r2, r3
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <USART2_IRQHandler+0xa4>)
 8001922:	701a      	strb	r2, [r3, #0]
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr
 800192c:	2000000c 	.word	0x2000000c
 8001930:	200000bd 	.word	0x200000bd
 8001934:	200000dc 	.word	0x200000dc
 8001938:	200000be 	.word	0x200000be
 800193c:	200000c0 	.word	0x200000c0
 8001940:	200000bc 	.word	0x200000bc

08001944 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
	if ((GET_BIT(USART_CH[MUSART3]->USART_SR, TXE)))
 8001948:	4b24      	ldr	r3, [pc, #144]	; (80019dc <USART3_IRQHandler+0x98>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	09db      	lsrs	r3, r3, #7
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	d018      	beq.n	800198a <USART3_IRQHandler+0x46>
	{
		uart_TxBufferIndex++;
 8001958:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <USART3_IRQHandler+0x9c>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	3301      	adds	r3, #1
 800195e:	b2da      	uxtb	r2, r3
 8001960:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <USART3_IRQHandler+0x9c>)
 8001962:	701a      	strb	r2, [r3, #0]
		if (uart_TxBUFFER[uart_TxBufferIndex] == MUSART_NULL_CHR)
 8001964:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <USART3_IRQHandler+0x9c>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	4b1e      	ldr	r3, [pc, #120]	; (80019e4 <USART3_IRQHandler+0xa0>)
 800196c:	5c9b      	ldrb	r3, [r3, r2]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d103      	bne.n	800197a <USART3_IRQHandler+0x36>
		{
			uart_TxBufferIndex = 0;
 8001972:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <USART3_IRQHandler+0x9c>)
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
 8001978:	e007      	b.n	800198a <USART3_IRQHandler+0x46>
		}
		else
		{
			USART_CH[MUSART3]->USART_DR =  uart_TxBUFFER[uart_TxBufferIndex];
 800197a:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <USART3_IRQHandler+0x9c>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	461a      	mov	r2, r3
 8001980:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <USART3_IRQHandler+0xa0>)
 8001982:	5c9a      	ldrb	r2, [r3, r2]
 8001984:	4b15      	ldr	r3, [pc, #84]	; (80019dc <USART3_IRQHandler+0x98>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	605a      	str	r2, [r3, #4]
		}
	}

	if (GET_BIT(USART_CH[MUSART3]->USART_SR, RXNE))
 800198a:	4b14      	ldr	r3, [pc, #80]	; (80019dc <USART3_IRQHandler+0x98>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	095b      	lsrs	r3, r3, #5
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	d01c      	beq.n	80019d4 <USART3_IRQHandler+0x90>
	{
		uart_RxBUFFER[uart_RxBufferIndex] = USART_CH[MUSART3]->USART_DR ;
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <USART3_IRQHandler+0x98>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	6859      	ldr	r1, [r3, #4]
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <USART3_IRQHandler+0xa4>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	b2c9      	uxtb	r1, r1
 80019a8:	4b10      	ldr	r3, [pc, #64]	; (80019ec <USART3_IRQHandler+0xa8>)
 80019aa:	5499      	strb	r1, [r3, r2]

		if (uart_RxBUFFER[uart_RxBufferIndex] == MUSART_END_LINE)
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <USART3_IRQHandler+0xa4>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <USART3_IRQHandler+0xa8>)
 80019b4:	5c9b      	ldrb	r3, [r3, r2]
 80019b6:	2b23      	cmp	r3, #35	; 0x23
 80019b8:	d106      	bne.n	80019c8 <USART3_IRQHandler+0x84>
		{
			uart_RxBufferIndex = 0;
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <USART3_IRQHandler+0xa4>)
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
			Receive_Flag = 1;
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <USART3_IRQHandler+0xac>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	701a      	strb	r2, [r3, #0]
		else
		{
			uart_RxBufferIndex++;
		}
	}
}
 80019c6:	e005      	b.n	80019d4 <USART3_IRQHandler+0x90>
			uart_RxBufferIndex++;
 80019c8:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <USART3_IRQHandler+0xa4>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	3301      	adds	r3, #1
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <USART3_IRQHandler+0xa4>)
 80019d2:	701a      	strb	r2, [r3, #0]
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	2000000c 	.word	0x2000000c
 80019e0:	200000bd 	.word	0x200000bd
 80019e4:	200000dc 	.word	0x200000dc
 80019e8:	200000be 	.word	0x200000be
 80019ec:	200000c0 	.word	0x200000c0
 80019f0:	200000bc 	.word	0x200000bc

080019f4 <main>:
/****************************************************************/

#include "App_int.h"

int main(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	App_voidstartApp();
 80019f8:	f7fe ff6e 	bl	80008d8 <App_voidstartApp>
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a04:	480d      	ldr	r0, [pc, #52]	; (8001a3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a06:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a08:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a0c:	480c      	ldr	r0, [pc, #48]	; (8001a40 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a0e:	490d      	ldr	r1, [pc, #52]	; (8001a44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a10:	4a0d      	ldr	r2, [pc, #52]	; (8001a48 <LoopForever+0xe>)
  movs r3, #0
 8001a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a14:	e002      	b.n	8001a1c <LoopCopyDataInit>

08001a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a1a:	3304      	adds	r3, #4

08001a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a20:	d3f9      	bcc.n	8001a16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a22:	4a0a      	ldr	r2, [pc, #40]	; (8001a4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a24:	4c0a      	ldr	r4, [pc, #40]	; (8001a50 <LoopForever+0x16>)
  movs r3, #0
 8001a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a28:	e001      	b.n	8001a2e <LoopFillZerobss>

08001a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a2c:	3204      	adds	r2, #4

08001a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a30:	d3fb      	bcc.n	8001a2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a32:	f000 f811 	bl	8001a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a36:	f7ff ffdd 	bl	80019f4 <main>

08001a3a <LoopForever>:

LoopForever:
    b LoopForever
 8001a3a:	e7fe      	b.n	8001a3a <LoopForever>
  ldr   r0, =_estack
 8001a3c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a44:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001a48:	08001bc4 	.word	0x08001bc4
  ldr r2, =_sbss
 8001a4c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001a50:	200000f8 	.word	0x200000f8

08001a54 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a54:	e7fe      	b.n	8001a54 <ADC3_IRQHandler>
	...

08001a58 <__libc_init_array>:
 8001a58:	b570      	push	{r4, r5, r6, lr}
 8001a5a:	2600      	movs	r6, #0
 8001a5c:	4d0c      	ldr	r5, [pc, #48]	; (8001a90 <__libc_init_array+0x38>)
 8001a5e:	4c0d      	ldr	r4, [pc, #52]	; (8001a94 <__libc_init_array+0x3c>)
 8001a60:	1b64      	subs	r4, r4, r5
 8001a62:	10a4      	asrs	r4, r4, #2
 8001a64:	42a6      	cmp	r6, r4
 8001a66:	d109      	bne.n	8001a7c <__libc_init_array+0x24>
 8001a68:	f000 f89a 	bl	8001ba0 <_init>
 8001a6c:	2600      	movs	r6, #0
 8001a6e:	4d0a      	ldr	r5, [pc, #40]	; (8001a98 <__libc_init_array+0x40>)
 8001a70:	4c0a      	ldr	r4, [pc, #40]	; (8001a9c <__libc_init_array+0x44>)
 8001a72:	1b64      	subs	r4, r4, r5
 8001a74:	10a4      	asrs	r4, r4, #2
 8001a76:	42a6      	cmp	r6, r4
 8001a78:	d105      	bne.n	8001a86 <__libc_init_array+0x2e>
 8001a7a:	bd70      	pop	{r4, r5, r6, pc}
 8001a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a80:	4798      	blx	r3
 8001a82:	3601      	adds	r6, #1
 8001a84:	e7ee      	b.n	8001a64 <__libc_init_array+0xc>
 8001a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a8a:	4798      	blx	r3
 8001a8c:	3601      	adds	r6, #1
 8001a8e:	e7f2      	b.n	8001a76 <__libc_init_array+0x1e>
 8001a90:	08001bbc 	.word	0x08001bbc
 8001a94:	08001bbc 	.word	0x08001bbc
 8001a98:	08001bbc 	.word	0x08001bbc
 8001a9c:	08001bc0 	.word	0x08001bc0

08001aa0 <ceil>:
 8001aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001aa4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8001aa8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8001aac:	2e13      	cmp	r6, #19
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4607      	mov	r7, r0
 8001ab4:	460c      	mov	r4, r1
 8001ab6:	4605      	mov	r5, r0
 8001ab8:	dc31      	bgt.n	8001b1e <ceil+0x7e>
 8001aba:	2e00      	cmp	r6, #0
 8001abc:	da12      	bge.n	8001ae4 <ceil+0x44>
 8001abe:	a334      	add	r3, pc, #208	; (adr r3, 8001b90 <ceil+0xf0>)
 8001ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac4:	f7fe fb5a 	bl	800017c <__adddf3>
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2300      	movs	r3, #0
 8001acc:	f7fe fd8a 	bl	80005e4 <__aeabi_dcmpgt>
 8001ad0:	b128      	cbz	r0, 8001ade <ceil+0x3e>
 8001ad2:	2c00      	cmp	r4, #0
 8001ad4:	db56      	blt.n	8001b84 <ceil+0xe4>
 8001ad6:	433c      	orrs	r4, r7
 8001ad8:	d058      	beq.n	8001b8c <ceil+0xec>
 8001ada:	2500      	movs	r5, #0
 8001adc:	4c2e      	ldr	r4, [pc, #184]	; (8001b98 <ceil+0xf8>)
 8001ade:	4623      	mov	r3, r4
 8001ae0:	462f      	mov	r7, r5
 8001ae2:	e025      	b.n	8001b30 <ceil+0x90>
 8001ae4:	4a2d      	ldr	r2, [pc, #180]	; (8001b9c <ceil+0xfc>)
 8001ae6:	fa42 f806 	asr.w	r8, r2, r6
 8001aea:	ea01 0208 	and.w	r2, r1, r8
 8001aee:	4302      	orrs	r2, r0
 8001af0:	d01e      	beq.n	8001b30 <ceil+0x90>
 8001af2:	a327      	add	r3, pc, #156	; (adr r3, 8001b90 <ceil+0xf0>)
 8001af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af8:	f7fe fb40 	bl	800017c <__adddf3>
 8001afc:	2200      	movs	r2, #0
 8001afe:	2300      	movs	r3, #0
 8001b00:	f7fe fd70 	bl	80005e4 <__aeabi_dcmpgt>
 8001b04:	2800      	cmp	r0, #0
 8001b06:	d0ea      	beq.n	8001ade <ceil+0x3e>
 8001b08:	2c00      	cmp	r4, #0
 8001b0a:	bfc2      	ittt	gt
 8001b0c:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8001b10:	fa43 f606 	asrgt.w	r6, r3, r6
 8001b14:	19a4      	addgt	r4, r4, r6
 8001b16:	2500      	movs	r5, #0
 8001b18:	ea24 0408 	bic.w	r4, r4, r8
 8001b1c:	e7df      	b.n	8001ade <ceil+0x3e>
 8001b1e:	2e33      	cmp	r6, #51	; 0x33
 8001b20:	dd0a      	ble.n	8001b38 <ceil+0x98>
 8001b22:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8001b26:	d103      	bne.n	8001b30 <ceil+0x90>
 8001b28:	f7fe fb28 	bl	800017c <__adddf3>
 8001b2c:	4607      	mov	r7, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4638      	mov	r0, r7
 8001b32:	4619      	mov	r1, r3
 8001b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b38:	f04f 32ff 	mov.w	r2, #4294967295
 8001b3c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8001b40:	fa22 f808 	lsr.w	r8, r2, r8
 8001b44:	ea18 0f00 	tst.w	r8, r0
 8001b48:	d0f2      	beq.n	8001b30 <ceil+0x90>
 8001b4a:	a311      	add	r3, pc, #68	; (adr r3, 8001b90 <ceil+0xf0>)
 8001b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b50:	f7fe fb14 	bl	800017c <__adddf3>
 8001b54:	2200      	movs	r2, #0
 8001b56:	2300      	movs	r3, #0
 8001b58:	f7fe fd44 	bl	80005e4 <__aeabi_dcmpgt>
 8001b5c:	2800      	cmp	r0, #0
 8001b5e:	d0be      	beq.n	8001ade <ceil+0x3e>
 8001b60:	2c00      	cmp	r4, #0
 8001b62:	dd02      	ble.n	8001b6a <ceil+0xca>
 8001b64:	2e14      	cmp	r6, #20
 8001b66:	d103      	bne.n	8001b70 <ceil+0xd0>
 8001b68:	3401      	adds	r4, #1
 8001b6a:	ea25 0508 	bic.w	r5, r5, r8
 8001b6e:	e7b6      	b.n	8001ade <ceil+0x3e>
 8001b70:	2301      	movs	r3, #1
 8001b72:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8001b76:	fa03 f606 	lsl.w	r6, r3, r6
 8001b7a:	4435      	add	r5, r6
 8001b7c:	42bd      	cmp	r5, r7
 8001b7e:	bf38      	it	cc
 8001b80:	18e4      	addcc	r4, r4, r3
 8001b82:	e7f2      	b.n	8001b6a <ceil+0xca>
 8001b84:	2500      	movs	r5, #0
 8001b86:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8001b8a:	e7a8      	b.n	8001ade <ceil+0x3e>
 8001b8c:	4625      	mov	r5, r4
 8001b8e:	e7a6      	b.n	8001ade <ceil+0x3e>
 8001b90:	8800759c 	.word	0x8800759c
 8001b94:	7e37e43c 	.word	0x7e37e43c
 8001b98:	3ff00000 	.word	0x3ff00000
 8001b9c:	000fffff 	.word	0x000fffff

08001ba0 <_init>:
 8001ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ba2:	bf00      	nop
 8001ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ba6:	bc08      	pop	{r3}
 8001ba8:	469e      	mov	lr, r3
 8001baa:	4770      	bx	lr

08001bac <_fini>:
 8001bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bae:	bf00      	nop
 8001bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bb2:	bc08      	pop	{r3}
 8001bb4:	469e      	mov	lr, r3
 8001bb6:	4770      	bx	lr
