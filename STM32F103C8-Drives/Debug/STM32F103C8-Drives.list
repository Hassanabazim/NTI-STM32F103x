
STM32F103C8-Drives.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d68  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e98  08000e98  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e98  08000e98  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08000e98  08000e98  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e98  08000e98  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e98  08000e98  00010e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e9c  08000e9c  00010e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08000ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000014  08000eb4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08000eb4  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002552  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b15  00000000  00000000  0002258f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003a0  00000000  00000000  000230a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002f8  00000000  00000000  00023448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000017e5  00000000  00000000  00023740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000272a  00000000  00000000  00024f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00006770  00000000  00000000  0002764f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0002ddbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c48  00000000  00000000  0002de14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000014 	.word	0x20000014
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e80 	.word	0x08000e80

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000018 	.word	0x20000018
 800016c:	08000e80 	.word	0x08000e80

08000170 <App_voidstartApp>:
 * \Parameters (in) : None
 *
 * \Return value:   : None
 *******************************************************************************/
void App_voidstartApp(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
	}
	/*****************************************************************************************************************/
#elif(APPLICATION == MGPIO_TEST)
	/*****************************************************************************************************************/

	MRCC_enSysClkINIT();
 8000176:	f000 fbc9 	bl	800090c <MRCC_enSysClkINIT>
	MRCC_enEnablePeripheralCLK(MRCC_IOPA);
 800017a:	2042      	movs	r0, #66	; 0x42
 800017c:	f000 fc02 	bl	8000984 <MRCC_enEnablePeripheralCLK>
	MRCC_enEnablePeripheralCLK(MRCC_IOPB);
 8000180:	2043      	movs	r0, #67	; 0x43
 8000182:	f000 fbff 	bl	8000984 <MRCC_enEnablePeripheralCLK>
	MRCC_enEnablePeripheralCLK(MRCC_IOPC);
 8000186:	2044      	movs	r0, #68	; 0x44
 8000188:	f000 fbfc 	bl	8000984 <MRCC_enEnablePeripheralCLK>

#if 1
	u8 pinvalue ;
	/* testing SetPinDirection, SetPinValue,GetpinValue and LOCKpin */
	MGPIO_enSetPinDirection(PORTA, PIN0, OUT_2MHZ_PUSH_PULL);
 800018c:	2202      	movs	r2, #2
 800018e:	2100      	movs	r1, #0
 8000190:	2000      	movs	r0, #0
 8000192:	f000 f951 	bl	8000438 <MGPIO_enSetPinDirection>
	MGPIO_enSetPinDirection(PORTA, PIN1, OUT_2MHZ_PUSH_PULL);
 8000196:	2202      	movs	r2, #2
 8000198:	2101      	movs	r1, #1
 800019a:	2000      	movs	r0, #0
 800019c:	f000 f94c 	bl	8000438 <MGPIO_enSetPinDirection>
	MGPIO_enSetPinDirection(PORTA, PIN2, IN_ANALOG);
 80001a0:	2200      	movs	r2, #0
 80001a2:	2102      	movs	r1, #2
 80001a4:	2000      	movs	r0, #0
 80001a6:	f000 f947 	bl	8000438 <MGPIO_enSetPinDirection>
	MGPIO_enSetPinDirection(PORTB, PIN8, IN_FLOATING);
 80001aa:	2204      	movs	r2, #4
 80001ac:	2108      	movs	r1, #8
 80001ae:	2001      	movs	r0, #1
 80001b0:	f000 f942 	bl	8000438 <MGPIO_enSetPinDirection>
	MGPIO_enSetPinDirection(PORTB, PIN0, IN_PULL_UP_PULL_DOWN);
 80001b4:	2208      	movs	r2, #8
 80001b6:	2100      	movs	r1, #0
 80001b8:	2001      	movs	r0, #1
 80001ba:	f000 f93d 	bl	8000438 <MGPIO_enSetPinDirection>

	/* GetPinValue use debugger to see the vari or use setpin value fn */
	MGPIO_enSetPinValue(PORTA, PIN0, HIGH);
 80001be:	2201      	movs	r2, #1
 80001c0:	2100      	movs	r1, #0
 80001c2:	2000      	movs	r0, #0
 80001c4:	f000 fa12 	bl	80005ec <MGPIO_enSetPinValue>
	MGPIO_enGetPinValue(PORTA, PIN0, &pinvalue);
 80001c8:	1dfb      	adds	r3, r7, #7
 80001ca:	461a      	mov	r2, r3
 80001cc:	2100      	movs	r1, #0
 80001ce:	2000      	movs	r0, #0
 80001d0:	f000 fa90 	bl	80006f4 <MGPIO_enGetPinValue>
	MGPIO_enSetPinValue(PORTA, PIN0, pinvalue);
 80001d4:	79fb      	ldrb	r3, [r7, #7]
 80001d6:	461a      	mov	r2, r3
 80001d8:	2100      	movs	r1, #0
 80001da:	2000      	movs	r0, #0
 80001dc:	f000 fa06 	bl	80005ec <MGPIO_enSetPinValue>
	MGPIO_enLockPin(PORTA, PIN0);
 80001e0:	2100      	movs	r1, #0
 80001e2:	2000      	movs	r0, #0
 80001e4:	f000 face 	bl	8000784 <MGPIO_enLockPin>
	MGPIO_enSetPinDirection(PORTA, PIN0, OUT_10MHZ_PUSH_PULL);
 80001e8:	2201      	movs	r2, #1
 80001ea:	2100      	movs	r1, #0
 80001ec:	2000      	movs	r0, #0
 80001ee:	f000 f923 	bl	8000438 <MGPIO_enSetPinDirection>
		MGPIO_enSetResetPin(PORTA, PIN0, GPIO_PIN_SET);
		MGPIO_enSetResetPin(PORTA, PIN1, GPIO_PIN_RESET);

#endif

	while(1)
 80001f2:	e7fe      	b.n	80001f2 <App_voidstartApp+0x82>

080001f4 <ADC1_2_IRQHandler>:
/********************************************************************************
 * HANDLEAR IMPLEMENTATION
 ********************************************************************************/

void ADC1_2_IRQHandler(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	if (ADC_CallBack != NULL)
 80001f8:	4b07      	ldr	r3, [pc, #28]	; (8000218 <ADC1_2_IRQHandler+0x24>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d008      	beq.n	8000212 <ADC1_2_IRQHandler+0x1e>
	{
		if (GET_BIT(ADC->ADC_SR, EOC))
 8000200:	4b06      	ldr	r3, [pc, #24]	; (800021c <ADC1_2_IRQHandler+0x28>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	085b      	lsrs	r3, r3, #1
 8000206:	f003 0301 	and.w	r3, r3, #1
 800020a:	2b00      	cmp	r3, #0
		}
		else if (GET_BIT(ADC->ADC_SR, JEOC))
		{

		}
		ADC_CallBack();
 800020c:	4b02      	ldr	r3, [pc, #8]	; (8000218 <ADC1_2_IRQHandler+0x24>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4798      	blx	r3
	}
}
 8000212:	bf00      	nop
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	20000030 	.word	0x20000030
 800021c:	40012400 	.word	0x40012400

08000220 <DMA1_Channel1_IRQHandler>:
}



void DMA1_Channel1_IRQHandler(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	if (DMA_CallBack[Channel1] != NULL)
 8000224:	4b04      	ldr	r3, [pc, #16]	; (8000238 <DMA1_Channel1_IRQHandler+0x18>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d002      	beq.n	8000232 <DMA1_Channel1_IRQHandler+0x12>
	{
		DMA_CallBack[Channel1]();
 800022c:	4b02      	ldr	r3, [pc, #8]	; (8000238 <DMA1_Channel1_IRQHandler+0x18>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4798      	blx	r3
	}
}
 8000232:	bf00      	nop
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	20000034 	.word	0x20000034

0800023c <DMA1_Channel2_IRQHandler>:

void DMA1_Channel2_IRQHandler(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	if (DMA_CallBack[Channel2] != NULL)
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <DMA1_Channel2_IRQHandler+0x18>)
 8000242:	685b      	ldr	r3, [r3, #4]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d002      	beq.n	800024e <DMA1_Channel2_IRQHandler+0x12>
	{
		DMA_CallBack[Channel2]();
 8000248:	4b02      	ldr	r3, [pc, #8]	; (8000254 <DMA1_Channel2_IRQHandler+0x18>)
 800024a:	685b      	ldr	r3, [r3, #4]
 800024c:	4798      	blx	r3
	}
}
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000034 	.word	0x20000034

08000258 <DMA1_Channel3_IRQHandler>:

void DMA1_Channel3_IRQHandler(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	if (DMA_CallBack[Channel3] != NULL)
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <DMA1_Channel3_IRQHandler+0x18>)
 800025e:	689b      	ldr	r3, [r3, #8]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d002      	beq.n	800026a <DMA1_Channel3_IRQHandler+0x12>
	{
		DMA_CallBack[Channel3]();
 8000264:	4b02      	ldr	r3, [pc, #8]	; (8000270 <DMA1_Channel3_IRQHandler+0x18>)
 8000266:	689b      	ldr	r3, [r3, #8]
 8000268:	4798      	blx	r3
	}
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	20000034 	.word	0x20000034

08000274 <DMA1_Channel4_IRQHandler>:

void DMA1_Channel4_IRQHandler(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	if (DMA_CallBack[Channel4] != NULL)
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <DMA1_Channel4_IRQHandler+0x18>)
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d002      	beq.n	8000286 <DMA1_Channel4_IRQHandler+0x12>
	{
		DMA_CallBack[Channel4]();
 8000280:	4b02      	ldr	r3, [pc, #8]	; (800028c <DMA1_Channel4_IRQHandler+0x18>)
 8000282:	68db      	ldr	r3, [r3, #12]
 8000284:	4798      	blx	r3
	}
}
 8000286:	bf00      	nop
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	20000034 	.word	0x20000034

08000290 <DMA1_Channel5_IRQHandler>:

void DMA1_Channel5_IRQHandler(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	if (DMA_CallBack[Channel5] != NULL)
 8000294:	4b04      	ldr	r3, [pc, #16]	; (80002a8 <DMA1_Channel5_IRQHandler+0x18>)
 8000296:	691b      	ldr	r3, [r3, #16]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d002      	beq.n	80002a2 <DMA1_Channel5_IRQHandler+0x12>
	{
		DMA_CallBack[Channel5]();
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <DMA1_Channel5_IRQHandler+0x18>)
 800029e:	691b      	ldr	r3, [r3, #16]
 80002a0:	4798      	blx	r3
	}
}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000034 	.word	0x20000034

080002ac <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	if (DMA_CallBack[Channel6] != NULL)
 80002b0:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <DMA1_Channel6_IRQHandler+0x18>)
 80002b2:	695b      	ldr	r3, [r3, #20]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d002      	beq.n	80002be <DMA1_Channel6_IRQHandler+0x12>
	{
		DMA_CallBack[Channel6]();
 80002b8:	4b02      	ldr	r3, [pc, #8]	; (80002c4 <DMA1_Channel6_IRQHandler+0x18>)
 80002ba:	695b      	ldr	r3, [r3, #20]
 80002bc:	4798      	blx	r3
	}
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	20000034 	.word	0x20000034

080002c8 <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	if (DMA_CallBack[Channel7] != NULL)
 80002cc:	4b04      	ldr	r3, [pc, #16]	; (80002e0 <DMA1_Channel7_IRQHandler+0x18>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d002      	beq.n	80002da <DMA1_Channel7_IRQHandler+0x12>
	{
		DMA_CallBack[Channel7]();
 80002d4:	4b02      	ldr	r3, [pc, #8]	; (80002e0 <DMA1_Channel7_IRQHandler+0x18>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4798      	blx	r3
	}
}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	20000034 	.word	0x20000034

080002e4 <EXTI0_IRQHandler>:
 *********************************************************************************************************************/
/*	@brief 	Handlear has an callback fun from the App layer and Excecuted based on
 * 			the Selected Line on the Callback fun. */

void EXTI0_IRQHandler(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI0_LINE] != NULL)
 80002e8:	4b04      	ldr	r3, [pc, #16]	; (80002fc <EXTI0_IRQHandler+0x18>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d002      	beq.n	80002f6 <EXTI0_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI0_LINE]();
 80002f0:	4b02      	ldr	r3, [pc, #8]	; (80002fc <EXTI0_IRQHandler+0x18>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4798      	blx	r3
	}
}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000050 	.word	0x20000050

08000300 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI1_LINE] != NULL)
 8000304:	4b04      	ldr	r3, [pc, #16]	; (8000318 <EXTI1_IRQHandler+0x18>)
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d002      	beq.n	8000312 <EXTI1_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI1_LINE]();
 800030c:	4b02      	ldr	r3, [pc, #8]	; (8000318 <EXTI1_IRQHandler+0x18>)
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	4798      	blx	r3
	}

}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000050 	.word	0x20000050

0800031c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI2_LINE] != NULL)
 8000320:	4b04      	ldr	r3, [pc, #16]	; (8000334 <EXTI2_IRQHandler+0x18>)
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d002      	beq.n	800032e <EXTI2_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI2_LINE]();
 8000328:	4b02      	ldr	r3, [pc, #8]	; (8000334 <EXTI2_IRQHandler+0x18>)
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	4798      	blx	r3
	}
}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	20000050 	.word	0x20000050

08000338 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI3_LINE] != NULL)
 800033c:	4b04      	ldr	r3, [pc, #16]	; (8000350 <EXTI3_IRQHandler+0x18>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d002      	beq.n	800034a <EXTI3_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI3_LINE]();
 8000344:	4b02      	ldr	r3, [pc, #8]	; (8000350 <EXTI3_IRQHandler+0x18>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4798      	blx	r3
	}
}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	20000050 	.word	0x20000050

08000354 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI4_LINE] != NULL)
 8000358:	4b04      	ldr	r3, [pc, #16]	; (800036c <EXTI4_IRQHandler+0x18>)
 800035a:	691b      	ldr	r3, [r3, #16]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d002      	beq.n	8000366 <EXTI4_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI4_LINE]();
 8000360:	4b02      	ldr	r3, [pc, #8]	; (800036c <EXTI4_IRQHandler+0x18>)
 8000362:	691b      	ldr	r3, [r3, #16]
 8000364:	4798      	blx	r3
	}
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	20000050 	.word	0x20000050

08000370 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI5_LINE] != NULL)
 8000374:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <EXTI9_5_IRQHandler+0x58>)
 8000376:	695b      	ldr	r3, [r3, #20]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d003      	beq.n	8000384 <EXTI9_5_IRQHandler+0x14>
	{
		MEXTI_CALLBACK[MEXTI5_LINE]();
 800037c:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <EXTI9_5_IRQHandler+0x58>)
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	4798      	blx	r3
	else if (MEXTI_CALLBACK[MEXTI9_LINE] != NULL)
	{
		MEXTI_CALLBACK[MEXTI9_LINE]();

	}
}
 8000382:	e01e      	b.n	80003c2 <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI6_LINE] != NULL)
 8000384:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <EXTI9_5_IRQHandler+0x58>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d003      	beq.n	8000394 <EXTI9_5_IRQHandler+0x24>
		MEXTI_CALLBACK[MEXTI6_LINE]();
 800038c:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <EXTI9_5_IRQHandler+0x58>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4798      	blx	r3
}
 8000392:	e016      	b.n	80003c2 <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI7_LINE] != NULL)
 8000394:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <EXTI9_5_IRQHandler+0x58>)
 8000396:	69db      	ldr	r3, [r3, #28]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d003      	beq.n	80003a4 <EXTI9_5_IRQHandler+0x34>
		MEXTI_CALLBACK[MEXTI7_LINE]();
 800039c:	4b0a      	ldr	r3, [pc, #40]	; (80003c8 <EXTI9_5_IRQHandler+0x58>)
 800039e:	69db      	ldr	r3, [r3, #28]
 80003a0:	4798      	blx	r3
}
 80003a2:	e00e      	b.n	80003c2 <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI8_LINE] != NULL)
 80003a4:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <EXTI9_5_IRQHandler+0x58>)
 80003a6:	6a1b      	ldr	r3, [r3, #32]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d003      	beq.n	80003b4 <EXTI9_5_IRQHandler+0x44>
		MEXTI_CALLBACK[MEXTI8_LINE]();
 80003ac:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <EXTI9_5_IRQHandler+0x58>)
 80003ae:	6a1b      	ldr	r3, [r3, #32]
 80003b0:	4798      	blx	r3
}
 80003b2:	e006      	b.n	80003c2 <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI9_LINE] != NULL)
 80003b4:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <EXTI9_5_IRQHandler+0x58>)
 80003b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d002      	beq.n	80003c2 <EXTI9_5_IRQHandler+0x52>
		MEXTI_CALLBACK[MEXTI9_LINE]();
 80003bc:	4b02      	ldr	r3, [pc, #8]	; (80003c8 <EXTI9_5_IRQHandler+0x58>)
 80003be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003c0:	4798      	blx	r3
}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000050 	.word	0x20000050

080003cc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI10_LINE] != NULL)
 80003d0:	4b18      	ldr	r3, [pc, #96]	; (8000434 <EXTI15_10_IRQHandler+0x68>)
 80003d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d003      	beq.n	80003e0 <EXTI15_10_IRQHandler+0x14>
	{
		MEXTI_CALLBACK[MEXTI10_LINE]();
 80003d8:	4b16      	ldr	r3, [pc, #88]	; (8000434 <EXTI15_10_IRQHandler+0x68>)
 80003da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003dc:	4798      	blx	r3
	else if (MEXTI_CALLBACK[MEXTI15_LINE] != NULL)
	{
		MEXTI_CALLBACK[MEXTI15_LINE]();

	}
}
 80003de:	e026      	b.n	800042e <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI11_LINE] != NULL)
 80003e0:	4b14      	ldr	r3, [pc, #80]	; (8000434 <EXTI15_10_IRQHandler+0x68>)
 80003e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d003      	beq.n	80003f0 <EXTI15_10_IRQHandler+0x24>
		MEXTI_CALLBACK[MEXTI11_LINE]();
 80003e8:	4b12      	ldr	r3, [pc, #72]	; (8000434 <EXTI15_10_IRQHandler+0x68>)
 80003ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ec:	4798      	blx	r3
}
 80003ee:	e01e      	b.n	800042e <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI12_LINE] != NULL)
 80003f0:	4b10      	ldr	r3, [pc, #64]	; (8000434 <EXTI15_10_IRQHandler+0x68>)
 80003f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d003      	beq.n	8000400 <EXTI15_10_IRQHandler+0x34>
		MEXTI_CALLBACK[MEXTI12_LINE]();
 80003f8:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <EXTI15_10_IRQHandler+0x68>)
 80003fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fc:	4798      	blx	r3
}
 80003fe:	e016      	b.n	800042e <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI13_LINE] != NULL)
 8000400:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <EXTI15_10_IRQHandler+0x68>)
 8000402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000404:	2b00      	cmp	r3, #0
 8000406:	d003      	beq.n	8000410 <EXTI15_10_IRQHandler+0x44>
		MEXTI_CALLBACK[MEXTI13_LINE]();
 8000408:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <EXTI15_10_IRQHandler+0x68>)
 800040a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800040c:	4798      	blx	r3
}
 800040e:	e00e      	b.n	800042e <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI14_LINE] != NULL)
 8000410:	4b08      	ldr	r3, [pc, #32]	; (8000434 <EXTI15_10_IRQHandler+0x68>)
 8000412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000414:	2b00      	cmp	r3, #0
 8000416:	d003      	beq.n	8000420 <EXTI15_10_IRQHandler+0x54>
		MEXTI_CALLBACK[MEXTI14_LINE]();
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <EXTI15_10_IRQHandler+0x68>)
 800041a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800041c:	4798      	blx	r3
}
 800041e:	e006      	b.n	800042e <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI15_LINE] != NULL)
 8000420:	4b04      	ldr	r3, [pc, #16]	; (8000434 <EXTI15_10_IRQHandler+0x68>)
 8000422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000424:	2b00      	cmp	r3, #0
 8000426:	d002      	beq.n	800042e <EXTI15_10_IRQHandler+0x62>
		MEXTI_CALLBACK[MEXTI15_LINE]();
 8000428:	4b02      	ldr	r3, [pc, #8]	; (8000434 <EXTI15_10_IRQHandler+0x68>)
 800042a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800042c:	4798      	blx	r3
}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	20000050 	.word	0x20000050

08000438 <MGPIO_enSetPinDirection>:
 *
 * \Return value:   : ErrorState_t  -> SUCEESS
 * 								   -> OUT_OF_RANG_ERR
 *******************************************************************************/
ErrorState_t MGPIO_enSetPinDirection(MGPIO_PORT_t copy_u8port, MGPIO_PIN_t copy_u8pin, u8 copy_u8Mode)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
 8000442:	460b      	mov	r3, r1
 8000444:	71bb      	strb	r3, [r7, #6]
 8000446:	4613      	mov	r3, r2
 8000448:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 800044a:	2302      	movs	r3, #2
 800044c:	73fb      	strb	r3, [r7, #15]
	 * 	3. Set the 4bit Configuration with the Selected Mode
	 *
	 * 	@اhint 	use 4bit Masked pins to clear and shifting it correspoinding with
	 * 			the Gpio pin and use that offest when setting the Mode
	 * */
	switch(copy_u8port)
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	2b02      	cmp	r3, #2
 8000452:	d07f      	beq.n	8000554 <MGPIO_enSetPinDirection+0x11c>
 8000454:	2b02      	cmp	r3, #2
 8000456:	f300 80b9 	bgt.w	80005cc <MGPIO_enSetPinDirection+0x194>
 800045a:	2b00      	cmp	r3, #0
 800045c:	d002      	beq.n	8000464 <MGPIO_enSetPinDirection+0x2c>
 800045e:	2b01      	cmp	r3, #1
 8000460:	d03c      	beq.n	80004dc <MGPIO_enSetPinDirection+0xa4>
 8000462:	e0b3      	b.n	80005cc <MGPIO_enSetPinDirection+0x194>
	{
	case PORTA:
		if (copy_u8pin < MGPIO_CRL_MAX)
 8000464:	79bb      	ldrb	r3, [r7, #6]
 8000466:	2b07      	cmp	r3, #7
 8000468:	d817      	bhi.n	800049a <MGPIO_enSetPinDirection+0x62>
		{
			GPIOA->GPIO_CRL &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET)) ;
 800046a:	4b5d      	ldr	r3, [pc, #372]	; (80005e0 <MGPIO_enSetPinDirection+0x1a8>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	79ba      	ldrb	r2, [r7, #6]
 8000470:	0092      	lsls	r2, r2, #2
 8000472:	210f      	movs	r1, #15
 8000474:	fa01 f202 	lsl.w	r2, r1, r2
 8000478:	43d2      	mvns	r2, r2
 800047a:	4611      	mov	r1, r2
 800047c:	4a58      	ldr	r2, [pc, #352]	; (80005e0 <MGPIO_enSetPinDirection+0x1a8>)
 800047e:	400b      	ands	r3, r1
 8000480:	6013      	str	r3, [r2, #0]
			GPIOA->GPIO_CRL |= copy_u8Mode << (copy_u8pin * MGPIO_OFFSET) ;
 8000482:	4b57      	ldr	r3, [pc, #348]	; (80005e0 <MGPIO_enSetPinDirection+0x1a8>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	7979      	ldrb	r1, [r7, #5]
 8000488:	79ba      	ldrb	r2, [r7, #6]
 800048a:	0092      	lsls	r2, r2, #2
 800048c:	fa01 f202 	lsl.w	r2, r1, r2
 8000490:	4611      	mov	r1, r2
 8000492:	4a53      	ldr	r2, [pc, #332]	; (80005e0 <MGPIO_enSetPinDirection+0x1a8>)
 8000494:	430b      	orrs	r3, r1
 8000496:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000498:	e09b      	b.n	80005d2 <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < MGPIO_CRH_MAX)
 800049a:	79bb      	ldrb	r3, [r7, #6]
 800049c:	2b0f      	cmp	r3, #15
 800049e:	d81a      	bhi.n	80004d6 <MGPIO_enSetPinDirection+0x9e>
			copy_u8pin -= MGPIO_CRL_MAX  ;
 80004a0:	79bb      	ldrb	r3, [r7, #6]
 80004a2:	3b08      	subs	r3, #8
 80004a4:	71bb      	strb	r3, [r7, #6]
			GPIOA->GPIO_CRH &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET));
 80004a6:	4b4e      	ldr	r3, [pc, #312]	; (80005e0 <MGPIO_enSetPinDirection+0x1a8>)
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	79ba      	ldrb	r2, [r7, #6]
 80004ac:	0092      	lsls	r2, r2, #2
 80004ae:	210f      	movs	r1, #15
 80004b0:	fa01 f202 	lsl.w	r2, r1, r2
 80004b4:	43d2      	mvns	r2, r2
 80004b6:	4611      	mov	r1, r2
 80004b8:	4a49      	ldr	r2, [pc, #292]	; (80005e0 <MGPIO_enSetPinDirection+0x1a8>)
 80004ba:	400b      	ands	r3, r1
 80004bc:	6053      	str	r3, [r2, #4]
			GPIOA->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET));
 80004be:	4b48      	ldr	r3, [pc, #288]	; (80005e0 <MGPIO_enSetPinDirection+0x1a8>)
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	7979      	ldrb	r1, [r7, #5]
 80004c4:	79ba      	ldrb	r2, [r7, #6]
 80004c6:	0092      	lsls	r2, r2, #2
 80004c8:	fa01 f202 	lsl.w	r2, r1, r2
 80004cc:	4611      	mov	r1, r2
 80004ce:	4a44      	ldr	r2, [pc, #272]	; (80005e0 <MGPIO_enSetPinDirection+0x1a8>)
 80004d0:	430b      	orrs	r3, r1
 80004d2:	6053      	str	r3, [r2, #4]
		break;
 80004d4:	e07d      	b.n	80005d2 <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 80004d6:	2300      	movs	r3, #0
 80004d8:	73fb      	strb	r3, [r7, #15]
		break;
 80004da:	e07a      	b.n	80005d2 <MGPIO_enSetPinDirection+0x19a>

	case PORTB:
		if (copy_u8pin < MGPIO_CRL_MAX)
 80004dc:	79bb      	ldrb	r3, [r7, #6]
 80004de:	2b07      	cmp	r3, #7
 80004e0:	d817      	bhi.n	8000512 <MGPIO_enSetPinDirection+0xda>
		{
			GPIOB->GPIO_CRL &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET)) ;
 80004e2:	4b40      	ldr	r3, [pc, #256]	; (80005e4 <MGPIO_enSetPinDirection+0x1ac>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	79ba      	ldrb	r2, [r7, #6]
 80004e8:	0092      	lsls	r2, r2, #2
 80004ea:	210f      	movs	r1, #15
 80004ec:	fa01 f202 	lsl.w	r2, r1, r2
 80004f0:	43d2      	mvns	r2, r2
 80004f2:	4611      	mov	r1, r2
 80004f4:	4a3b      	ldr	r2, [pc, #236]	; (80005e4 <MGPIO_enSetPinDirection+0x1ac>)
 80004f6:	400b      	ands	r3, r1
 80004f8:	6013      	str	r3, [r2, #0]
			GPIOB->GPIO_CRL |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET)) ;
 80004fa:	4b3a      	ldr	r3, [pc, #232]	; (80005e4 <MGPIO_enSetPinDirection+0x1ac>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	7979      	ldrb	r1, [r7, #5]
 8000500:	79ba      	ldrb	r2, [r7, #6]
 8000502:	0092      	lsls	r2, r2, #2
 8000504:	fa01 f202 	lsl.w	r2, r1, r2
 8000508:	4611      	mov	r1, r2
 800050a:	4a36      	ldr	r2, [pc, #216]	; (80005e4 <MGPIO_enSetPinDirection+0x1ac>)
 800050c:	430b      	orrs	r3, r1
 800050e:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000510:	e05f      	b.n	80005d2 <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < MGPIO_CRH_MAX)
 8000512:	79bb      	ldrb	r3, [r7, #6]
 8000514:	2b0f      	cmp	r3, #15
 8000516:	d81a      	bhi.n	800054e <MGPIO_enSetPinDirection+0x116>
			copy_u8pin -= MGPIO_CRL_MAX ;
 8000518:	79bb      	ldrb	r3, [r7, #6]
 800051a:	3b08      	subs	r3, #8
 800051c:	71bb      	strb	r3, [r7, #6]
			GPIOB->GPIO_CRH &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET)) ;
 800051e:	4b31      	ldr	r3, [pc, #196]	; (80005e4 <MGPIO_enSetPinDirection+0x1ac>)
 8000520:	685b      	ldr	r3, [r3, #4]
 8000522:	79ba      	ldrb	r2, [r7, #6]
 8000524:	0092      	lsls	r2, r2, #2
 8000526:	210f      	movs	r1, #15
 8000528:	fa01 f202 	lsl.w	r2, r1, r2
 800052c:	43d2      	mvns	r2, r2
 800052e:	4611      	mov	r1, r2
 8000530:	4a2c      	ldr	r2, [pc, #176]	; (80005e4 <MGPIO_enSetPinDirection+0x1ac>)
 8000532:	400b      	ands	r3, r1
 8000534:	6053      	str	r3, [r2, #4]
			GPIOB->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET)) ;
 8000536:	4b2b      	ldr	r3, [pc, #172]	; (80005e4 <MGPIO_enSetPinDirection+0x1ac>)
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	7979      	ldrb	r1, [r7, #5]
 800053c:	79ba      	ldrb	r2, [r7, #6]
 800053e:	0092      	lsls	r2, r2, #2
 8000540:	fa01 f202 	lsl.w	r2, r1, r2
 8000544:	4611      	mov	r1, r2
 8000546:	4a27      	ldr	r2, [pc, #156]	; (80005e4 <MGPIO_enSetPinDirection+0x1ac>)
 8000548:	430b      	orrs	r3, r1
 800054a:	6053      	str	r3, [r2, #4]
		break;
 800054c:	e041      	b.n	80005d2 <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 800054e:	2300      	movs	r3, #0
 8000550:	73fb      	strb	r3, [r7, #15]
		break;
 8000552:	e03e      	b.n	80005d2 <MGPIO_enSetPinDirection+0x19a>

	case PORTC:
		if (copy_u8pin < MGPIO_CRL_MAX)
 8000554:	79bb      	ldrb	r3, [r7, #6]
 8000556:	2b07      	cmp	r3, #7
 8000558:	d817      	bhi.n	800058a <MGPIO_enSetPinDirection+0x152>
		{
			GPIOC->GPIO_CRL &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET)) ;
 800055a:	4b23      	ldr	r3, [pc, #140]	; (80005e8 <MGPIO_enSetPinDirection+0x1b0>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	79ba      	ldrb	r2, [r7, #6]
 8000560:	0092      	lsls	r2, r2, #2
 8000562:	210f      	movs	r1, #15
 8000564:	fa01 f202 	lsl.w	r2, r1, r2
 8000568:	43d2      	mvns	r2, r2
 800056a:	4611      	mov	r1, r2
 800056c:	4a1e      	ldr	r2, [pc, #120]	; (80005e8 <MGPIO_enSetPinDirection+0x1b0>)
 800056e:	400b      	ands	r3, r1
 8000570:	6013      	str	r3, [r2, #0]
			GPIOC->GPIO_CRL |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET)) ;
 8000572:	4b1d      	ldr	r3, [pc, #116]	; (80005e8 <MGPIO_enSetPinDirection+0x1b0>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	7979      	ldrb	r1, [r7, #5]
 8000578:	79ba      	ldrb	r2, [r7, #6]
 800057a:	0092      	lsls	r2, r2, #2
 800057c:	fa01 f202 	lsl.w	r2, r1, r2
 8000580:	4611      	mov	r1, r2
 8000582:	4a19      	ldr	r2, [pc, #100]	; (80005e8 <MGPIO_enSetPinDirection+0x1b0>)
 8000584:	430b      	orrs	r3, r1
 8000586:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000588:	e023      	b.n	80005d2 <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < MGPIO_CRH_MAX)
 800058a:	79bb      	ldrb	r3, [r7, #6]
 800058c:	2b0f      	cmp	r3, #15
 800058e:	d81a      	bhi.n	80005c6 <MGPIO_enSetPinDirection+0x18e>
			copy_u8pin -= MGPIO_CRL_MAX ;
 8000590:	79bb      	ldrb	r3, [r7, #6]
 8000592:	3b08      	subs	r3, #8
 8000594:	71bb      	strb	r3, [r7, #6]
			GPIOC->GPIO_CRH &= ~(MGPIO_MASK) << (copy_u8pin * MGPIO_OFFSET) ;
 8000596:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <MGPIO_enSetPinDirection+0x1b0>)
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	79ba      	ldrb	r2, [r7, #6]
 800059c:	0092      	lsls	r2, r2, #2
 800059e:	f06f 010f 	mvn.w	r1, #15
 80005a2:	fa01 f202 	lsl.w	r2, r1, r2
 80005a6:	4611      	mov	r1, r2
 80005a8:	4a0f      	ldr	r2, [pc, #60]	; (80005e8 <MGPIO_enSetPinDirection+0x1b0>)
 80005aa:	400b      	ands	r3, r1
 80005ac:	6053      	str	r3, [r2, #4]
			GPIOC->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET)) ;
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <MGPIO_enSetPinDirection+0x1b0>)
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	7979      	ldrb	r1, [r7, #5]
 80005b4:	79ba      	ldrb	r2, [r7, #6]
 80005b6:	0092      	lsls	r2, r2, #2
 80005b8:	fa01 f202 	lsl.w	r2, r1, r2
 80005bc:	4611      	mov	r1, r2
 80005be:	4a0a      	ldr	r2, [pc, #40]	; (80005e8 <MGPIO_enSetPinDirection+0x1b0>)
 80005c0:	430b      	orrs	r3, r1
 80005c2:	6053      	str	r3, [r2, #4]
		break;
 80005c4:	e005      	b.n	80005d2 <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 80005c6:	2300      	movs	r3, #0
 80005c8:	73fb      	strb	r3, [r7, #15]
		break;
 80005ca:	e002      	b.n	80005d2 <MGPIO_enSetPinDirection+0x19a>

	default:
		local_state = OUT_OF_RANG_ERR;
 80005cc:	2300      	movs	r3, #0
 80005ce:	73fb      	strb	r3, [r7, #15]
		break;
 80005d0:	bf00      	nop
	}
	return local_state;
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	40010800 	.word	0x40010800
 80005e4:	40010c00 	.word	0x40010c00
 80005e8:	40011000 	.word	0x40011000

080005ec <MGPIO_enSetPinValue>:
 *
 * \Return value:   : ErrorState_t  -> SUCEESS
 * 								   -> OUT_OF_RANG_ERR
 *******************************************************************************/
ErrorState_t MGPIO_enSetPinValue(MGPIO_PORT_t copy_u8port, MGPIO_PIN_t copy_u8pin, MGPIO_VALUE_t copy_u8Value)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
 80005f6:	460b      	mov	r3, r1
 80005f8:	71bb      	strb	r3, [r7, #6]
 80005fa:	4613      	mov	r3, r2
 80005fc:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 80005fe:	2302      	movs	r3, #2
 8000600:	73fb      	strb	r3, [r7, #15]
	/*	@beief 		This APIs use to set the GPIO PIN
	 *  choose between High and Low Value state and set it in ODR
	 * */
	switch(copy_u8port)
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	2b02      	cmp	r3, #2
 8000606:	d046      	beq.n	8000696 <MGPIO_enSetPinValue+0xaa>
 8000608:	2b02      	cmp	r3, #2
 800060a:	dc64      	bgt.n	80006d6 <MGPIO_enSetPinValue+0xea>
 800060c:	2b00      	cmp	r3, #0
 800060e:	d002      	beq.n	8000616 <MGPIO_enSetPinValue+0x2a>
 8000610:	2b01      	cmp	r3, #1
 8000612:	d020      	beq.n	8000656 <MGPIO_enSetPinValue+0x6a>
 8000614:	e05f      	b.n	80006d6 <MGPIO_enSetPinValue+0xea>
	{
	case PORTA:
		if (copy_u8Value == HIGH)
 8000616:	797b      	ldrb	r3, [r7, #5]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d10a      	bne.n	8000632 <MGPIO_enSetPinValue+0x46>
		{
			SET_BIT(GPIOA->GPIO_ODR, copy_u8pin);
 800061c:	4b32      	ldr	r3, [pc, #200]	; (80006e8 <MGPIO_enSetPinValue+0xfc>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	79ba      	ldrb	r2, [r7, #6]
 8000622:	2101      	movs	r1, #1
 8000624:	fa01 f202 	lsl.w	r2, r1, r2
 8000628:	4611      	mov	r1, r2
 800062a:	4a2f      	ldr	r2, [pc, #188]	; (80006e8 <MGPIO_enSetPinValue+0xfc>)
 800062c:	430b      	orrs	r3, r1
 800062e:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000630:	e054      	b.n	80006dc <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 8000632:	797b      	ldrb	r3, [r7, #5]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d10b      	bne.n	8000650 <MGPIO_enSetPinValue+0x64>
			CLR_BIT(GPIOA->GPIO_ODR, copy_u8pin);
 8000638:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <MGPIO_enSetPinValue+0xfc>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	79ba      	ldrb	r2, [r7, #6]
 800063e:	2101      	movs	r1, #1
 8000640:	fa01 f202 	lsl.w	r2, r1, r2
 8000644:	43d2      	mvns	r2, r2
 8000646:	4611      	mov	r1, r2
 8000648:	4a27      	ldr	r2, [pc, #156]	; (80006e8 <MGPIO_enSetPinValue+0xfc>)
 800064a:	400b      	ands	r3, r1
 800064c:	60d3      	str	r3, [r2, #12]
		break;
 800064e:	e045      	b.n	80006dc <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 8000650:	2300      	movs	r3, #0
 8000652:	73fb      	strb	r3, [r7, #15]
		break;
 8000654:	e042      	b.n	80006dc <MGPIO_enSetPinValue+0xf0>

	case PORTB:
		if (copy_u8Value == HIGH)
 8000656:	797b      	ldrb	r3, [r7, #5]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d10a      	bne.n	8000672 <MGPIO_enSetPinValue+0x86>
		{
			SET_BIT(GPIOB->GPIO_ODR, copy_u8pin);
 800065c:	4b23      	ldr	r3, [pc, #140]	; (80006ec <MGPIO_enSetPinValue+0x100>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	79ba      	ldrb	r2, [r7, #6]
 8000662:	2101      	movs	r1, #1
 8000664:	fa01 f202 	lsl.w	r2, r1, r2
 8000668:	4611      	mov	r1, r2
 800066a:	4a20      	ldr	r2, [pc, #128]	; (80006ec <MGPIO_enSetPinValue+0x100>)
 800066c:	430b      	orrs	r3, r1
 800066e:	60d3      	str	r3, [r2, #12]
		else
		{
			local_state = OUT_OF_RANG_ERR;

		}
		break;
 8000670:	e034      	b.n	80006dc <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 8000672:	797b      	ldrb	r3, [r7, #5]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d10b      	bne.n	8000690 <MGPIO_enSetPinValue+0xa4>
			CLR_BIT(GPIOB->GPIO_ODR, copy_u8pin);
 8000678:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <MGPIO_enSetPinValue+0x100>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	79ba      	ldrb	r2, [r7, #6]
 800067e:	2101      	movs	r1, #1
 8000680:	fa01 f202 	lsl.w	r2, r1, r2
 8000684:	43d2      	mvns	r2, r2
 8000686:	4611      	mov	r1, r2
 8000688:	4a18      	ldr	r2, [pc, #96]	; (80006ec <MGPIO_enSetPinValue+0x100>)
 800068a:	400b      	ands	r3, r1
 800068c:	60d3      	str	r3, [r2, #12]
		break;
 800068e:	e025      	b.n	80006dc <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 8000690:	2300      	movs	r3, #0
 8000692:	73fb      	strb	r3, [r7, #15]
		break;
 8000694:	e022      	b.n	80006dc <MGPIO_enSetPinValue+0xf0>

	case PORTC:
		if (copy_u8Value == HIGH)
 8000696:	797b      	ldrb	r3, [r7, #5]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d10a      	bne.n	80006b2 <MGPIO_enSetPinValue+0xc6>
		{
			SET_BIT(GPIOC->GPIO_ODR, copy_u8pin);
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MGPIO_enSetPinValue+0x104>)
 800069e:	68db      	ldr	r3, [r3, #12]
 80006a0:	79ba      	ldrb	r2, [r7, #6]
 80006a2:	2101      	movs	r1, #1
 80006a4:	fa01 f202 	lsl.w	r2, r1, r2
 80006a8:	4611      	mov	r1, r2
 80006aa:	4a11      	ldr	r2, [pc, #68]	; (80006f0 <MGPIO_enSetPinValue+0x104>)
 80006ac:	430b      	orrs	r3, r1
 80006ae:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 80006b0:	e014      	b.n	80006dc <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 80006b2:	797b      	ldrb	r3, [r7, #5]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d10b      	bne.n	80006d0 <MGPIO_enSetPinValue+0xe4>
			CLR_BIT(GPIOC->GPIO_ODR, copy_u8pin);
 80006b8:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <MGPIO_enSetPinValue+0x104>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	79ba      	ldrb	r2, [r7, #6]
 80006be:	2101      	movs	r1, #1
 80006c0:	fa01 f202 	lsl.w	r2, r1, r2
 80006c4:	43d2      	mvns	r2, r2
 80006c6:	4611      	mov	r1, r2
 80006c8:	4a09      	ldr	r2, [pc, #36]	; (80006f0 <MGPIO_enSetPinValue+0x104>)
 80006ca:	400b      	ands	r3, r1
 80006cc:	60d3      	str	r3, [r2, #12]
		break;
 80006ce:	e005      	b.n	80006dc <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 80006d0:	2300      	movs	r3, #0
 80006d2:	73fb      	strb	r3, [r7, #15]
		break;
 80006d4:	e002      	b.n	80006dc <MGPIO_enSetPinValue+0xf0>

	default:
		local_state = OUT_OF_RANG_ERR;
 80006d6:	2300      	movs	r3, #0
 80006d8:	73fb      	strb	r3, [r7, #15]
		break;
 80006da:	bf00      	nop
	}
	return local_state;
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr
 80006e8:	40010800 	.word	0x40010800
 80006ec:	40010c00 	.word	0x40010c00
 80006f0:	40011000 	.word	0x40011000

080006f4 <MGPIO_enGetPinValue>:
 *
 * \Return value:   : ErrorState_t  -> SUCEESS
 * 								   -> OUT_OF_RANG_ERR
 *******************************************************************************/
ErrorState_t MGPIO_enGetPinValue(MGPIO_PORT_t copy_u8port, MGPIO_PIN_t copy_u8pin, MGPIO_VALUE_t *pinValue)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	603a      	str	r2, [r7, #0]
 80006fe:	71fb      	strb	r3, [r7, #7]
 8000700:	460b      	mov	r3, r1
 8000702:	71bb      	strb	r3, [r7, #6]
	ErrorState_t local_state = SUCCESS;
 8000704:	2302      	movs	r3, #2
 8000706:	73fb      	strb	r3, [r7, #15]

	/*	@beief This APIs use to get the GPIO PIN Value
	 *  GET_BIT will get the ODR register Pin value and returned by Reference
	 * */

	switch(copy_u8port)
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	2b02      	cmp	r3, #2
 800070c:	d01e      	beq.n	800074c <MGPIO_enGetPinValue+0x58>
 800070e:	2b02      	cmp	r3, #2
 8000710:	dc28      	bgt.n	8000764 <MGPIO_enGetPinValue+0x70>
 8000712:	2b00      	cmp	r3, #0
 8000714:	d002      	beq.n	800071c <MGPIO_enGetPinValue+0x28>
 8000716:	2b01      	cmp	r3, #1
 8000718:	d00c      	beq.n	8000734 <MGPIO_enGetPinValue+0x40>
 800071a:	e023      	b.n	8000764 <MGPIO_enGetPinValue+0x70>
	{
	case PORTA:
		*pinValue = GET_BIT(GPIOA->GPIO_IDR, copy_u8pin);
 800071c:	4b16      	ldr	r3, [pc, #88]	; (8000778 <MGPIO_enGetPinValue+0x84>)
 800071e:	689a      	ldr	r2, [r3, #8]
 8000720:	79bb      	ldrb	r3, [r7, #6]
 8000722:	fa22 f303 	lsr.w	r3, r2, r3
 8000726:	b2db      	uxtb	r3, r3
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	b2da      	uxtb	r2, r3
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	701a      	strb	r2, [r3, #0]
		break;
 8000732:	e01a      	b.n	800076a <MGPIO_enGetPinValue+0x76>

	case PORTB:
		*pinValue = GET_BIT(GPIOB->GPIO_IDR, copy_u8pin);
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <MGPIO_enGetPinValue+0x88>)
 8000736:	689a      	ldr	r2, [r3, #8]
 8000738:	79bb      	ldrb	r3, [r7, #6]
 800073a:	fa22 f303 	lsr.w	r3, r2, r3
 800073e:	b2db      	uxtb	r3, r3
 8000740:	f003 0301 	and.w	r3, r3, #1
 8000744:	b2da      	uxtb	r2, r3
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	701a      	strb	r2, [r3, #0]
		break;
 800074a:	e00e      	b.n	800076a <MGPIO_enGetPinValue+0x76>

	case PORTC:
		*pinValue = GET_BIT(GPIOC->GPIO_IDR, copy_u8pin);
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MGPIO_enGetPinValue+0x8c>)
 800074e:	689a      	ldr	r2, [r3, #8]
 8000750:	79bb      	ldrb	r3, [r7, #6]
 8000752:	fa22 f303 	lsr.w	r3, r2, r3
 8000756:	b2db      	uxtb	r3, r3
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	b2da      	uxtb	r2, r3
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	701a      	strb	r2, [r3, #0]
		break;
 8000762:	e002      	b.n	800076a <MGPIO_enGetPinValue+0x76>
	default:
		local_state =  OUT_OF_RANG_ERR;
 8000764:	2300      	movs	r3, #0
 8000766:	73fb      	strb	r3, [r7, #15]
		break;
 8000768:	bf00      	nop
	}

	return local_state;
 800076a:	7bfb      	ldrb	r3, [r7, #15]
}
 800076c:	4618      	mov	r0, r3
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40010800 	.word	0x40010800
 800077c:	40010c00 	.word	0x40010c00
 8000780:	40011000 	.word	0x40011000

08000784 <MGPIO_enLockPin>:
 * 								    -> OUT_OF_RANG_ERR
 * 								    -> FAILARE
 *******************************************************************************/

ErrorState_t MGPIO_enLockPin(MGPIO_PORT_t copy_u8port, MGPIO_PIN_t copy_u8pin)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	460a      	mov	r2, r1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	4613      	mov	r3, r2
 8000792:	71bb      	strb	r3, [r7, #6]
	ErrorState_t local_state = SUCCESS;
 8000794:	2302      	movs	r3, #2
 8000796:	73fb      	strb	r3, [r7, #15]
	 * 	@اhint 1.there are a sequence to write and to enable that featuers
	 * 		  2.in Arm Achitures there is option to lock the GPIO PIN state
	 * */
	u8 pinState ;

	switch (copy_u8port)
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	2b02      	cmp	r3, #2
 800079c:	d06d      	beq.n	800087a <MGPIO_enLockPin+0xf6>
 800079e:	2b02      	cmp	r3, #2
 80007a0:	f300 80a4 	bgt.w	80008ec <MGPIO_enLockPin+0x168>
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d002      	beq.n	80007ae <MGPIO_enLockPin+0x2a>
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d02d      	beq.n	8000808 <MGPIO_enLockPin+0x84>
 80007ac:	e09e      	b.n	80008ec <MGPIO_enLockPin+0x168>
	{
	case PORTA:
	//	SET_BIT(GPIOA->GPIO_LCKR,copy_u8pin);


		SET_BIT(GPIOA->GPIO_LCKR,LCKK);
 80007ae:	4b54      	ldr	r3, [pc, #336]	; (8000900 <MGPIO_enLockPin+0x17c>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	4a53      	ldr	r2, [pc, #332]	; (8000900 <MGPIO_enLockPin+0x17c>)
 80007b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007b8:	6193      	str	r3, [r2, #24]
		CLR_BIT(GPIOA->GPIO_LCKR,LCKK);
 80007ba:	4b51      	ldr	r3, [pc, #324]	; (8000900 <MGPIO_enLockPin+0x17c>)
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	4a50      	ldr	r2, [pc, #320]	; (8000900 <MGPIO_enLockPin+0x17c>)
 80007c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007c4:	6193      	str	r3, [r2, #24]
		SET_BIT(GPIOA->GPIO_LCKR,LCKK);
 80007c6:	4b4e      	ldr	r3, [pc, #312]	; (8000900 <MGPIO_enLockPin+0x17c>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	4a4d      	ldr	r2, [pc, #308]	; (8000900 <MGPIO_enLockPin+0x17c>)
 80007cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007d0:	6193      	str	r3, [r2, #24]

		pinState = GET_BIT(GPIOA->GPIO_LCKR,LCKK);
 80007d2:	4b4b      	ldr	r3, [pc, #300]	; (8000900 <MGPIO_enLockPin+0x17c>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	0c1b      	lsrs	r3, r3, #16
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	73bb      	strb	r3, [r7, #14]
		pinState = GET_BIT(GPIOA->GPIO_LCKR,LCKK);
 80007e0:	4b47      	ldr	r3, [pc, #284]	; (8000900 <MGPIO_enLockPin+0x17c>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	0c1b      	lsrs	r3, r3, #16
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	73bb      	strb	r3, [r7, #14]

		if (GET_BIT(GPIOA->GPIO_LCKR,LCKK))
 80007ee:	4b44      	ldr	r3, [pc, #272]	; (8000900 <MGPIO_enLockPin+0x17c>)
 80007f0:	699b      	ldr	r3, [r3, #24]
 80007f2:	0c1b      	lsrs	r3, r3, #16
 80007f4:	f003 0301 	and.w	r3, r3, #1
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d002      	beq.n	8000802 <MGPIO_enLockPin+0x7e>
		{
			local_state = SUCCESS;
 80007fc:	2302      	movs	r3, #2
 80007fe:	73fb      	strb	r3, [r7, #15]
		else
		{
			local_state = FAILARE;
		}

		break;
 8000800:	e077      	b.n	80008f2 <MGPIO_enLockPin+0x16e>
			local_state = FAILARE;
 8000802:	2303      	movs	r3, #3
 8000804:	73fb      	strb	r3, [r7, #15]
		break;
 8000806:	e074      	b.n	80008f2 <MGPIO_enLockPin+0x16e>

	case PORTB:
		SET_BIT(GPIOB->GPIO_LCKR,copy_u8pin);
 8000808:	4b3e      	ldr	r3, [pc, #248]	; (8000904 <MGPIO_enLockPin+0x180>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	79ba      	ldrb	r2, [r7, #6]
 800080e:	2101      	movs	r1, #1
 8000810:	fa01 f202 	lsl.w	r2, r1, r2
 8000814:	4611      	mov	r1, r2
 8000816:	4a3b      	ldr	r2, [pc, #236]	; (8000904 <MGPIO_enLockPin+0x180>)
 8000818:	430b      	orrs	r3, r1
 800081a:	6193      	str	r3, [r2, #24]

		SET_BIT(GPIOB->GPIO_LCKR,LCKK);
 800081c:	4b39      	ldr	r3, [pc, #228]	; (8000904 <MGPIO_enLockPin+0x180>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a38      	ldr	r2, [pc, #224]	; (8000904 <MGPIO_enLockPin+0x180>)
 8000822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000826:	6193      	str	r3, [r2, #24]
		CLR_BIT(GPIOB->GPIO_LCKR,LCKK);
 8000828:	4b36      	ldr	r3, [pc, #216]	; (8000904 <MGPIO_enLockPin+0x180>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a35      	ldr	r2, [pc, #212]	; (8000904 <MGPIO_enLockPin+0x180>)
 800082e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000832:	6193      	str	r3, [r2, #24]
		SET_BIT(GPIOB->GPIO_LCKR,LCKK);
 8000834:	4b33      	ldr	r3, [pc, #204]	; (8000904 <MGPIO_enLockPin+0x180>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	4a32      	ldr	r2, [pc, #200]	; (8000904 <MGPIO_enLockPin+0x180>)
 800083a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800083e:	6193      	str	r3, [r2, #24]

		pinState = GET_BIT(GPIOB->GPIO_LCKR,LCKK);
 8000840:	4b30      	ldr	r3, [pc, #192]	; (8000904 <MGPIO_enLockPin+0x180>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	0c1b      	lsrs	r3, r3, #16
 8000846:	b2db      	uxtb	r3, r3
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	73bb      	strb	r3, [r7, #14]
		if (pinState == 0)
 800084e:	7bbb      	ldrb	r3, [r7, #14]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d10f      	bne.n	8000874 <MGPIO_enLockPin+0xf0>
		{
			pinState = GET_BIT(GPIOB->GPIO_LCKR,LCKK);
 8000854:	4b2b      	ldr	r3, [pc, #172]	; (8000904 <MGPIO_enLockPin+0x180>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	0c1b      	lsrs	r3, r3, #16
 800085a:	b2db      	uxtb	r3, r3
 800085c:	f003 0301 	and.w	r3, r3, #1
 8000860:	73bb      	strb	r3, [r7, #14]
			if (pinState == 1)
 8000862:	7bbb      	ldrb	r3, [r7, #14]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d102      	bne.n	800086e <MGPIO_enLockPin+0xea>
			{
				local_state = SUCCESS;
 8000868:	2302      	movs	r3, #2
 800086a:	73fb      	strb	r3, [r7, #15]
		}
		else
		{
			local_state = FAILARE;
		}
		break;
 800086c:	e041      	b.n	80008f2 <MGPIO_enLockPin+0x16e>
				local_state = FAILARE;
 800086e:	2303      	movs	r3, #3
 8000870:	73fb      	strb	r3, [r7, #15]
		break;
 8000872:	e03e      	b.n	80008f2 <MGPIO_enLockPin+0x16e>
			local_state = FAILARE;
 8000874:	2303      	movs	r3, #3
 8000876:	73fb      	strb	r3, [r7, #15]
		break;
 8000878:	e03b      	b.n	80008f2 <MGPIO_enLockPin+0x16e>

	case PORTC:
		SET_BIT(GPIOC->GPIO_LCKR,copy_u8pin);
 800087a:	4b23      	ldr	r3, [pc, #140]	; (8000908 <MGPIO_enLockPin+0x184>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	79ba      	ldrb	r2, [r7, #6]
 8000880:	2101      	movs	r1, #1
 8000882:	fa01 f202 	lsl.w	r2, r1, r2
 8000886:	4611      	mov	r1, r2
 8000888:	4a1f      	ldr	r2, [pc, #124]	; (8000908 <MGPIO_enLockPin+0x184>)
 800088a:	430b      	orrs	r3, r1
 800088c:	6193      	str	r3, [r2, #24]

		SET_BIT(GPIOC->GPIO_LCKR,LCKK);
 800088e:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <MGPIO_enLockPin+0x184>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	4a1d      	ldr	r2, [pc, #116]	; (8000908 <MGPIO_enLockPin+0x184>)
 8000894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000898:	6193      	str	r3, [r2, #24]
		CLR_BIT(GPIOC->GPIO_LCKR,LCKK);
 800089a:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <MGPIO_enLockPin+0x184>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	4a1a      	ldr	r2, [pc, #104]	; (8000908 <MGPIO_enLockPin+0x184>)
 80008a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008a4:	6193      	str	r3, [r2, #24]
		SET_BIT(GPIOC->GPIO_LCKR,LCKK);
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MGPIO_enLockPin+0x184>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	4a17      	ldr	r2, [pc, #92]	; (8000908 <MGPIO_enLockPin+0x184>)
 80008ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008b0:	6193      	str	r3, [r2, #24]

		pinState = GET_BIT(GPIOC->GPIO_LCKR,LCKK);
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MGPIO_enLockPin+0x184>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	0c1b      	lsrs	r3, r3, #16
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	73bb      	strb	r3, [r7, #14]
		if (pinState == 0)
 80008c0:	7bbb      	ldrb	r3, [r7, #14]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d10f      	bne.n	80008e6 <MGPIO_enLockPin+0x162>
		{
			pinState = GET_BIT(GPIOC->GPIO_LCKR,LCKK);
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <MGPIO_enLockPin+0x184>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	0c1b      	lsrs	r3, r3, #16
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	73bb      	strb	r3, [r7, #14]
			if (pinState == 1)
 80008d4:	7bbb      	ldrb	r3, [r7, #14]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d102      	bne.n	80008e0 <MGPIO_enLockPin+0x15c>
			{
				local_state = SUCCESS;
 80008da:	2302      	movs	r3, #2
 80008dc:	73fb      	strb	r3, [r7, #15]
		}
		else
		{
			local_state = FAILARE;
		}
		break;
 80008de:	e008      	b.n	80008f2 <MGPIO_enLockPin+0x16e>
				local_state = FAILARE;
 80008e0:	2303      	movs	r3, #3
 80008e2:	73fb      	strb	r3, [r7, #15]
		break;
 80008e4:	e005      	b.n	80008f2 <MGPIO_enLockPin+0x16e>
			local_state = FAILARE;
 80008e6:	2303      	movs	r3, #3
 80008e8:	73fb      	strb	r3, [r7, #15]
		break;
 80008ea:	e002      	b.n	80008f2 <MGPIO_enLockPin+0x16e>

	default:
		local_state = OUT_OF_RANG_ERR;
 80008ec:	2300      	movs	r3, #0
 80008ee:	73fb      	strb	r3, [r7, #15]
		break;
 80008f0:	bf00      	nop
	}

	return local_state;
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40010800 	.word	0x40010800
 8000904:	40010c00 	.word	0x40010c00
 8000908:	40011000 	.word	0x40011000

0800090c <MRCC_enSysClkINIT>:
* \Parameters (in) : None
* \Return value:   : ErrorState_t  SUCEESS
*
*******************************************************************************/
ErrorState_t MRCC_enSysClkINIT(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0


	/** CLK source is HSI **/
#elif(MRCC_CLK_TYPE == MRCC_HSI)
	/* 1. ENABLE the HSI */
	SET_BIT(RCC->RCC_CR, HSION);
 8000910:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <MRCC_enSysClkINIT+0x74>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a1a      	ldr	r2, [pc, #104]	; (8000980 <MRCC_enSysClkINIT+0x74>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	6013      	str	r3, [r2, #0]

	/* 2. wait till HSE is READY 'settling time finished', stable */
	while (!(GET_BIT(RCC->RCC_CR, HSIRDY)));
 800091c:	bf00      	nop
 800091e:	4b18      	ldr	r3, [pc, #96]	; (8000980 <MRCC_enSysClkINIT+0x74>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	085b      	lsrs	r3, r3, #1
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	2b00      	cmp	r3, #0
 800092a:	d0f8      	beq.n	800091e <MRCC_enSysClkINIT+0x12>

	/* 3. Enable System switch clock with HSI */
	CLR_BIT(RCC->RCC_CFGR, SWC);
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MRCC_enSysClkINIT+0x74>)
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	4a13      	ldr	r2, [pc, #76]	; (8000980 <MRCC_enSysClkINIT+0x74>)
 8000932:	f023 0301 	bic.w	r3, r3, #1
 8000936:	6053      	str	r3, [r2, #4]

#else
#error("WRONG CLK TYPE");
#endif
	/* MASK the AHB and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= MRCC_AHB_MASK;
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MRCC_enSysClkINIT+0x74>)
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	4a10      	ldr	r2, [pc, #64]	; (8000980 <MRCC_enSysClkINIT+0x74>)
 800093e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000942:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= MRCC_AHB_PRESCALER;
 8000944:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MRCC_enSysClkINIT+0x74>)
 8000946:	4a0e      	ldr	r2, [pc, #56]	; (8000980 <MRCC_enSysClkINIT+0x74>)
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	6053      	str	r3, [r2, #4]

	/* MASK the APB1 and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= MRCC_APB1_MASK;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MRCC_enSysClkINIT+0x74>)
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <MRCC_enSysClkINIT+0x74>)
 8000952:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000956:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= MRCC_APB1_PRESCALER_MODE;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MRCC_enSysClkINIT+0x74>)
 800095a:	4a09      	ldr	r2, [pc, #36]	; (8000980 <MRCC_enSysClkINIT+0x74>)
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	6053      	str	r3, [r2, #4]

	/* MASK the APB2 and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= MRCC_APB2_MASK;
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <MRCC_enSysClkINIT+0x74>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	4a06      	ldr	r2, [pc, #24]	; (8000980 <MRCC_enSysClkINIT+0x74>)
 8000966:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800096a:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= MRCC_APB2_PRESCALER_MODE;
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <MRCC_enSysClkINIT+0x74>)
 800096e:	4a04      	ldr	r2, [pc, #16]	; (8000980 <MRCC_enSysClkINIT+0x74>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	6053      	str	r3, [r2, #4]
		RCC->RCC_CFGR &= MRCC_MCO_MASK;
		RCC->RCC_CFGR |= MRCC_MCO_MODE ;
	}
#endif

	return SUCCESS;
 8000974:	2302      	movs	r3, #2
}
 8000976:	4618      	mov	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40021000 	.word	0x40021000

08000984 <MRCC_enEnablePeripheralCLK>:
* \Return value:   : ErrorState_t  -> SUCEESS
* 								   -> OUT_OF_RANG_ERR
*******************************************************************************/

ErrorState_t MRCC_enEnablePeripheralCLK(u8 copy_u8Peripheral)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
	ErrorState_t local_state = SUCCESS;
 800098e:	2302      	movs	r3, #2
 8000990:	73fb      	strb	r3, [r7, #15]

	/* based on predefined Peripheral, switch to corresponding Register, and Enabled it*/
	if (copy_u8Peripheral < MRCC_AHB_REG)
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	2b1f      	cmp	r3, #31
 8000996:	d80a      	bhi.n	80009ae <MRCC_enEnablePeripheralCLK+0x2a>
		SET_BIT(RCC->RCC_AHBENR, copy_u8Peripheral);
 8000998:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <MRCC_enEnablePeripheralCLK+0x80>)
 800099a:	695b      	ldr	r3, [r3, #20]
 800099c:	79fa      	ldrb	r2, [r7, #7]
 800099e:	2101      	movs	r1, #1
 80009a0:	fa01 f202 	lsl.w	r2, r1, r2
 80009a4:	4611      	mov	r1, r2
 80009a6:	4a17      	ldr	r2, [pc, #92]	; (8000a04 <MRCC_enEnablePeripheralCLK+0x80>)
 80009a8:	430b      	orrs	r3, r1
 80009aa:	6153      	str	r3, [r2, #20]
 80009ac:	e023      	b.n	80009f6 <MRCC_enEnablePeripheralCLK+0x72>

	else if (copy_u8Peripheral < MRCC_APB1_REG)
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	2b3f      	cmp	r3, #63	; 0x3f
 80009b2:	d80d      	bhi.n	80009d0 <MRCC_enEnablePeripheralCLK+0x4c>
	{
		copy_u8Peripheral -= MRCC_AHB_REG;
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	3b20      	subs	r3, #32
 80009b8:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->RCC_APB1ENR, copy_u8Peripheral);
 80009ba:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <MRCC_enEnablePeripheralCLK+0x80>)
 80009bc:	69db      	ldr	r3, [r3, #28]
 80009be:	79fa      	ldrb	r2, [r7, #7]
 80009c0:	2101      	movs	r1, #1
 80009c2:	fa01 f202 	lsl.w	r2, r1, r2
 80009c6:	4611      	mov	r1, r2
 80009c8:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <MRCC_enEnablePeripheralCLK+0x80>)
 80009ca:	430b      	orrs	r3, r1
 80009cc:	61d3      	str	r3, [r2, #28]
 80009ce:	e012      	b.n	80009f6 <MRCC_enEnablePeripheralCLK+0x72>
	}

	else if (copy_u8Peripheral < MRCC_APB2_REG)
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	2b5f      	cmp	r3, #95	; 0x5f
 80009d4:	d80d      	bhi.n	80009f2 <MRCC_enEnablePeripheralCLK+0x6e>
	{
		copy_u8Peripheral -= MRCC_APB1_REG;
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	3b40      	subs	r3, #64	; 0x40
 80009da:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->RCC_APB2ENR, copy_u8Peripheral);
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MRCC_enEnablePeripheralCLK+0x80>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	79fa      	ldrb	r2, [r7, #7]
 80009e2:	2101      	movs	r1, #1
 80009e4:	fa01 f202 	lsl.w	r2, r1, r2
 80009e8:	4611      	mov	r1, r2
 80009ea:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <MRCC_enEnablePeripheralCLK+0x80>)
 80009ec:	430b      	orrs	r3, r1
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	e001      	b.n	80009f6 <MRCC_enEnablePeripheralCLK+0x72>
	}

	else
	{
		local_state = OUT_OF_RANG_ERR;
 80009f2:	2300      	movs	r3, #0
 80009f4:	73fb      	strb	r3, [r7, #15]
	}
	return local_state;
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40021000 	.word	0x40021000

08000a08 <SPI1_IRQHandler>:
 * @param	void
 * @retval	void
 */

void SPI1_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	if (MSPI_CALLBACK[MSPI1].callback_TxRx!= NULL)
 8000a0c:	4b27      	ldr	r3, [pc, #156]	; (8000aac <SPI1_IRQHandler+0xa4>)
 8000a0e:	689b      	ldr	r3, [r3, #8]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d046      	beq.n	8000aa2 <SPI1_IRQHandler+0x9a>
	{
		/* check if the Tx Buffer empty is fired, so copy the data and transmit it  */
		if ((GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_SR, TXE))&&(GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_CR2, MSPI_TXE_INT)))
 8000a14:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <SPI1_IRQHandler+0xa8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	085b      	lsrs	r3, r3, #1
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d00d      	beq.n	8000a40 <SPI1_IRQHandler+0x38>
 8000a24:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <SPI1_IRQHandler+0xa8>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	09db      	lsrs	r3, r3, #7
 8000a2c:	f003 0301 	and.w	r3, r3, #1
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d005      	beq.n	8000a40 <SPI1_IRQHandler+0x38>
		{
			MSPI_CHANNELS[MSPI1]->SPI_DR = MSPI_CALLBACK[MSPI1].copy_u16Txdata;
 8000a34:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <SPI1_IRQHandler+0xa4>)
 8000a36:	881a      	ldrh	r2, [r3, #0]
 8000a38:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <SPI1_IRQHandler+0xa8>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	e030      	b.n	8000aa2 <SPI1_IRQHandler+0x9a>
		}

		/* check if the Rx buffer Not empty is fired and ready to receive,so return the data  */
		else if ((GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_SR, RXN))&&(GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_CR2, MSPI_RXNE_INT)))
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <SPI1_IRQHandler+0xa8>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d00e      	beq.n	8000a6c <SPI1_IRQHandler+0x64>
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <SPI1_IRQHandler+0xa8>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	099b      	lsrs	r3, r3, #6
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d006      	beq.n	8000a6c <SPI1_IRQHandler+0x64>
		{
			MSPI_CALLBACK[MSPI1].ptr_u16Rxdata = (u16*)MSPI_CHANNELS[MSPI1]->SPI_DR ;
 8000a5e:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <SPI1_IRQHandler+0xa8>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <SPI1_IRQHandler+0xa4>)
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	e01a      	b.n	8000aa2 <SPI1_IRQHandler+0x9a>
		}

		/* check if the Mode Fault interrupt is fired, and notify it  */
		else if ((GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_SR, MODF))&&(GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_CR2, MSPI_ERR_INT)))
 8000a6c:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <SPI1_IRQHandler+0xa8>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	095b      	lsrs	r3, r3, #5
 8000a74:	f003 0301 	and.w	r3, r3, #1
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d007      	beq.n	8000a8c <SPI1_IRQHandler+0x84>
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <SPI1_IRQHandler+0xa8>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	095b      	lsrs	r3, r3, #5
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d10a      	bne.n	8000aa2 <SPI1_IRQHandler+0x9a>
		{

		}

		/* check if the Mode Fault interrupt is fired, and notify it  */
		else if ((GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_SR, OVR))&&(GET_BIT(MSPI_CHANNELS[MSPI1]->SPI_CR2, MSPI_ERR_INT)))
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <SPI1_IRQHandler+0xa8>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	099b      	lsrs	r3, r3, #6
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d002      	beq.n	8000aa2 <SPI1_IRQHandler+0x9a>
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <SPI1_IRQHandler+0xa8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
		{

		}
	}
	/* perform the Callback fun from the App */
	MSPI_CALLBACK[MSPI1].callback_TxRx();
 8000aa2:	4b02      	ldr	r3, [pc, #8]	; (8000aac <SPI1_IRQHandler+0xa4>)
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	4798      	blx	r3
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000090 	.word	0x20000090
 8000ab0:	20000000 	.word	0x20000000

08000ab4 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	if (MSPI_CALLBACK[MSPI2].callback_TxRx!= NULL)
 8000ab8:	4b27      	ldr	r3, [pc, #156]	; (8000b58 <SPI2_IRQHandler+0xa4>)
 8000aba:	695b      	ldr	r3, [r3, #20]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d046      	beq.n	8000b4e <SPI2_IRQHandler+0x9a>
	{
		/* check if the Tx Buffer empty is fired, so copy the data and transmit it  */
		if ((GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_SR, TXE))&&(GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_CR2, MSPI_TXE_INT)))
 8000ac0:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <SPI2_IRQHandler+0xa8>)
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	085b      	lsrs	r3, r3, #1
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d00d      	beq.n	8000aec <SPI2_IRQHandler+0x38>
 8000ad0:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <SPI2_IRQHandler+0xa8>)
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	09db      	lsrs	r3, r3, #7
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d005      	beq.n	8000aec <SPI2_IRQHandler+0x38>
		{
			MSPI_CHANNELS[MSPI2]->SPI_DR = MSPI_CALLBACK[MSPI2].copy_u16Txdata;
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <SPI2_IRQHandler+0xa4>)
 8000ae2:	899a      	ldrh	r2, [r3, #12]
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <SPI2_IRQHandler+0xa8>)
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	e030      	b.n	8000b4e <SPI2_IRQHandler+0x9a>
		}

		/* check if the Rx buffer Not empty is fired and ready to receive,so return the data  */
		else if ((GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_SR, RXN))&&(GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_CR2, MSPI_RXNE_INT)))
 8000aec:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <SPI2_IRQHandler+0xa8>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d00e      	beq.n	8000b18 <SPI2_IRQHandler+0x64>
 8000afa:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <SPI2_IRQHandler+0xa8>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	099b      	lsrs	r3, r3, #6
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d006      	beq.n	8000b18 <SPI2_IRQHandler+0x64>
		{
			MSPI_CALLBACK[MSPI2].ptr_u16Rxdata = (u16*)MSPI_CHANNELS[MSPI2]->SPI_DR ;
 8000b0a:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <SPI2_IRQHandler+0xa8>)
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <SPI2_IRQHandler+0xa4>)
 8000b14:	611a      	str	r2, [r3, #16]
 8000b16:	e01a      	b.n	8000b4e <SPI2_IRQHandler+0x9a>
		}

		/* check if the Mode Fault interrupt is fired, and notify it  */
		else if ((GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_SR, MODF))&&(GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_CR2, MSPI_ERR_INT)))
 8000b18:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <SPI2_IRQHandler+0xa8>)
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	095b      	lsrs	r3, r3, #5
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d007      	beq.n	8000b38 <SPI2_IRQHandler+0x84>
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <SPI2_IRQHandler+0xa8>)
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	095b      	lsrs	r3, r3, #5
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d10a      	bne.n	8000b4e <SPI2_IRQHandler+0x9a>
		{

		}

		/* check if the Mode Fault interrupt is fired, and notify it  */
		else if ((GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_SR, OVR))&&(GET_BIT(MSPI_CHANNELS[MSPI2]->SPI_CR2, MSPI_ERR_INT)))
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <SPI2_IRQHandler+0xa8>)
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	099b      	lsrs	r3, r3, #6
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d002      	beq.n	8000b4e <SPI2_IRQHandler+0x9a>
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <SPI2_IRQHandler+0xa8>)
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	685b      	ldr	r3, [r3, #4]
		{

		}
	}
	/* perform the Callback fun from the App */
	MSPI_CALLBACK[MSPI2].callback_TxRx();
 8000b4e:	4b02      	ldr	r3, [pc, #8]	; (8000b58 <SPI2_IRQHandler+0xa4>)
 8000b50:	695b      	ldr	r3, [r3, #20]
 8000b52:	4798      	blx	r3
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000090 	.word	0x20000090
 8000b5c:	20000000 	.word	0x20000000

08000b60 <SysTick_Handler>:

/**********************************************************************************************************************
 * HANDLER
 *********************************************************************************************************************/
void SysTick_Handler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	 * 1. clear the temp var to ba able to set the INT flag by reading it
	 * 2. disable the TICK INT
	 * 3. disable the systick
	 * 4. clear the value register
	 * 5. call the APP call back function from MCAL Layer */
	local_u8temp = 0;
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <SysTick_Handler+0x54>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	701a      	strb	r2, [r3, #0]
	if (global_u8flag == 1)
 8000b6a:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <SysTick_Handler+0x58>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d10e      	bne.n	8000b90 <SysTick_Handler+0x30>
	{
		CLR_BIT(STK->STK_CTRL, TICKINT);
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <SysTick_Handler+0x5c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a11      	ldr	r2, [pc, #68]	; (8000bbc <SysTick_Handler+0x5c>)
 8000b78:	f023 0302 	bic.w	r3, r3, #2
 8000b7c:	6013      	str	r3, [r2, #0]
		CLR_BIT(STK->STK_CTRL, ENABLE);
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <SysTick_Handler+0x5c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <SysTick_Handler+0x5c>)
 8000b84:	f023 0301 	bic.w	r3, r3, #1
 8000b88:	6013      	str	r3, [r2, #0]
		STK->STK_VAL = MSYSTICK_REG_CLEAR;
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <SysTick_Handler+0x5c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
	}

	if (MSYSTICK_Callback != NULL)
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <SysTick_Handler+0x60>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d002      	beq.n	8000b9e <SysTick_Handler+0x3e>
	{
		MSYSTICK_Callback();
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <SysTick_Handler+0x60>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4798      	blx	r3
	}

	local_u8temp = GET_BIT(STK->STK_CTRL,COUNTFLAG);
 8000b9e:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <SysTick_Handler+0x5c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	0c1b      	lsrs	r3, r3, #16
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b01      	ldr	r3, [pc, #4]	; (8000bb4 <SysTick_Handler+0x54>)
 8000bae:	701a      	strb	r2, [r3, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200000b0 	.word	0x200000b0
 8000bb8:	200000ac 	.word	0x200000ac
 8000bbc:	e000e010 	.word	0xe000e010
 8000bc0:	200000a8 	.word	0x200000a8

08000bc4 <USART1_IRQHandler>:
 * 			when receiving data by interrupt, 1. get the first byte from the data register
 * 			2. check if that byte the ENDline byte, if so then reset the index and set the Rec_flag
 * 			3. if was not update the index to receieve the next byte */

void USART1_IRQHandler (void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
	if ((GET_BIT(USART_CH[MUSART1]->USART_SR, TXE)))
 8000bc8:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <USART1_IRQHandler+0x98>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	09db      	lsrs	r3, r3, #7
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d018      	beq.n	8000c0a <USART1_IRQHandler+0x46>
	{
		uart_TxBufferIndex++;
 8000bd8:	4b21      	ldr	r3, [pc, #132]	; (8000c60 <USART1_IRQHandler+0x9c>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <USART1_IRQHandler+0x9c>)
 8000be2:	701a      	strb	r2, [r3, #0]
		if (uart_TxBUFFER[uart_TxBufferIndex] == MUSART_NULL_CHR)
 8000be4:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <USART1_IRQHandler+0x9c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <USART1_IRQHandler+0xa0>)
 8000bec:	5c9b      	ldrb	r3, [r3, r2]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d103      	bne.n	8000bfa <USART1_IRQHandler+0x36>
		{
			uart_TxBufferIndex = 0;
 8000bf2:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <USART1_IRQHandler+0x9c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
 8000bf8:	e007      	b.n	8000c0a <USART1_IRQHandler+0x46>
		}
		else
		{
			USART_CH[MUSART1]->USART_DR =  uart_TxBUFFER[uart_TxBufferIndex];
 8000bfa:	4b19      	ldr	r3, [pc, #100]	; (8000c60 <USART1_IRQHandler+0x9c>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <USART1_IRQHandler+0xa0>)
 8000c02:	5c9a      	ldrb	r2, [r3, r2]
 8000c04:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <USART1_IRQHandler+0x98>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]

		}
	}

	if (GET_BIT(USART_CH[MUSART1]->USART_SR, RXNE))
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <USART1_IRQHandler+0x98>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	095b      	lsrs	r3, r3, #5
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d01c      	beq.n	8000c54 <USART1_IRQHandler+0x90>
	{
		uart_RxBUFFER[uart_RxBufferIndex] = USART_CH[MUSART1]->USART_DR ;
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <USART1_IRQHandler+0x98>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	6859      	ldr	r1, [r3, #4]
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <USART1_IRQHandler+0xa4>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	b2c9      	uxtb	r1, r1
 8000c28:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <USART1_IRQHandler+0xa8>)
 8000c2a:	5499      	strb	r1, [r3, r2]

		if (uart_RxBUFFER[uart_RxBufferIndex] == MUSART_END_LINE)
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <USART1_IRQHandler+0xa4>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	461a      	mov	r2, r3
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <USART1_IRQHandler+0xa8>)
 8000c34:	5c9b      	ldrb	r3, [r3, r2]
 8000c36:	2b23      	cmp	r3, #35	; 0x23
 8000c38:	d106      	bne.n	8000c48 <USART1_IRQHandler+0x84>
		{
			uart_RxBufferIndex = 0;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <USART1_IRQHandler+0xa4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
			Receive_Flag = 1;
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <USART1_IRQHandler+0xac>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	701a      	strb	r2, [r3, #0]
		else
		{
			uart_RxBufferIndex++;
		}
	}
}
 8000c46:	e005      	b.n	8000c54 <USART1_IRQHandler+0x90>
			uart_RxBufferIndex++;
 8000c48:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <USART1_IRQHandler+0xa4>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <USART1_IRQHandler+0xa4>)
 8000c52:	701a      	strb	r2, [r3, #0]
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	200000ae 	.word	0x200000ae
 8000c64:	200000d0 	.word	0x200000d0
 8000c68:	200000af 	.word	0x200000af
 8000c6c:	200000b4 	.word	0x200000b4
 8000c70:	200000ad 	.word	0x200000ad

08000c74 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

	if ((GET_BIT(USART_CH[MUSART2]->USART_SR, TXE)))
 8000c78:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <USART2_IRQHandler+0x98>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	09db      	lsrs	r3, r3, #7
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d018      	beq.n	8000cba <USART2_IRQHandler+0x46>
	{
		uart_TxBufferIndex++;
 8000c88:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <USART2_IRQHandler+0x9c>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <USART2_IRQHandler+0x9c>)
 8000c92:	701a      	strb	r2, [r3, #0]
		if (uart_TxBUFFER[uart_TxBufferIndex] == MUSART_NULL_CHR)
 8000c94:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <USART2_IRQHandler+0x9c>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <USART2_IRQHandler+0xa0>)
 8000c9c:	5c9b      	ldrb	r3, [r3, r2]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d103      	bne.n	8000caa <USART2_IRQHandler+0x36>
		{
			uart_TxBufferIndex = 0;
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <USART2_IRQHandler+0x9c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	e007      	b.n	8000cba <USART2_IRQHandler+0x46>
		}
		else
		{
			USART_CH[MUSART2]->USART_DR =  uart_TxBUFFER[uart_TxBufferIndex];
 8000caa:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <USART2_IRQHandler+0x9c>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <USART2_IRQHandler+0xa0>)
 8000cb2:	5c9a      	ldrb	r2, [r3, r2]
 8000cb4:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <USART2_IRQHandler+0x98>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	605a      	str	r2, [r3, #4]

		}
	}

	if (GET_BIT(USART_CH[MUSART2]->USART_SR, RXNE))
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <USART2_IRQHandler+0x98>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	095b      	lsrs	r3, r3, #5
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d01c      	beq.n	8000d04 <USART2_IRQHandler+0x90>
	{
		uart_RxBUFFER[uart_RxBufferIndex] = USART_CH[MUSART1]->USART_DR ;
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <USART2_IRQHandler+0x98>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	6859      	ldr	r1, [r3, #4]
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <USART2_IRQHandler+0xa4>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	b2c9      	uxtb	r1, r1
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <USART2_IRQHandler+0xa8>)
 8000cda:	5499      	strb	r1, [r3, r2]

		if (uart_RxBUFFER[uart_RxBufferIndex] == MUSART_END_LINE)
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <USART2_IRQHandler+0xa4>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <USART2_IRQHandler+0xa8>)
 8000ce4:	5c9b      	ldrb	r3, [r3, r2]
 8000ce6:	2b23      	cmp	r3, #35	; 0x23
 8000ce8:	d106      	bne.n	8000cf8 <USART2_IRQHandler+0x84>
		{
			uart_RxBufferIndex = 0;
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <USART2_IRQHandler+0xa4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
			Receive_Flag = 1;
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <USART2_IRQHandler+0xac>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]
		else
		{
			uart_RxBufferIndex++;
		}
	}
}
 8000cf6:	e005      	b.n	8000d04 <USART2_IRQHandler+0x90>
			uart_RxBufferIndex++;
 8000cf8:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <USART2_IRQHandler+0xa4>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <USART2_IRQHandler+0xa4>)
 8000d02:	701a      	strb	r2, [r3, #0]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	200000ae 	.word	0x200000ae
 8000d14:	200000d0 	.word	0x200000d0
 8000d18:	200000af 	.word	0x200000af
 8000d1c:	200000b4 	.word	0x200000b4
 8000d20:	200000ad 	.word	0x200000ad

08000d24 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
	if ((GET_BIT(USART_CH[MUSART3]->USART_SR, TXE)))
 8000d28:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <USART3_IRQHandler+0x98>)
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	09db      	lsrs	r3, r3, #7
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d018      	beq.n	8000d6a <USART3_IRQHandler+0x46>
	{
		uart_TxBufferIndex++;
 8000d38:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <USART3_IRQHandler+0x9c>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <USART3_IRQHandler+0x9c>)
 8000d42:	701a      	strb	r2, [r3, #0]
		if (uart_TxBUFFER[uart_TxBufferIndex] == MUSART_NULL_CHR)
 8000d44:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <USART3_IRQHandler+0x9c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <USART3_IRQHandler+0xa0>)
 8000d4c:	5c9b      	ldrb	r3, [r3, r2]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d103      	bne.n	8000d5a <USART3_IRQHandler+0x36>
		{
			uart_TxBufferIndex = 0;
 8000d52:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <USART3_IRQHandler+0x9c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]
 8000d58:	e007      	b.n	8000d6a <USART3_IRQHandler+0x46>
		}
		else
		{
			USART_CH[MUSART3]->USART_DR =  uart_TxBUFFER[uart_TxBufferIndex];
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <USART3_IRQHandler+0x9c>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <USART3_IRQHandler+0xa0>)
 8000d62:	5c9a      	ldrb	r2, [r3, r2]
 8000d64:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <USART3_IRQHandler+0x98>)
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	605a      	str	r2, [r3, #4]
		}
	}

	if (GET_BIT(USART_CH[MUSART3]->USART_SR, RXNE))
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <USART3_IRQHandler+0x98>)
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	095b      	lsrs	r3, r3, #5
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d01c      	beq.n	8000db4 <USART3_IRQHandler+0x90>
	{
		uart_RxBUFFER[uart_RxBufferIndex] = USART_CH[MUSART3]->USART_DR ;
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <USART3_IRQHandler+0x98>)
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	6859      	ldr	r1, [r3, #4]
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <USART3_IRQHandler+0xa4>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	b2c9      	uxtb	r1, r1
 8000d88:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <USART3_IRQHandler+0xa8>)
 8000d8a:	5499      	strb	r1, [r3, r2]

		if (uart_RxBUFFER[uart_RxBufferIndex] == MUSART_END_LINE)
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <USART3_IRQHandler+0xa4>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <USART3_IRQHandler+0xa8>)
 8000d94:	5c9b      	ldrb	r3, [r3, r2]
 8000d96:	2b23      	cmp	r3, #35	; 0x23
 8000d98:	d106      	bne.n	8000da8 <USART3_IRQHandler+0x84>
		{
			uart_RxBufferIndex = 0;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <USART3_IRQHandler+0xa4>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
			Receive_Flag = 1;
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <USART3_IRQHandler+0xac>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
		else
		{
			uart_RxBufferIndex++;
		}
	}
}
 8000da6:	e005      	b.n	8000db4 <USART3_IRQHandler+0x90>
			uart_RxBufferIndex++;
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <USART3_IRQHandler+0xa4>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	3301      	adds	r3, #1
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <USART3_IRQHandler+0xa4>)
 8000db2:	701a      	strb	r2, [r3, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	200000ae 	.word	0x200000ae
 8000dc4:	200000d0 	.word	0x200000d0
 8000dc8:	200000af 	.word	0x200000af
 8000dcc:	200000b4 	.word	0x200000b4
 8000dd0:	200000ad 	.word	0x200000ad

08000dd4 <main>:
/****************************************************************/

#include "App_int.h"

int main(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	App_voidstartApp();
 8000dd8:	f7ff f9ca 	bl	8000170 <App_voidstartApp>
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000de4:	480d      	ldr	r0, [pc, #52]	; (8000e1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000de6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000de8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dec:	480c      	ldr	r0, [pc, #48]	; (8000e20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dee:	490d      	ldr	r1, [pc, #52]	; (8000e24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000df0:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <LoopForever+0xe>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e04:	4c0a      	ldr	r4, [pc, #40]	; (8000e30 <LoopForever+0x16>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e12:	f000 f811 	bl	8000e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e16:	f7ff ffdd 	bl	8000dd4 <main>

08000e1a <LoopForever>:

LoopForever:
    b LoopForever
 8000e1a:	e7fe      	b.n	8000e1a <LoopForever>
  ldr   r0, =_estack
 8000e1c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e24:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000e28:	08000ea0 	.word	0x08000ea0
  ldr r2, =_sbss
 8000e2c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000e30:	200000ec 	.word	0x200000ec

08000e34 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e34:	e7fe      	b.n	8000e34 <ADC3_IRQHandler>
	...

08000e38 <__libc_init_array>:
 8000e38:	b570      	push	{r4, r5, r6, lr}
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4d0c      	ldr	r5, [pc, #48]	; (8000e70 <__libc_init_array+0x38>)
 8000e3e:	4c0d      	ldr	r4, [pc, #52]	; (8000e74 <__libc_init_array+0x3c>)
 8000e40:	1b64      	subs	r4, r4, r5
 8000e42:	10a4      	asrs	r4, r4, #2
 8000e44:	42a6      	cmp	r6, r4
 8000e46:	d109      	bne.n	8000e5c <__libc_init_array+0x24>
 8000e48:	f000 f81a 	bl	8000e80 <_init>
 8000e4c:	2600      	movs	r6, #0
 8000e4e:	4d0a      	ldr	r5, [pc, #40]	; (8000e78 <__libc_init_array+0x40>)
 8000e50:	4c0a      	ldr	r4, [pc, #40]	; (8000e7c <__libc_init_array+0x44>)
 8000e52:	1b64      	subs	r4, r4, r5
 8000e54:	10a4      	asrs	r4, r4, #2
 8000e56:	42a6      	cmp	r6, r4
 8000e58:	d105      	bne.n	8000e66 <__libc_init_array+0x2e>
 8000e5a:	bd70      	pop	{r4, r5, r6, pc}
 8000e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e60:	4798      	blx	r3
 8000e62:	3601      	adds	r6, #1
 8000e64:	e7ee      	b.n	8000e44 <__libc_init_array+0xc>
 8000e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e6a:	4798      	blx	r3
 8000e6c:	3601      	adds	r6, #1
 8000e6e:	e7f2      	b.n	8000e56 <__libc_init_array+0x1e>
 8000e70:	08000e98 	.word	0x08000e98
 8000e74:	08000e98 	.word	0x08000e98
 8000e78:	08000e98 	.word	0x08000e98
 8000e7c:	08000e9c 	.word	0x08000e9c

08000e80 <_init>:
 8000e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e82:	bf00      	nop
 8000e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e86:	bc08      	pop	{r3}
 8000e88:	469e      	mov	lr, r3
 8000e8a:	4770      	bx	lr

08000e8c <_fini>:
 8000e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e8e:	bf00      	nop
 8000e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e92:	bc08      	pop	{r3}
 8000e94:	469e      	mov	lr, r3
 8000e96:	4770      	bx	lr
